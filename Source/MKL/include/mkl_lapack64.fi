!!
!!               INTEL CORPORATION PROPRIETARY INFORMATION
!!  This software is supplied under the terms of a license agreement or
!!  nondisclosure agreement with Intel Corporation and may not be copied
!!  or disclosed except in accordance with the terms of that agreement.
!!    Copyright (c) 1999, 2000 Intel Corporation. All Rights Reserved.
!!
!! File    : mkl_lapack64.fi
!! Purpose : MKL Fortran interface for LAPACK routines
!!           for double precision data
!! Author  : Shemyakin Andrey
!!

$IF .NOT. DEFINED (MKL_LAPACK64_HEADER)

$DEFINE MKL_LAPACK64_HEADER

      interface to 
     $subroutine dbdsqr( uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u,
     $                   ldu, c, ldc, work, info )
      character          uplo
      integer            info, ldc, ldu, ldvt, n, ncc, ncvt, nru
      double precision   c( ldc, * ), d( * ), e( * ), u( ldu, * ),
     $                   vt( ldvt, * ), work( * )
      end

      interface to 
     $subroutine ddisna( job, m, n, d, sep, info )
      character          job
      integer            info, m, n
      double precision   d( * ), sep( * )
      end

      interface to 
     $subroutine dgbbrd( vect, m, n, ncc, kl, ku, ab, ldab, d, e, q,
     $                   ldq, pt, ldpt, c, ldc, work, info )
      character          vect
      integer            info, kl, ku, ldab, ldc, ldpt, ldq, m, n, ncc
      double precision   ab( ldab, * ), c( ldc, * ), d( * ), e( * ),
     $                   pt( ldpt, * ), q( ldq, * ), work( * )
      end

      interface to 
     $subroutine dgbcon( norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond,
     $                   work, iwork, info )
      character          norm
      integer            info, kl, ku, ldab, n
      double precision   anorm, rcond
      integer            ipiv( * ), iwork( * )
      double precision   ab( ldab, * ), work( * )
      end

      interface to 
     $subroutine dgbequ( m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd,
     $                   amax, info )
      integer            info, kl, ku, ldab, m, n
      double precision   amax, colcnd, rowcnd
      double precision   ab( ldab, * ), c( * ), r( * )
      end

      interface to 
     $subroutine dgbrfs( trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb,
     $                   ipiv, b, ldb, x, ldx, ferr, berr, work, iwork,
     $                   info )
      character          trans
      integer            info, kl, ku, ldab, ldafb, ldb, ldx, n, nrhs
      integer            ipiv( * ), iwork( * )
      double precision   ab( ldab, * ), afb( ldafb, * ), b( ldb, * ),
     $                   berr( * ), ferr( * ), work( * ), x( ldx, * )
      end

      interface to 
     $subroutine dgbsv( n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info )
      integer            info, kl, ku, ldab, ldb, n, nrhs
      integer            ipiv( * )
      double precision   ab( ldab, * ), b( ldb, * )
      end

      interface to 
     $subroutine dgbsvx( fact, trans, n, kl, ku, nrhs, ab, ldab, afb,
     $                   ldafb, ipiv, equed, r, c, b, ldb, x, ldx,
     $                   rcond, ferr, berr, work, iwork, info )
      character          equed, fact, trans
      integer            info, kl, ku, ldab, ldafb, ldb, ldx, n, nrhs
      double precision   rcond
      integer            ipiv( * ), iwork( * )
      double precision   ab( ldab, * ), afb( ldafb, * ), b( ldb, * ),
     $                   berr( * ), c( * ), ferr( * ), r( * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine dgbtf2( m, n, kl, ku, ab, ldab, ipiv, info )
      integer            info, kl, ku, ldab, m, n
      integer            ipiv( * )
      double precision   ab( ldab, * )
      end

      interface to 
     $subroutine dgbtrf( m, n, kl, ku, ab, ldab, ipiv, info )
      integer            info, kl, ku, ldab, m, n
      integer            ipiv( * )
      double precision   ab( ldab, * )
      end

      interface to 
     $subroutine dgbtrs( trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb,
     $                   info )
      character          trans
      integer            info, kl, ku, ldab, ldb, n, nrhs
      integer            ipiv( * )
      double precision   ab( ldab, * ), b( ldb, * )
      end

      interface to 
     $subroutine dgebak( job, side, n, ilo, ihi, scale, m, v, ldv,
     $                   info )
      character          job, side
      integer            ihi, ilo, info, ldv, m, n
      double precision   scale( * ), v( ldv, * )
      end

      interface to 
     $subroutine dgebal( job, n, a, lda, ilo, ihi, scale, info )
      character          job
      integer            ihi, ilo, info, lda, n
      double precision   a( lda, * ), scale( * )
      end

      interface to 
     $subroutine dgebd2( m, n, a, lda, d, e, tauq, taup, work, info )
      integer            info, lda, m, n
      double precision   a( lda, * ), d( * ), e( * ), taup( * ),
     $                   tauq( * ), work( * )
      end

      interface to 
     $subroutine dgebrd( m, n, a, lda, d, e, tauq, taup, work, lwork,
     $                   info )
      integer            info, lda, lwork, m, n
      double precision   a( lda, * ), d( * ), e( * ), taup( * ),
     $                   tauq( * ), work( lwork )
      end

      interface to 
     $subroutine dgecon( norm, n, a, lda, anorm, rcond, work, iwork,
     $                   info )
      character          norm
      integer            info, lda, n
      double precision   anorm, rcond
      integer            iwork( * )
      double precision   a( lda, * ), work( * )
      end

      interface to 
     $subroutine dgeequ( m, n, a, lda, r, c, rowcnd, colcnd, amax,
     $                   info )
      integer            info, lda, m, n
      double precision   amax, colcnd, rowcnd
      double precision   a( lda, * ), c( * ), r( * )
      end

      interface to 
     $subroutine dgees( jobvs, sort, select, n, a, lda, sdim, wr, wi,
     $                  vs, ldvs, work, lwork, bwork, info )
      character          jobvs, sort
      integer            info, lda, ldvs, lwork, n, sdim
      logical            bwork( * )
      double precision   a( lda, * ), vs( ldvs, * ), wi( * ), work( * ),
     $                   wr( * )
      logical            select
      external           select
      end

      interface to 
     $subroutine dgeesx( jobvs, sort, select, sense, n, a, lda, sdim,
     $                   wr, wi, vs, ldvs, rconde, rcondv, work, lwork,
     $                   iwork, liwork, bwork, info )
      character          jobvs, sense, sort
      integer            info, lda, ldvs, liwork, lwork, n, sdim
      double precision   rconde, rcondv
      logical            bwork( * )
      integer            iwork( * )
      double precision   a( lda, * ), vs( ldvs, * ), wi( * ), work( * ),
     $                   wr( * )
      logical            select
      external           select
      end

      interface to 
     $subroutine dgeev( jobvl, jobvr, n, a, lda, wr, wi, vl, ldvl, vr,
     $                  ldvr, work, lwork, info )
      character          jobvl, jobvr
      integer            info, lda, ldvl, ldvr, lwork, n
      double precision   a( lda, * ), vl( ldvl, * ), vr( ldvr, * ),
     $                   wi( * ), work( * ), wr( * )
      end

      interface to 
     $subroutine dgeevx( balanc, jobvl, jobvr, sense, n, a, lda, wr, wi,
     $                   vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm,
     $                   rconde, rcondv, work, lwork, iwork, info )
      character          balanc, jobvl, jobvr, sense
      integer            ihi, ilo, info, lda, ldvl, ldvr, lwork, n
      double precision   abnrm
      integer            iwork( * )
      double precision   a( lda, * ), rconde( * ), rcondv( * ),
     $                   scale( * ), vl( ldvl, * ), vr( ldvr, * ),
     $                   wi( * ), work( * ), wr( * )
      end

      interface to 
     $subroutine dgegs( jobvsl, jobvsr, n, a, lda, b, ldb, alphar,
     $                  alphai, beta, vsl, ldvsl, vsr, ldvsr, work,
     $                  lwork, info )
      character          jobvsl, jobvsr
      integer            info, lda, ldb, ldvsl, ldvsr, lwork, n
      double precision   a( lda, * ), alphai( * ), alphar( * ),
     $                   b( ldb, * ), beta( * ), vsl( ldvsl, * ),
     $                   vsr( ldvsr, * ), work( * )
      end

      interface to 
     $subroutine dgegv( jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai,
     $                  beta, vl, ldvl, vr, ldvr, work, lwork, info )
      character          jobvl, jobvr
      integer            info, lda, ldb, ldvl, ldvr, lwork, n
      double precision   a( lda, * ), alphai( * ), alphar( * ),
     $                   b( ldb, * ), beta( * ), vl( ldvl, * ),
     $                   vr( ldvr, * ), work( * )
      end

      interface to 
     $subroutine dgehd2( n, ilo, ihi, a, lda, tau, work, info )
      integer            ihi, ilo, info, lda, n
      double precision   a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine dgehrd( n, ilo, ihi, a, lda, tau, work, lwork, info )
      integer            ihi, ilo, info, lda, lwork, n
      double precision   a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine dgelq2( m, n, a, lda, tau, work, info )
      integer            info, lda, m, n
      double precision   a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine dgelqf( m, n, a, lda, tau, work, lwork, info )
      integer            info, lda, lwork, m, n
      double precision   a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine dgels( trans, m, n, nrhs, a, lda, b, ldb, work, lwork,
     $                  info )
      character          trans
      integer            info, lda, ldb, lwork, m, n, nrhs
      double precision   a( lda, * ), b( ldb, * ), work( lwork )
      end

      interface to 
     $subroutine dgelss( m, n, nrhs, a, lda, b, ldb, s, rcond, rank,
     $                   work, lwork, info )
      integer            info, lda, ldb, lwork, m, n, nrhs, rank
      double precision   rcond
      double precision   a( lda, * ), b( ldb, * ), s( * ), work( * )
      end

      interface to 
     $subroutine dgelsd( m, n, nrhs, a, lda, b, ldb, s, rcond, rank,
     $                   work, lwork, iwork, info )
      integer            info, lda, ldb, lwork,m,n,nrhs,rank,iwork(*)
      double precision   rcond
      double precision   a( lda, * ), b( ldb, * ), s( * ), work( * )
      end

      interface to 
     $subroutine dgelsx( m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank,
     $                   work, info )
      integer            info, lda, ldb, m, n, nrhs, rank
      double precision   rcond
      integer            jpvt( * )
      double precision   a( lda, * ), b( ldb, * ), work( * )
      end

      interface to 
     $subroutine dgeql2( m, n, a, lda, tau, work, info )
      integer            info, lda, m, n
      double precision   a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine dgeqlf( m, n, a, lda, tau, work, lwork, info )
      integer            info, lda, lwork, m, n
      double precision   a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine dgeqr2( m, n, a, lda, tau, work, info )
      integer            info, lda, m, n
      double precision   a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine dgeqrf( m, n, a, lda, tau, work, lwork, info )
      integer            info, lda, lwork, m, n
      double precision   a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine dgerfs( trans, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb,
     $                   x, ldx, ferr, berr, work, iwork, info )
      character          trans
      integer            info, lda, ldaf, ldb, ldx, n, nrhs
      integer            ipiv( * ), iwork( * )
      double precision   a( lda, * ), af( ldaf, * ), b( ldb, * ),
     $                   berr( * ), ferr( * ), work( * ), x( ldx, * )
      end

      interface to 
     $subroutine dgerq2( m, n, a, lda, tau, work, info )
      integer            info, lda, m, n
      double precision   a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine dgerqf( m, n, a, lda, tau, work, lwork, info )
      integer            info, lda, lwork, m, n
      double precision   a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine dgesv( n, nrhs, a, lda, ipiv, b, ldb, info )
      integer            info, lda, ldb, n, nrhs
      integer            ipiv( * )
      double precision   a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine dgesvd( jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt,
     $                   work, lwork, info )
      character          jobu, jobvt
      integer            info, lda, ldu, ldvt, lwork, m, n
      double precision   a( lda, * ), s( * ), u( ldu, * ),
     $                   vt( ldvt, * ), work( * )
      end

      interface to 
     $subroutine dgesvx( fact, trans, n, nrhs, a, lda, af, ldaf, ipiv,
     $                   equed, r, c, b, ldb, x, ldx, rcond, ferr, berr,
     $                   work, iwork, info )
      character          equed, fact, trans
      integer            info, lda, ldaf, ldb, ldx, n, nrhs
      double precision   rcond
      integer            ipiv( * ), iwork( * )
      double precision   a( lda, * ), af( ldaf, * ), b( ldb, * ),
     $                   berr( * ), c( * ), ferr( * ), r( * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine dgetf2( m, n, a, lda, ipiv, info )
      integer            info, lda, m, n
      integer            ipiv( * )
      double precision   a( lda, * )
      end

      interface to 
     $subroutine dgetrf( m, n, a, lda, ipiv, info )
      integer            info, lda, m, n
      integer            ipiv( * )
      double precision   a( lda, * )
      end

      interface to 
     $subroutine dgetri( n, a, lda, ipiv, work, lwork, info )
      integer            info, lda, lwork, n
      integer            ipiv( * )
      double precision   a( lda, * ), work( lwork )
      end

      interface to 
     $subroutine dgetrs( trans, n, nrhs, a, lda, ipiv, b, ldb, info )
      character          trans
      integer            info, lda, ldb, n, nrhs
      integer            ipiv( * )
      double precision   a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine dggbak( job, side, n, ilo, ihi, lscale, rscale, m, v,
     $                   ldv, info )
      character          job, side
      integer            ihi, ilo, info, ldv, m, n
      double precision   lscale( * ), rscale( * ), v( ldv, * )
      end

      interface to 
     $subroutine dggbal( job, n, a, lda, b, ldb, ilo, ihi, lscale,
     $                   rscale, work, info )
      character          job
      integer            ihi, ilo, info, lda, ldb, n
      double precision   a( lda, * ), b( ldb, * ), lscale( * ),
     $                   rscale( * ), work( * )
      end

      interface to 
     $subroutine dggglm( n, m, p, a, lda, b, ldb, d, x, y, work, lwork,
     $                   info )
      integer            info, lda, ldb, lwork, m, n, p
      double precision   a( lda, * ), b( ldb, * ), d( * ), work( * ),
     $                   x( * ), y( * )
      end

      interface to 
     $subroutine dgghrd( compq, compz, n, ilo, ihi, a, lda, b, ldb, q,
     $                   ldq, z, ldz, info )
      character          compq, compz
      integer            ihi, ilo, info, lda, ldb, ldq, ldz, n
      double precision   a( lda, * ), b( ldb, * ), q( ldq, * ),
     $                   z( ldz, * )
      end

      interface to 
     $subroutine dgglse( m, n, p, a, lda, b, ldb, c, d, x, work, lwork,
     $                   info )
      integer            info, lda, ldb, lwork, m, n, p
      double precision   a( lda, * ), b( ldb, * ), c( * ), d( * ),
     $                   work( * ), x( * )
      end

      interface to 
     $subroutine dggqrf( n, m, p, a, lda, taua, b, ldb, taub, work,
     $                   lwork, info )
      integer            info, lda, ldb, lwork, m, n, p
      double precision   a( lda, * ), b( ldb, * ), taua( * ), taub( * ),
     $                   work( * )
      end

      interface to 
     $subroutine dggrqf( m, p, n, a, lda, taua, b, ldb, taub, work,
     $                   lwork, info )
      integer            info, lda, ldb, lwork, m, n, p
      double precision   a( lda, * ), b( ldb, * ), taua( * ), taub( * ),
     $                   work( * )
      end

      interface to 
     $subroutine dggsvd( jobu, jobv, jobq, m, n, p, k, l, a, lda, b,
     $                   ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work,
     $                   iwork, info )
      character          jobq, jobu, jobv
      integer            info, k, l, lda, ldb, ldq, ldu, ldv, m, n, p
      integer            iwork( * )
      double precision   a( lda, * ), alpha( * ), b( ldb, * ),
     $                   beta( * ), q( ldq, * ), u( ldu, * ),
     $                   v( ldv, * ), work( * )
      end

      interface to 
     $subroutine dggsvp( jobu, jobv, jobq, m, p, n, a, lda, b, ldb,
     $                   tola, tolb, k, l, u, ldu, v, ldv, q, ldq,
     $                   iwork, tau, work, info )
      character          jobq, jobu, jobv
      integer            info, k, l, lda, ldb, ldq, ldu, ldv, m, n, p
      double precision   tola, tolb
      integer            iwork( * )
      double precision   a( lda, * ), b( ldb, * ), q( ldq, * ),
     $                   tau( * ), u( ldu, * ), v( ldv, * ), work( * )
      end

      interface to 
     $subroutine dgtcon( norm, n, dl, d, du, du2, ipiv, anorm, rcond,
     $                   work, iwork, info )
      character          norm
      integer            info, n
      double precision   anorm, rcond
      integer            ipiv( * ), iwork( * )
      double precision   d( * ), dl( * ), du( * ), du2( * ), work( * )
      end

      interface to 
     $subroutine dgtrfs( trans, n, nrhs, dl, d, du, dlf, df, duf, du2,
     $                   ipiv, b, ldb, x, ldx, ferr, berr, work, iwork,
     $                   info )
      character          trans
      integer            info, ldb, ldx, n, nrhs
      integer            ipiv( * ), iwork( * )
      double precision   b( ldb, * ), berr( * ), d( * ), df( * ),
     $                   dl( * ), dlf( * ), du( * ), du2( * ), duf( * ),
     $                   ferr( * ), work( * ), x( ldx, * )
      end

      interface to 
     $subroutine dgtsv( n, nrhs, dl, d, du, b, ldb, info )
      integer            info, ldb, n, nrhs
      double precision   b( ldb, * ), d( * ), dl( * ), du( * )
      end

      interface to 
     $subroutine dgtsvx( fact, trans, n, nrhs, dl, d, du, dlf, df, duf,
     $                   du2, ipiv, b, ldb, x, ldx, rcond, ferr, berr,
     $                   work, iwork, info )
      character          fact, trans
      integer            info, ldb, ldx, n, nrhs
      double precision   rcond
      integer            ipiv( * ), iwork( * )
      double precision   b( ldb, * ), berr( * ), d( * ), df( * ),
     $                   dl( * ), dlf( * ), du( * ), du2( * ), duf( * ),
     $                   ferr( * ), work( * ), x( ldx, * )
      end

      interface to 
     $subroutine dgttrf( n, dl, d, du, du2, ipiv, info )
      integer            info, n
      integer            ipiv( * )
      double precision   d( * ), dl( * ), du( * ), du2( * )
      end

      interface to 
     $subroutine dgttrs( trans, n, nrhs, dl, d, du, du2, ipiv, b, ldb,
     $                   info )
      character          trans
      integer            info, ldb, n, nrhs
      integer            ipiv( * )
      double precision   b( ldb, * ), d( * ), dl( * ), du( * ), du2( * )
      end

      interface to 
     $subroutine dhgeqz( job, compq, compz, n, ilo, ihi, a, lda, b, ldb,
     $                   alphar, alphai, beta, q, ldq, z, ldz, work,
     $                   lwork, info )
      character          compq, compz, job
      integer            ihi, ilo, info, lda, ldb, ldq, ldz, lwork, n
      double precision   a( lda, * ), alphai( * ), alphar( * ),
     $                   b( ldb, * ), beta( * ), q( ldq, * ), work( * ),
     $                   z( ldz, * )
      end

      interface to 
     $subroutine dhsein( side, eigsrc, initv, select, n, h, ldh, wr, wi,
     $                   vl, ldvl, vr, ldvr, mm, m, work, ifaill,
     $                   ifailr, info )
      character          eigsrc, initv, side
      integer            info, ldh, ldvl, ldvr, m, mm, n
      logical            select( * )
      integer            ifaill( * ), ifailr( * )
      double precision   h( ldh, * ), vl( ldvl, * ), vr( ldvr, * ),
     $                   wi( * ), work( * ), wr( * )
      end

      interface to 
     $subroutine dhseqr( job, compz, n, ilo, ihi, h, ldh, wr, wi, z,
     $                   ldz, work, lwork, info )
      character          compz, job
      integer            ihi, ilo, info, ldh, ldz, lwork, n
      double precision   h( ldh, * ), wi( * ), work( * ), wr( * ),
     $                   z( ldz, * )
      end

      interface to 
     $subroutine dlaed0( icompq, qsiz, n, d, e, q, ldq, qstore, ldqs,
     $                   work, iwork, info )
      integer            icompq, info, ldq, ldqs, n, qsiz
      integer            iwork( * )
      double precision   d( * ), e( * ), q( ldq, * ), qstore( ldqs, * ),
     $                   work( * )
      end

      interface to 
     $subroutine dlaed1( n, d, q, ldq, indxq, rho, cutpnt, work, iwork,
     $                   info )
      integer            cutpnt, info, ldq, n
      double precision   rho
      integer            indxq( * ), iwork( * )
      double precision   d( * ), q( ldq, * ), work( * )
      end

      interface to 
     $subroutine dlaed2( k, n, d, q, ldq, indxq, rho, cutpnt, z, dlamda,
     $                   q2, ldq2, indxc, w, indxp, indx, coltyp, info )
      integer            cutpnt, info, k, ldq, ldq2, n
      double precision   rho
      integer            coltyp( * ), indx( * ), indxc( * ), indxp( * ),
     $                   indxq( * )
      double precision   d( * ), dlamda( * ), q( ldq, * ),
     $                   q2( ldq2, * ), w( * ), z( * )
      end

      interface to 
     $subroutine dlaed3( k, kstart, kstop, n, d, q, ldq, rho, cutpnt,
     $                   dlamda, q2, ldq2, indxc, ctot, w, s, lds,
     $                   info )
      integer            cutpnt, info, k, kstart, kstop, ldq, ldq2, lds,
     $                   n
      double precision   rho
      integer            ctot( * ), indxc( * )
      double precision   d( * ), dlamda( * ), q( ldq, * ),
     $                   q2( ldq2, * ), s( lds, * ), w( * )
      end

      interface to 
     $subroutine dlaed4( n, i, d, z, delta, rho, dlam, info )
      integer            i, info, n
      double precision   dlam, rho
      double precision   d( * ), delta( * ), z( * )
      end

      interface to 
     $subroutine dlaed5( i, d, z, delta, rho, dlam )
      integer            i
      double precision   dlam, rho
      double precision   d( 2 ), delta( 2 ), z( 2 )
      end

      interface to 
     $subroutine dlaed6( kniter, orgati, rho, d, z, finit, tau, info )
      logical            orgati
      integer            info, kniter
      double precision   finit, rho, tau
      double precision   d( 3 ), z( 3 )
      end

      interface to 
     $subroutine dlaed7( icompq, n, qsiz, tlvls, curlvl, curpbm, d, q,
     $                   ldq, indxq, rho, cutpnt, qstore, qptr, prmptr,
     $                   perm, givptr, givcol, givnum, work, iwork,
     $                   info )
      integer            curlvl, curpbm, cutpnt, icompq, info, ldq, n,
     $                   qsiz, tlvls
      double precision   rho
      integer            givcol( 2, * ), givptr( * ), indxq( * ),
     $                   iwork( * ), perm( * ), prmptr( * ), qptr( * )
      double precision   d( * ), givnum( 2, * ), q( ldq, * ),
     $                   qstore( * ), work( * )
      end

      interface to 
     $subroutine dlaed8( icompq, k, n, qsiz, d, q, ldq, indxq, rho,
     $                   cutpnt, z, dlamda, q2, ldq2, w, perm, givptr,
     $                   givcol, givnum, indxp, indx, info )
      integer            cutpnt, givptr, icompq, info, k, ldq, ldq2, n,
     $                   qsiz
      double precision   rho
      integer            givcol( 2, * ), indx( * ), indxp( * ),
     $                   indxq( * ), perm( * )
      double precision   d( * ), dlamda( * ), givnum( 2, * ),
     $                   q( ldq, * ), q2( ldq2, * ), w( * ), z( * )
      end

      interface to 
     $subroutine dlaed9( k, kstart, kstop, n, d, q, ldq, rho, dlamda, w,
     $                   s, lds, info )
      integer            info, k, kstart, kstop, ldq, lds, n
      double precision   rho
      double precision   d( * ), dlamda( * ), q( ldq, * ), s( lds, * ),
     $                   w( * )
      end

      interface to 
     $subroutine dlaeda( n, tlvls, curlvl, curpbm, prmptr, perm, givptr,
     $                   givcol, givnum, q, qptr, z, ztemp, info )
      integer            curlvl, curpbm, info, n, tlvls
      integer            givcol( 2, * ), givptr( * ), perm( * ),
     $                   prmptr( * ), qptr( * )
      double precision   givnum( 2, * ), q( * ), z( * ), ztemp( * )
      end

      interface to 
     $subroutine dlagtf( n, a, lambda, b, c, tol, d, in, info )
      integer            info, n
      double precision   lambda, tol
      integer            in( * )
      double precision   a( * ), b( * ), c( * ), d( * )
      end

      interface to 
     $subroutine dlamrg( n1, n2, a, dtrd1, dtrd2, index )
      integer            dtrd1, dtrd2, n1, n2
      integer            index( * )
      double precision   a( * )
      end

      interface to 
     $subroutine dlasq1( n, d, e, work, info )
      integer            info, n
      double precision   d( * ), e( * ), work( * )
      end

      interface to 
     $subroutine dlasq2( m, q, e, qq, ee, eps, tol2, small2, sup, kend,
     $                   info )
      integer            info, kend, m
      double precision   eps, small2, sup, tol2
      double precision   e( * ), ee( * ), q( * ), qq( * )
      end

      interface to 
     $subroutine dlasq3( n, q, e, qq, ee, sup, sigma, kend, off, iphase,
     $                   iconv, eps, tol2, small2 )
      integer            iconv, iphase, kend, n, off
      double precision   eps, sigma, small2, sup, tol2
      double precision   e( * ), ee( * ), q( * ), qq( * )
      end

      interface to 
     $subroutine dlasq4( n, q, e, tau, sup )
      integer            n
      double precision   sup, tau
      double precision   e( * ), q( * )
      end

      interface to 
     $subroutine dlasrt( id, n, d, info )
      character          id
      integer            info, n
      double precision   d( * )
      end

      interface to 
     $subroutine dlasyf( uplo, n, nb, kb, a, lda, ipiv, w, ldw, info )
      character          uplo
      integer            info, kb, lda, ldw, n, nb
      integer            ipiv( * )
      double precision   a( lda, * ), w( ldw, * )
      end

      interface to 
     $subroutine dlatzm( side, m, n, v, incv, tau, c1, c2, ldc, work )
      character          side
      integer            incv, ldc, m, n
      double precision   tau
      double precision   c1( ldc, * ), c2( ldc, * ), v( * ), work( * )
      end

      interface to 
     $subroutine dopgtr( uplo, n, ap, tau, q, ldq, work, info )
      character          uplo
      integer            info, ldq, n
      double precision   ap( * ), q( ldq, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine dopmtr( side, uplo, trans, m, n, ap, tau, c, ldc, work,
     $                   info )
      character          side, trans, uplo
      integer            info, ldc, m, n
      double precision   ap( * ), c( ldc, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine dorg2l( m, n, k, a, lda, tau, work, info )
      integer            info, k, lda, m, n
      double precision   a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine dorg2r( m, n, k, a, lda, tau, work, info )
      integer            info, k, lda, m, n
      double precision   a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine dorgbr( vect, m, n, k, a, lda, tau, work, lwork, info )
      character          vect
      integer            info, k, lda, lwork, m, n
      double precision   a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine dorghr( n, ilo, ihi, a, lda, tau, work, lwork, info )
      integer            ihi, ilo, info, lda, lwork, n
      double precision   a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine dorgl2( m, n, k, a, lda, tau, work, info )
      integer            info, k, lda, m, n
      double precision   a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine dorglq( m, n, k, a, lda, tau, work, lwork, info )
      integer            info, k, lda, lwork, m, n
      double precision   a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine dorgql( m, n, k, a, lda, tau, work, lwork, info )
      integer            info, k, lda, lwork, m, n
      double precision   a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine dorgqr( m, n, k, a, lda, tau, work, lwork, info )
      integer            info, k, lda, lwork, m, n
      double precision   a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine dorgr2( m, n, k, a, lda, tau, work, info )
      integer            info, k, lda, m, n
      double precision   a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine dorgrq( m, n, k, a, lda, tau, work, lwork, info )
      integer            info, k, lda, lwork, m, n
      double precision   a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine dorgtr( uplo, n, a, lda, tau, work, lwork, info )
      character          uplo
      integer            info, lda, lwork, n
      double precision   a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine dorm2l( side, trans, m, n, k, a, lda, tau, c, ldc,
     $                   work, info )
      character          side, trans
      integer            info, k, lda, ldc, m, n
      double precision   a( lda, * ), c( ldc, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine dorm2r( side, trans, m, n, k, a, lda, tau, c, ldc,
     $                   work, info )
      character          side, trans
      integer            info, k, lda, ldc, m, n
      double precision   a( lda, * ), c( ldc, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine dormbr( vect, side, trans, m, n, k, a, lda, tau, c,
     $                   ldc, work, lwork, info )
      character          side, trans, vect
      integer            info, k, lda, ldc, lwork, m, n
      double precision   a( lda, * ), c( ldc, * ), tau( * ),
     $                   work( lwork )
      end

      interface to 
     $subroutine dormhr( side, trans, m, n, ilo, ihi, a, lda, tau, c,
     $                   ldc, work, lwork, info )
      character          side, trans
      integer            ihi, ilo, info, lda, ldc, lwork, m, n
      double precision   a( lda, * ), c( ldc, * ), tau( * ),
     $                   work( lwork )
      end

      interface to 
     $subroutine dorml2( side, trans, m, n, k, a, lda, tau, c, ldc,
     $                   work, info )
      character          side, trans
      integer            info, k, lda, ldc, m, n
      double precision   a( lda, * ), c( ldc, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine dormlq( side, trans, m, n, k, a, lda, tau, c, ldc,
     $                   work, lwork, info )
      character          side, trans
      integer            info, k, lda, ldc, lwork, m, n
      double precision   a( lda, * ), c( ldc, * ), tau( * ),
     $                   work( lwork )
      end

      interface to 
     $subroutine dormql( side, trans, m, n, k, a, lda, tau, c, ldc,
     $                   work, lwork, info )
      character          side, trans
      integer            info, k, lda, ldc, lwork, m, n
      double precision   a( lda, * ), c( ldc, * ), tau( * ),
     $                   work( lwork )
      end

      interface to 
     $subroutine dormqr( side, trans, m, n, k, a, lda, tau, c, ldc,
     $                   work, lwork, info )
      character          side, trans
      integer            info, k, lda, ldc, lwork, m, n
      double precision   a( lda, * ), c( ldc, * ), tau( * ),
     $                   work( lwork )
      end

      interface to 
     $subroutine dormr2( side, trans, m, n, k, a, lda, tau, c, ldc,
     $                   work, info )
      character          side, trans
      integer            info, k, lda, ldc, m, n
      double precision   a( lda, * ), c( ldc, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine dormrq( side, trans, m, n, k, a, lda, tau, c, ldc,
     $                   work, lwork, info )
      character          side, trans
      integer            info, k, lda, ldc, lwork, m, n
      double precision   a( lda, * ), c( ldc, * ), tau( * ),
     $                   work( lwork )
      end

      interface to 
     $subroutine dormtr( side, uplo, trans, m, n, a, lda, tau, c, ldc,
     $                   work, lwork, info )
      character          side, trans, uplo
      integer            info, lda, ldc, lwork, m, n
      double precision   a( lda, * ), c( ldc, * ), tau( * ),
     $                   work( lwork )
      end

      interface to 
     $subroutine dpbcon( uplo, n, kd, ab, ldab, anorm, rcond, work,
     $                   iwork, info )
      character          uplo
      integer            info, kd, ldab, n
      double precision   anorm, rcond
      integer            iwork( * )
      double precision   ab( ldab, * ), work( * )
      end

      interface to 
     $subroutine dpbequ( uplo, n, kd, ab, ldab, s, scond, amax, info )
      character          uplo
      integer            info, kd, ldab, n
      double precision   amax, scond
      double precision   ab( ldab, * ), s( * )
      end

      interface to 
     $subroutine dpbrfs( uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b,
     $                   ldb, x, ldx, ferr, berr, work, iwork, info )
      character          uplo
      integer            info, kd, ldab, ldafb, ldb, ldx, n, nrhs
      integer            iwork( * )
      double precision   ab( ldab, * ), afb( ldafb, * ), b( ldb, * ),
     $                   berr( * ), ferr( * ), work( * ), x( ldx, * )
      end

      interface to 
     $subroutine dpbstf( uplo, n, kd, ab, ldab, info )
      character          uplo
      integer            info, kd, ldab, n
      double precision   ab( ldab, * )
      end

      interface to 
     $subroutine dpbsv( uplo, n, kd, nrhs, ab, ldab, b, ldb, info )
      character          uplo
      integer            info, kd, ldab, ldb, n, nrhs
      double precision   ab( ldab, * ), b( ldb, * )
      end

      interface to 
     $subroutine dpbsvx( fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb,
     $                   equed, s, b, ldb, x, ldx, rcond, ferr, berr,
     $                   work, iwork, info )
      character          equed, fact, uplo
      integer            info, kd, ldab, ldafb, ldb, ldx, n, nrhs
      double precision   rcond
      integer            iwork( * )
      double precision   ab( ldab, * ), afb( ldafb, * ), b( ldb, * ),
     $                   berr( * ), ferr( * ), s( * ), work( * ),
     $                   x( ldx, * )
      end

      interface to 
     $subroutine dpbtf2( uplo, n, kd, ab, ldab, info )
      character          uplo
      integer            info, kd, ldab, n
      double precision   ab( ldab, * )
      end

      interface to 
     $subroutine dpbtrf( uplo, n, kd, ab, ldab, info )
      character          uplo
      integer            info, kd, ldab, n
      double precision   ab( ldab, * )
      end

      interface to 
     $subroutine dpbtrs( uplo, n, kd, nrhs, ab, ldab, b, ldb, info )
      character          uplo
      integer            info, kd, ldab, ldb, n, nrhs
      double precision   ab( ldab, * ), b( ldb, * )
      end

      interface to 
     $subroutine dpocon( uplo, n, a, lda, anorm, rcond, work, iwork,
     $                   info )
      character          uplo
      integer            info, lda, n
      double precision   anorm, rcond
      integer            iwork( * )
      double precision   a( lda, * ), work( * )
      end

      interface to 
     $subroutine dpoequ( n, a, lda, s, scond, amax, info )
      integer            info, lda, n
      double precision   amax, scond
      double precision   a( lda, * ), s( * )
      end

      interface to 
     $subroutine dporfs( uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x,
     $                   ldx, ferr, berr, work, iwork, info )
      character          uplo
      integer            info, lda, ldaf, ldb, ldx, n, nrhs
      integer            iwork( * )
      double precision   a( lda, * ), af( ldaf, * ), b( ldb, * ),
     $                   berr( * ), ferr( * ), work( * ), x( ldx, * )
      end

      interface to 
     $subroutine dposv( uplo, n, nrhs, a, lda, b, ldb, info )
      character          uplo
      integer            info, lda, ldb, n, nrhs
      double precision   a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine dposvx( fact, uplo, n, nrhs, a, lda, af, ldaf, equed,
     $                   s, b, ldb, x, ldx, rcond, ferr, berr, work,
     $                   iwork, info )
      character          equed, fact, uplo
      integer            info, lda, ldaf, ldb, ldx, n, nrhs
      double precision   rcond
      integer            iwork( * )
      double precision   a( lda, * ), af( ldaf, * ), b( ldb, * ),
     $                   berr( * ), ferr( * ), s( * ), work( * ),
     $                   x( ldx, * )
      end

      interface to 
     $subroutine dpotf2( uplo, n, a, lda, info )
      character          uplo
      integer            info, lda, n
      double precision   a( lda, * )
      end

      interface to 
     $subroutine dpotrf( uplo, n, a, lda, info )
      character          uplo
      integer            info, lda, n
      double precision   a( lda, * )
      end

      interface to 
     $subroutine dpotri( uplo, n, a, lda, info )
      character          uplo
      integer            info, lda, n
      double precision   a( lda, * )
      end

      interface to 
     $subroutine dpotrs( uplo, n, nrhs, a, lda, b, ldb, info )
      character          uplo
      integer            info, lda, ldb, n, nrhs
      double precision   a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine dppcon( uplo, n, ap, anorm, rcond, work, iwork, info )
      character          uplo
      integer            info, n
      double precision   anorm, rcond
      integer            iwork( * )
      double precision   ap( * ), work( * )
      end

      interface to 
     $subroutine dppequ( uplo, n, ap, s, scond, amax, info )
      character          uplo
      integer            info, n
      double precision   amax, scond
      double precision   ap( * ), s( * )
      end

      interface to 
     $subroutine dpprfs( uplo, n, nrhs, ap, afp, b, ldb, x, ldx, ferr,
     $                   berr, work, iwork, info )
      character          uplo
      integer            info, ldb, ldx, n, nrhs
      integer            iwork( * )
      double precision   afp( * ), ap( * ), b( ldb, * ), berr( * ),
     $                   ferr( * ), work( * ), x( ldx, * )
      end

      interface to 
     $subroutine dppsv( uplo, n, nrhs, ap, b, ldb, info )
      character          uplo
      integer            info, ldb, n, nrhs
      double precision   ap( * ), b( ldb, * )
      end

      interface to 
     $subroutine dppsvx( fact, uplo, n, nrhs, ap, afp, equed, s, b, ldb,
     $                   x, ldx, rcond, ferr, berr, work, iwork, info )
      character          equed, fact, uplo
      integer            info, ldb, ldx, n, nrhs
      double precision   rcond
      integer            iwork( * )
      double precision   afp( * ), ap( * ), b( ldb, * ), berr( * ),
     $                   ferr( * ), s( * ), work( * ), x( ldx, * )
      end

      interface to 
     $subroutine dpptrf( uplo, n, ap, info )
      character          uplo
      integer            info, n
      double precision   ap( * )
      end

      interface to 
     $subroutine dpptri( uplo, n, ap, info )
      character          uplo
      integer            info, n
      double precision   ap( * )
      end

      interface to 
     $subroutine dpptrs( uplo, n, nrhs, ap, b, ldb, info )
      character          uplo
      integer            info, ldb, n, nrhs
      double precision   ap( * ), b( ldb, * )
      end

      interface to 
     $subroutine dptcon( n, d, e, anorm, rcond, work, info )
      integer            info, n
      double precision   anorm, rcond
      double precision   d( * ), e( * ), work( * )
      end

      interface to 
     $subroutine dpteqr( compz, n, d, e, z, ldz, work, info )
      character          compz
      integer            info, ldz, n
      double precision   d( * ), e( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine dptrfs( n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr,
     $                   berr, work, info )
      integer            info, ldb, ldx, n, nrhs
      double precision   b( ldb, * ), berr( * ), d( * ), df( * ),
     $                   e( * ), ef( * ), ferr( * ), work( * ),
     $                   x( ldx, * )
      end

      interface to 
     $subroutine dptsv( n, nrhs, d, e, b, ldb, info )
      integer            info, ldb, n, nrhs
      double precision   b( ldb, * ), d( * ), e( * )
      end

      interface to 
     $subroutine dptsvx( fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx,
     $                   rcond, ferr, berr, work, info )
      character          fact
      integer            info, ldb, ldx, n, nrhs
      double precision   rcond
      double precision   b( ldb, * ), berr( * ), d( * ), df( * ),
     $                   e( * ), ef( * ), ferr( * ), work( * ),
     $                   x( ldx, * )
      end

      interface to 
     $subroutine dpttrf( n, d, e, info )
      integer            info, n
      double precision   d( * ), e( * )
      end

      interface to 
     $subroutine dpttrs( n, nrhs, d, e, b, ldb, info )
      integer            info, ldb, n, nrhs
      double precision   b( ldb, * ), d( * ), e( * )
      end

      interface to 
     $subroutine dsbev( jobz, uplo, n, kd, ab, ldab, w, z, ldz, work,
     $                  info )
      character          jobz, uplo
      integer            info, kd, ldab, ldz, n
      double precision   ab( ldab, * ), w( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine dsbevd( jobz, uplo, n, kd, ab, ldab, w, z, ldz, work,
     $                   lwork, iwork, liwork, info )
      character          jobz, uplo
      integer            info, kd, ldab, ldz, liwork, lwork, n
      integer            iwork( * )
      double precision   ab( ldab, * ), w( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine dsbevx( jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl,
     $                   vu, il, iu, abstol, m, w, z, ldz, work, iwork,
     $                   ifail, info )
      character          jobz, range, uplo
      integer            il, info, iu, kd, ldab, ldq, ldz, m, n
      double precision   abstol, vl, vu
      integer            ifail( * ), iwork( * )
      double precision   ab( ldab, * ), q( ldq, * ), w( * ), work( * ),
     $                   z( ldz, * )
      end

      interface to 
     $subroutine dsbgst( vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x,
     $                   ldx, work, info )
      character          uplo, vect
      integer            info, ka, kb, ldab, ldbb, ldx, n
      double precision   ab( ldab, * ), bb( ldbb, * ), work( * ),
     $                   x( ldx, * )
      end

      interface to 
     $subroutine dsbgv( jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z,
     $                  ldz, work, info )
      character          jobz, uplo
      integer            info, ka, kb, ldab, ldbb, ldz, n
      double precision   ab( ldab, * ), bb( ldbb, * ), w( * ),
     $                   work( * ), z( ldz, * )
      end

      interface to 
     $subroutine dsbtrd( vect, uplo, n, kd, ab, ldab, d, e, q, ldq,
     $                   work, info )
      character          uplo, vect
      integer            info, kd, ldab, ldq, n
      double precision   ab( ldab, * ), d( * ), e( * ), q( ldq, * ),
     $                   work( * )
      end

      interface to 
     $subroutine dspcon( uplo, n, ap, ipiv, anorm, rcond, work, iwork,
     $                   info )
      character          uplo
      integer            info, n
      double precision   anorm, rcond
      integer            ipiv( * ), iwork( * )
      double precision   ap( * ), work( * )
      end

      interface to 
     $subroutine dspev( jobz, uplo, n, ap, w, z, ldz, work, info )
      character          jobz, uplo
      integer            info, ldz, n
      double precision   ap( * ), w( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine dspevd( jobz, uplo, n, ap, w, z, ldz, work, lwork,
     $                   iwork, liwork, info )
      character          jobz, uplo
      integer            info, ldz, liwork, lwork, n
      integer            iwork( * )
      double precision   ap( * ), w( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine dspevx( jobz, range, uplo, n, ap, vl, vu, il, iu,
     $                   abstol, m, w, z, ldz, work, iwork, ifail,
     $                   info )
      character          jobz, range, uplo
      integer            il, info, iu, ldz, m, n
      double precision   abstol, vl, vu
      integer            ifail( * ), iwork( * )
      double precision   ap( * ), w( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine dspgst( itype, uplo, n, ap, bp, info )
      character          uplo
      integer            info, itype, n
      double precision   ap( * ), bp( * )
      end

      interface to 
     $subroutine dspgv( itype, jobz, uplo, n, ap, bp, w, z, ldz, work,
     $                  info )
      character          jobz, uplo
      integer            info, itype, ldz, n
      double precision   ap( * ), bp( * ), w( * ), work( * ),
     $                   z( ldz, * )
      end

      interface to 
     $subroutine dsprfs( uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx,
     $                   ferr, berr, work, iwork, info )
      character          uplo
      integer            info, ldb, ldx, n, nrhs
      integer            ipiv( * ), iwork( * )
      double precision   afp( * ), ap( * ), b( ldb, * ), berr( * ),
     $                   ferr( * ), work( * ), x( ldx, * )
      end

      interface to 
     $subroutine dspsv( uplo, n, nrhs, ap, ipiv, b, ldb, info )
      character          uplo
      integer            info, ldb, n, nrhs
      integer            ipiv( * )
      double precision   ap( * ), b( ldb, * )
      end

      interface to 
     $subroutine dspsvx( fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x,
     $                   ldx, rcond, ferr, berr, work, iwork, info )
      character          fact, uplo
      integer            info, ldb, ldx, n, nrhs
      double precision   rcond
      integer            ipiv( * ), iwork( * )
      double precision   afp( * ), ap( * ), b( ldb, * ), berr( * ),
     $                   ferr( * ), work( * ), x( ldx, * )
      end

      interface to 
     $subroutine dsptrd( uplo, n, ap, d, e, tau, info )
      character          uplo
      integer            info, n
      double precision   ap( * ), d( * ), e( * ), tau( * )
      end

      interface to 
     $subroutine dsptrf( uplo, n, ap, ipiv, info )
      character          uplo
      integer            info, n
      integer            ipiv( * )
      double precision   ap( * )
      end

      interface to 
     $subroutine dsptri( uplo, n, ap, ipiv, work, info )
      character          uplo
      integer            info, n
      integer            ipiv( * )
      double precision   ap( * ), work( * )
      end

      interface to 
     $subroutine dsptrs( uplo, n, nrhs, ap, ipiv, b, ldb, info )
      character          uplo
      integer            info, ldb, n, nrhs
      integer            ipiv( * )
      double precision   ap( * ), b( ldb, * )
      end

      interface to 
     $subroutine dstebz( range, order, n, vl, vu, il, iu, abstol, d, e,
     $                   m, nsplit, w, iblock, isplit, work, iwork,
     $                   info )
      character          order, range
      integer            il, info, iu, m, n, nsplit
      double precision   abstol, vl, vu
      integer            iblock( * ), isplit( * ), iwork( * )
      double precision   d( * ), e( * ), w( * ), work( * )
      end

      interface to 
     $subroutine dstedc( compz, n, d, e, z, ldz, work, lwork, iwork,
     $                   liwork, info )
      character          compz
      integer            info, ldz, liwork, lwork, n
      integer            iwork( * )
      double precision   d( * ), e( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine dstein( n, d, e, m, w, iblock, isplit, z, ldz, work,
     $                   iwork, ifail, info )
      integer            info, ldz, m, n
      integer            iblock( * ), ifail( * ), isplit( * ),
     $                   iwork( * )
      double precision   d( * ), e( * ), w( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine dsteqr( compz, n, d, e, z, ldz, work, info )
      character          compz
      integer            info, ldz, n
      double precision   d( * ), e( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine dsterf( n, d, e, info )
      integer            info, n
      double precision   d( * ), e( * )
      end

      interface to 
     $subroutine dstev( jobz, n, d, e, z, ldz, work, info )
      character          jobz
      integer            info, ldz, n
      double precision   d( * ), e( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine dstevd( jobz, n, d, e, z, ldz, work, lwork, iwork,
     $                   liwork, info )
      character          jobz
      integer            info, ldz, liwork, lwork, n
      integer            iwork( * )
      double precision   d( * ), e( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine dstevx( jobz, range, n, d, e, vl, vu, il, iu, abstol,
     $                   m, w, z, ldz, work, iwork, ifail, info )
      character          jobz, range
      integer            il, info, iu, ldz, m, n
      double precision   abstol, vl, vu
      integer            ifail( * ), iwork( * )
      double precision   d( * ), e( * ), w( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine dsycon( uplo, n, a, lda, ipiv, anorm, rcond, work,
     $                   iwork, info )
      character          uplo
      integer            info, lda, n
      double precision   anorm, rcond
      integer            ipiv( * ), iwork( * )
      double precision   a( lda, * ), work( * )
      end

      interface to 
     $subroutine dsyev( jobz, uplo, n, a, lda, w, work, lwork, info )
      character          jobz, uplo
      integer            info, lda, lwork, n
      double precision   a( lda, * ), w( * ), work( * )
      end

      interface to 
     $subroutine dsyevd( jobz, uplo, n, a, lda, w, work, lwork, iwork,
     $                   liwork, info )
      character          jobz, uplo
      integer            info, lda, liwork, lwork, n
      integer            iwork( * )
      double precision   a( lda, * ), w( * ), work( * )
      end

      interface to 
     $subroutine dsyevx( jobz, range, uplo, n, a, lda, vl, vu, il, iu,
     $                   abstol, m, w, z, ldz, work, lwork, iwork,
     $                   ifail, info )
      character          jobz, range, uplo
      integer            il, info, iu, lda, ldz, lwork, m, n
      double precision   abstol, vl, vu
      integer            ifail( * ), iwork( * )
      double precision   a( lda, * ), w( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine dsygs2( itype, uplo, n, a, lda, b, ldb, info )
      character          uplo
      integer            info, itype, lda, ldb, n
      double precision   a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine dsygst( itype, uplo, n, a, lda, b, ldb, info )
      character          uplo
      integer            info, itype, lda, ldb, n
      double precision   a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine dsygv( itype, jobz, uplo, n, a, lda, b, ldb, w, work,
     $                  lwork, info )
      character          jobz, uplo
      integer            info, itype, lda, ldb, lwork, n
      double precision   a( lda, * ), b( ldb, * ), w( * ), work( * )
      end

      interface to 
     $subroutine dsyrfs( uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb,
     $                   x, ldx, ferr, berr, work, iwork, info )
      character          uplo
      integer            info, lda, ldaf, ldb, ldx, n, nrhs
      integer            ipiv( * ), iwork( * )
      double precision   a( lda, * ), af( ldaf, * ), b( ldb, * ),
     $                   berr( * ), ferr( * ), work( * ), x( ldx, * )
      end

      interface to 
     $subroutine dsysv( uplo, n, nrhs, a, lda, ipiv, b, ldb, work,
     $                  lwork, info )
      character          uplo
      integer            info, lda, ldb, lwork, n, nrhs
      integer            ipiv( * )
      double precision   a( lda, * ), b( ldb, * ), work( lwork )
      end

      interface to 
     $subroutine dsysvx( fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b,
     $                   ldb, x, ldx, rcond, ferr, berr, work, lwork,
     $                   iwork, info )
      character          fact, uplo
      integer            info, lda, ldaf, ldb, ldx, lwork, n, nrhs
      double precision   rcond
      integer            ipiv( * ), iwork( * )
      double precision   a( lda, * ), af( ldaf, * ), b( ldb, * ),
     $                   berr( * ), ferr( * ), work( * ), x( ldx, * )
      end

      interface to 
     $subroutine dsytd2( uplo, n, a, lda, d, e, tau, info )
      character          uplo
      integer            info, lda, n
      double precision   a( lda, * ), d( * ), e( * ), tau( * )
      end

      interface to 
     $subroutine dsytf2( uplo, n, a, lda, ipiv, info )
      character          uplo
      integer            info, lda, n
      integer            ipiv( * )
      double precision   a( lda, * )
      end

      interface to 
     $subroutine dsytrd( uplo, n, a, lda, d, e, tau, work, lwork, info )
      character          uplo
      integer            info, lda, lwork, n
      double precision   a( lda, * ), d( * ), e( * ), tau( * ),
     $                   work( * )
      end

      interface to 
     $subroutine dsytrf( uplo, n, a, lda, ipiv, work, lwork, info )
      character          uplo
      integer            info, lda, lwork, n
      integer            ipiv( * )
      double precision   a( lda, * ), work( lwork )
      end

      interface to 
     $subroutine dsytri( uplo, n, a, lda, ipiv, work, info )
      character          uplo
      integer            info, lda, n
      integer            ipiv( * )
      double precision   a( lda, * ), work( * )
      end

      interface to 
     $subroutine dsytrs( uplo, n, nrhs, a, lda, ipiv, b, ldb, info )
      character          uplo
      integer            info, lda, ldb, n, nrhs
      integer            ipiv( * )
      double precision   a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine dtbcon( norm, uplo, diag, n, kd, ab, ldab, rcond, work,
     $                   iwork, info )
      character          diag, norm, uplo
      integer            info, kd, ldab, n
      double precision   rcond
      integer            iwork( * )
      double precision   ab( ldab, * ), work( * )
      end

      interface to 
     $subroutine dtbrfs( uplo, trans, diag, n, kd, nrhs, ab, ldab, b,
     $                   ldb, x, ldx, ferr, berr, work, iwork, info )
      character          diag, trans, uplo
      integer            info, kd, ldab, ldb, ldx, n, nrhs
      integer            iwork( * )
      double precision   ab( ldab, * ), b( ldb, * ), berr( * ),
     $                   ferr( * ), work( * ), x( ldx, * )
      end

      interface to 
     $subroutine dtbtrs( uplo, trans, diag, n, kd, nrhs, ab, ldab, b,
     $                   ldb, info )
      character          diag, trans, uplo
      integer            info, kd, ldab, ldb, n, nrhs
      double precision   ab( ldab, * ), b( ldb, * )
      end

      interface to 
     $subroutine dtgevc( side, howmny, select, n, a, lda, b, ldb, vl,
     $                   ldvl, vr, ldvr, mm, m, work, info )
      character          howmny, side
      integer            info, lda, ldb, ldvl, ldvr, m, mm, n
      logical            select( * )
      double precision   a( lda, * ), b( ldb, * ), vl( ldvl, * ),
     $                   vr( ldvr, * ), work( * )
      end

      interface to 
     $subroutine dtgsja( jobu, jobv, jobq, m, p, n, k, l, a, lda, b,
     $                   ldb, tola, tolb, alpha, beta, u, ldu, v, ldv,
     $                   q, ldq, work, ncycle, info )
      character          jobq, jobu, jobv
      integer            info, k, l, lda, ldb, ldq, ldu, ldv, m, n,
     $                   ncycle, p
      double precision   tola, tolb
      double precision   a( lda, * ), alpha( * ), b( ldb, * ),
     $                   beta( * ), q( ldq, * ), u( ldu, * ),
     $                   v( ldv, * ), work( * )
      end

      interface to 
     $subroutine dtpcon( norm, uplo, diag, n, ap, rcond, work, iwork,
     $                   info )
      character          diag, norm, uplo
      integer            info, n
      double precision   rcond
      integer            iwork( * )
      double precision   ap( * ), work( * )
      end

      interface to 
     $subroutine dtprfs( uplo, trans, diag, n, nrhs, ap, b, ldb, x, ldx,
     $                   ferr, berr, work, iwork, info )
      character          diag, trans, uplo
      integer            info, ldb, ldx, n, nrhs
      integer            iwork( * )
      double precision   ap( * ), b( ldb, * ), berr( * ), ferr( * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine dtptri( uplo, diag, n, ap, info )
      character          diag, uplo
      integer            info, n
      double precision   ap( * )
      end

      interface to 
     $subroutine dtptrs( uplo, trans, diag, n, nrhs, ap, b, ldb, info )
      character          diag, trans, uplo
      integer            info, ldb, n, nrhs
      double precision   ap( * ), b( ldb, * )
      end

      interface to 
     $subroutine dtrcon( norm, uplo, diag, n, a, lda, rcond, work,
     $                   iwork, info )
      character          diag, norm, uplo
      integer            info, lda, n
      double precision   rcond
      integer            iwork( * )
      double precision   a( lda, * ), work( * )
      end

      interface to 
     $subroutine dtrevc( side, howmny, select, n, t, ldt, vl, ldvl, vr,
     $                   ldvr, mm, m, work, info )
      character          howmny, side
      integer            info, ldt, ldvl, ldvr, m, mm, n
      logical            select( * )
      double precision   t( ldt, * ), vl( ldvl, * ), vr( ldvr, * ),
     $                   work( * )
      end

      interface to 
     $subroutine dtrexc( compq, n, t, ldt, q, ldq, ifst, ilst, work,
     $                   info )
      character          compq
      integer            ifst, ilst, info, ldq, ldt, n
      double precision   q( ldq, * ), t( ldt, * ), work( * )
      end

      interface to 
     $subroutine dtrrfs( uplo, trans, diag, n, nrhs, a, lda, b, ldb, x,
     $                   ldx, ferr, berr, work, iwork, info )
      character          diag, trans, uplo
      integer            info, lda, ldb, ldx, n, nrhs
      integer            iwork( * )
      double precision   a( lda, * ), b( ldb, * ), berr( * ), ferr( * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine dtrsen( job, compq, select, n, t, ldt, q, ldq, wr, wi,
     $                   m, s, sep, work, lwork, iwork, liwork, info )
      character          compq, job
      integer            info, ldq, ldt, liwork, lwork, m, n
      double precision   s, sep
      logical            select( * )
      integer            iwork( * )
      double precision   q( ldq, * ), t( ldt, * ), wi( * ), work( * ),
     $                   wr( * )
      end

      interface to 
     $subroutine dtrsna( job, howmny, select, n, t, ldt, vl, ldvl, vr,
     $                   ldvr, s, sep, mm, m, work, ldwork, iwork,
     $                   info )
      character          howmny, job
      integer            info, ldt, ldvl, ldvr, ldwork, m, mm, n
      logical            select( * )
      integer            iwork( * )
      double precision   s( * ), sep( * ), t( ldt, * ), vl( ldvl, * ),
     $                   vr( ldvr, * ), work( ldwork, * )
      end

      interface to 
     $subroutine dtrsyl( trana, tranb, isgn, m, n, a, lda, b, ldb, c,
     $                   ldc, scale, info )
      character          trana, tranb
      integer            info, isgn, lda, ldb, ldc, m, n
      double precision   scale
      double precision   a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to 
     $subroutine dtrti2( uplo, diag, n, a, lda, info )
      character          diag, uplo
      integer            info, lda, n
      double precision   a( lda, * )
      end

      interface to 
     $subroutine dtrtri( uplo, diag, n, a, lda, info )
      character          diag, uplo
      integer            info, lda, n
      double precision   a( lda, * )
      end

      interface to 
     $subroutine dtrtrs( uplo, trans, diag, n, nrhs, a, lda, b, ldb,
     $                   info )
      character          diag, trans, uplo
      integer            info, lda, ldb, n, nrhs
      double precision   a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine dtzrqf( m, n, a, lda, tau, info )
      integer            info, lda, m, n
      double precision   a( lda, * ), tau( * )
      end

      interface to 
     $subroutine zbdsqr( uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u,
     $                   ldu, c, ldc, rwork, info )
      character          uplo
      integer            info, ldc, ldu, ldvt, n, ncc, ncvt, nru
      double precision   d( * ), e( * ), rwork( * )
      complex*16         c( ldc, * ), u( ldu, * ), vt( ldvt, * )
      end

      interface to 
     $subroutine zgbbrd( vect, m, n, ncc, kl, ku, ab, ldab, d, e, q,
     $                   ldq, pt, ldpt, c, ldc, work, rwork, info )
      character          vect
      integer            info, kl, ku, ldab, ldc, ldpt, ldq, m, n, ncc
      double precision   d( * ), e( * ), rwork( * )
      complex*16         ab( ldab, * ), c( ldc, * ), pt( ldpt, * ),
     $                   q( ldq, * ), work( * )
      end

      interface to 
     $subroutine zgbcon( norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond,
     $                   work, rwork, info )
      character          norm
      integer            info, kl, ku, ldab, n
      double precision   anorm, rcond
      integer            ipiv( * )
      double precision   rwork( * )
      complex*16         ab( ldab, * ), work( * )
      end

      interface to 
     $subroutine zgbequ( m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd,
     $                   amax, info )
      integer            info, kl, ku, ldab, m, n
      double precision   amax, colcnd, rowcnd
      double precision   c( * ), r( * )
      complex*16         ab( ldab, * )
      end

      interface to 
     $subroutine zgbrfs( trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb,
     $                   ipiv, b, ldb, x, ldx, ferr, berr, work, rwork,
     $                   info )
      character          trans
      integer            info, kl, ku, ldab, ldafb, ldb, ldx, n, nrhs
      integer            ipiv( * )
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         ab( ldab, * ), afb( ldafb, * ), b( ldb, * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine zgbsv( n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info )
      integer            info, kl, ku, ldab, ldb, n, nrhs
      integer            ipiv( * )
      complex*16         ab( ldab, * ), b( ldb, * )
      end

      interface to 
     $subroutine zgbsvx( fact, trans, n, kl, ku, nrhs, ab, ldab, afb,
     $                   ldafb, ipiv, equed, r, c, b, ldb, x, ldx,
     $                   rcond, ferr, berr, work, rwork, info )
      character          equed, fact, trans
      integer            info, kl, ku, ldab, ldafb, ldb, ldx, n, nrhs
      double precision   rcond
      integer            ipiv( * )
      double precision   berr( * ), c( * ), ferr( * ), r( * ),
     $                   rwork( * )
      complex*16         ab( ldab, * ), afb( ldafb, * ), b( ldb, * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine zgbtf2( m, n, kl, ku, ab, ldab, ipiv, info )
      integer            info, kl, ku, ldab, m, n
      integer            ipiv( * )
      complex*16         ab( ldab, * )
      end

      interface to 
     $subroutine zgbtrf( m, n, kl, ku, ab, ldab, ipiv, info )
      integer            info, kl, ku, ldab, m, n
      integer            ipiv( * )
      complex*16         ab( ldab, * )
      end

      interface to 
     $subroutine zgbtrs( trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb,
     $                   info )
      character          trans
      integer            info, kl, ku, ldab, ldb, n, nrhs
      integer            ipiv( * )
      complex*16         ab( ldab, * ), b( ldb, * )
      end

      interface to 
     $subroutine zgebak( job, side, n, ilo, ihi, scale, m, v, ldv,
     $                   info )
      character          job, side
      integer            ihi, ilo, info, ldv, m, n
      double precision   scale( * )
      complex*16         v( ldv, * )
      end

      interface to 
     $subroutine zgebal( job, n, a, lda, ilo, ihi, scale, info )
      character          job
      integer            ihi, ilo, info, lda, n
      double precision   scale( * )
      complex*16         a( lda, * )
      end

      interface to 
     $subroutine zgebd2( m, n, a, lda, d, e, tauq, taup, work, info )
      integer            info, lda, m, n
      double precision   d( * ), e( * )
      complex*16         a( lda, * ), taup( * ), tauq( * ), work( * )
      end

      interface to 
     $subroutine zgebrd( m, n, a, lda, d, e, tauq, taup, work, lwork,
     $                   info )
      integer            info, lda, lwork, m, n
      double precision   d( * ), e( * )
      complex*16         a( lda, * ), taup( * ), tauq( * ),
     $                   work( lwork )
      end

      interface to 
     $subroutine zgecon( norm, n, a, lda, anorm, rcond, work, rwork,
     $                   info )
      character          norm
      integer            info, lda, n
      double precision   anorm, rcond
      double precision   rwork( * )
      complex*16         a( lda, * ), work( * )
      end

      interface to 
     $subroutine zgeequ( m, n, a, lda, r, c, rowcnd, colcnd, amax,
     $                   info )
      integer            info, lda, m, n
      double precision   amax, colcnd, rowcnd
      double precision   c( * ), r( * )
      complex*16         a( lda, * )
      end

      interface to 
     $subroutine zgees( jobvs, sort, select, n, a, lda, sdim, w, vs,
     $                  ldvs, work, lwork, rwork, bwork, info )
      character          jobvs, sort
      integer            info, lda, ldvs, lwork, n, sdim
      logical            bwork( * )
      double precision   rwork( * )
      complex*16         a( lda, * ), vs( ldvs, * ), w( * ), work( * )
      logical            select
      external           select
      end

      interface to 
     $subroutine zgeesx( jobvs, sort, select, sense, n, a, lda, sdim, w,
     $                   vs, ldvs, rconde, rcondv, work, lwork, rwork,
     $                   bwork, info )
      character          jobvs, sense, sort
      integer            info, lda, ldvs, lwork, n, sdim
      double precision   rconde, rcondv
      logical            bwork( * )
      double precision   rwork( * )
      complex*16         a( lda, * ), vs( ldvs, * ), w( * ), work( * )
      logical            select
      external           select
      end

      interface to 
     $subroutine zgeev( jobvl, jobvr, n, a, lda, w, vl, ldvl, vr, ldvr,
     $                  work, lwork, rwork, info )
      character          jobvl, jobvr
      integer            info, lda, ldvl, ldvr, lwork, n
      double precision   rwork( * )
      complex*16         a( lda, * ), vl( ldvl, * ), vr( ldvr, * ),
     $                   w( * ), work( * )
      end

      interface to 
     $subroutine zgeevx( balanc, jobvl, jobvr, sense, n, a, lda, w, vl,
     $                   ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde,
     $                   rcondv, work, lwork, rwork, info )
      character          balanc, jobvl, jobvr, sense
      integer            ihi, ilo, info, lda, ldvl, ldvr, lwork, n
      double precision   abnrm
      double precision   rconde( * ), rcondv( * ), rwork( * ),
     $                   scale( * )
      complex*16         a( lda, * ), vl( ldvl, * ), vr( ldvr, * ),
     $                   w( * ), work( * )
      end

      interface to 
     $subroutine zgegs( jobvsl, jobvsr, n, a, lda, b, ldb, alpha, beta,
     $                  vsl, ldvsl, vsr, ldvsr, work, lwork, rwork,
     $                  info )
      character          jobvsl, jobvsr
      integer            info, lda, ldb, ldvsl, ldvsr, lwork, n
      double precision   rwork( * )
      complex*16         a( lda, * ), alpha( * ), b( ldb, * ),
     $                   beta( * ), vsl( ldvsl, * ), vsr( ldvsr, * ),
     $                   work( * )
      end

      interface to 
     $subroutine zgegv( jobvl, jobvr, n, a, lda, b, ldb, alpha, beta,
     $                  vl, ldvl, vr, ldvr, work, lwork, rwork, info )
      character          jobvl, jobvr
      integer            info, lda, ldb, ldvl, ldvr, lwork, n
      double precision   rwork( * )
      complex*16         a( lda, * ), alpha( * ), b( ldb, * ),
     $                   beta( * ), vl( ldvl, * ), vr( ldvr, * ),
     $                   work( * )
      end

      interface to 
     $subroutine zgehd2( n, ilo, ihi, a, lda, tau, work, info )
      integer            ihi, ilo, info, lda, n
      complex*16         a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine zgehrd( n, ilo, ihi, a, lda, tau, work, lwork, info )
      integer            ihi, ilo, info, lda, lwork, n
      complex*16         a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine zgelq2( m, n, a, lda, tau, work, info )
      integer            info, lda, m, n
      complex*16         a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine zgelqf( m, n, a, lda, tau, work, lwork, info )
      integer            info, lda, lwork, m, n
      complex*16         a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine zgels( trans, m, n, nrhs, a, lda, b, ldb, work, lwork,
     $                  info )
      character          trans
      integer            info, lda, ldb, lwork, m, n, nrhs
      complex*16         a( lda, * ), b( ldb, * ), work( lwork )
      end

      interface to 
     $subroutine zgelss( m, n, nrhs, a, lda, b, ldb, s, rcond, rank,
     $                   work, lwork, rwork, info )
      integer            info, lda, ldb, lwork, m, n, nrhs, rank
      double precision   rcond
      double precision   rwork( * ), s( * )
      complex*16         a( lda, * ), b( ldb, * ), work( * )
      end

      interface to 
     $subroutine zgelsd( m, n, nrhs, a, lda, b, ldb, s, rcond, rank,
     $                   work, lwork, rwork, iwork, info )
      integer            info,lda,ldb,lwork,m,n,nrhs,rank, iwork(*)
      double precision   rcond
      double precision   rwork( * ), s( * )
      complex*16         a( lda, * ), b( ldb, * ), work( * )
      end

      interface to 
     $subroutine zgelsx( m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank,
     $                   work, rwork, info )
      integer            info, lda, ldb, m, n, nrhs, rank
      double precision   rcond
      integer            jpvt( * )
      double precision   rwork( * )
      complex*16         a( lda, * ), b( ldb, * ), work( * )
      end

      interface to 
     $subroutine zgeql2( m, n, a, lda, tau, work, info )
      integer            info, lda, m, n
      complex*16         a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine zgeqlf( m, n, a, lda, tau, work, lwork, info )
      integer            info, lda, lwork, m, n
      complex*16         a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine zgeqr2( m, n, a, lda, tau, work, info )
      integer            info, lda, m, n
      complex*16         a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine zgeqrf( m, n, a, lda, tau, work, lwork, info )
      integer            info, lda, lwork, m, n
      complex*16         a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine zgerfs( trans, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb,
     $                   x, ldx, ferr, berr, work, rwork, info )
      character          trans
      integer            info, lda, ldaf, ldb, ldx, n, nrhs
      integer            ipiv( * )
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         a( lda, * ), af( ldaf, * ), b( ldb, * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine zgerq2( m, n, a, lda, tau, work, info )
      integer            info, lda, m, n
      complex*16         a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine zgerqf( m, n, a, lda, tau, work, lwork, info )
      integer            info, lda, lwork, m, n
      complex*16         a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine zgesv( n, nrhs, a, lda, ipiv, b, ldb, info )
      integer            info, lda, ldb, n, nrhs
      integer            ipiv( * )
      complex*16         a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine zgesvd( jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt,
     $                   work, lwork, rwork, info )
      character          jobu, jobvt
      integer            info, lda, ldu, ldvt, lwork, m, n
      double precision   rwork( * ), s( * )
      complex*16         a( lda, * ), u( ldu, * ), vt( ldvt, * ),
     $                   work( * )
      end

      interface to 
     $subroutine zgesvx( fact, trans, n, nrhs, a, lda, af, ldaf, ipiv,
     $                   equed, r, c, b, ldb, x, ldx, rcond, ferr, berr,
     $                   work, rwork, info )
      character          equed, fact, trans
      integer            info, lda, ldaf, ldb, ldx, n, nrhs
      double precision   rcond
      integer            ipiv( * )
      double precision   berr( * ), c( * ), ferr( * ), r( * ),
     $                   rwork( * )
      complex*16         a( lda, * ), af( ldaf, * ), b( ldb, * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine zgetf2( m, n, a, lda, ipiv, info )
      integer            info, lda, m, n
      integer            ipiv( * )
      complex*16         a( lda, * )
      end

      interface to 
     $subroutine zgetrf( m, n, a, lda, ipiv, info )
      integer            info, lda, m, n
      integer            ipiv( * )
      complex*16         a( lda, * )
      end

      interface to 
     $subroutine zgetri( n, a, lda, ipiv, work, lwork, info )
      integer            info, lda, lwork, n
      integer            ipiv( * )
      complex*16         a( lda, * ), work( lwork )
      end

      interface to 
     $subroutine zgetrs( trans, n, nrhs, a, lda, ipiv, b, ldb, info )
      character          trans
      integer            info, lda, ldb, n, nrhs
      integer            ipiv( * )
      complex*16         a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine zggbak( job, side, n, ilo, ihi, lscale, rscale, m, v,
     $                   ldv, info )
      character          job, side
      integer            ihi, ilo, info, ldv, m, n
      double precision   lscale( * ), rscale( * )
      complex*16         v( ldv, * )
      end

      interface to 
     $subroutine zggbal( job, n, a, lda, b, ldb, ilo, ihi, lscale,
     $                   rscale, work, info )
      character          job
      integer            ihi, ilo, info, lda, ldb, n
      double precision   lscale( * ), rscale( * ), work( * )
      complex*16         a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine zggglm( n, m, p, a, lda, b, ldb, d, x, y, work, lwork,
     $                   info )
      integer            info, lda, ldb, lwork, m, n, p
      complex*16         a( lda, * ), b( ldb, * ), d( * ), work( * ),
     $                   x( * ), y( * )
      end

      interface to 
     $subroutine zgghrd( compq, compz, n, ilo, ihi, a, lda, b, ldb, q,
     $                   ldq, z, ldz, info )
      character          compq, compz
      integer            ihi, ilo, info, lda, ldb, ldq, ldz, n
      complex*16         a( lda, * ), b( ldb, * ), q( ldq, * ),
     $                   z( ldz, * )
      end

      interface to 
     $subroutine zgglse( m, n, p, a, lda, b, ldb, c, d, x, work, lwork,
     $                   info )
      integer            info, lda, ldb, lwork, m, n, p
      complex*16         a( lda, * ), b( ldb, * ), c( * ), d( * ),
     $                   work( * ), x( * )
      end

      interface to 
     $subroutine zggqrf( n, m, p, a, lda, taua, b, ldb, taub, work,
     $                   lwork, info )
      integer            info, lda, ldb, lwork, m, n, p
      complex*16         a( lda, * ), b( ldb, * ), taua( * ), taub( * ),
     $                   work( * )
      end

      interface to 
     $subroutine zggrqf( m, p, n, a, lda, taua, b, ldb, taub, work,
     $                   lwork, info )
      integer            info, lda, ldb, lwork, m, n, p
      complex*16         a( lda, * ), b( ldb, * ), taua( * ), taub( * ),
     $                   work( * )
      end

      interface to 
     $subroutine zggsvd( jobu, jobv, jobq, m, n, p, k, l, a, lda, b,
     $                   ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work,
     $                   rwork, iwork, info )
      character          jobq, jobu, jobv
      integer            info, k, l, lda, ldb, ldq, ldu, ldv, m, n, p
      integer            iwork( * )
      double precision   alpha( * ), beta( * ), rwork( * )
      complex*16         a( lda, * ), b( ldb, * ), q( ldq, * ),
     $                   u( ldu, * ), v( ldv, * ), work( * )
      end

      interface to 
     $subroutine zggsvp( jobu, jobv, jobq, m, p, n, a, lda, b, ldb,
     $                   tola, tolb, k, l, u, ldu, v, ldv, q, ldq,
     $                   iwork, rwork, tau, work, info )
      character          jobq, jobu, jobv
      integer            info, k, l, lda, ldb, ldq, ldu, ldv, m, n, p
      double precision   tola, tolb
      integer            iwork( * )
      double precision   rwork( * )
      complex*16         a( lda, * ), b( ldb, * ), q( ldq, * ),
     $                   tau( * ), u( ldu, * ), v( ldv, * ), work( * )
      end

      interface to 
     $subroutine zgtcon( norm, n, dl, d, du, du2, ipiv, anorm, rcond,
     $                   work, info )
      character          norm
      integer            info, n
      double precision   anorm, rcond
      integer            ipiv( * )
      complex*16         d( * ), dl( * ), du( * ), du2( * ), work( * )
      end

      interface to 
     $subroutine zgtrfs( trans, n, nrhs, dl, d, du, dlf, df, duf, du2,
     $                   ipiv, b, ldb, x, ldx, ferr, berr, work, rwork,
     $                   info )
      character          trans
      integer            info, ldb, ldx, n, nrhs
      integer            ipiv( * )
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         b( ldb, * ), d( * ), df( * ), dl( * ),
     $                   dlf( * ), du( * ), du2( * ), duf( * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine zgtsv( n, nrhs, dl, d, du, b, ldb, info )
      integer            info, ldb, n, nrhs
      complex*16         b( ldb, * ), d( * ), dl( * ), du( * )
      end

      interface to 
     $subroutine zgtsvx( fact, trans, n, nrhs, dl, d, du, dlf, df, duf,
     $                   du2, ipiv, b, ldb, x, ldx, rcond, ferr, berr,
     $                   work, rwork, info )
      character          fact, trans
      integer            info, ldb, ldx, n, nrhs
      double precision   rcond
      integer            ipiv( * )
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         b( ldb, * ), d( * ), df( * ), dl( * ),
     $                   dlf( * ), du( * ), du2( * ), duf( * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine zgttrf( n, dl, d, du, du2, ipiv, info )
      integer            info, n
      integer            ipiv( * )
      complex*16         d( * ), dl( * ), du( * ), du2( * )
      end

      interface to 
     $subroutine zgttrs( trans, n, nrhs, dl, d, du, du2, ipiv, b, ldb,
     $                   info )
      character          trans
      integer            info, ldb, n, nrhs
      integer            ipiv( * )
      complex*16         b( ldb, * ), d( * ), dl( * ), du( * ), du2( * )
      end

      interface to 
     $subroutine zhbev( jobz, uplo, n, kd, ab, ldab, w, z, ldz, work,
     $                  rwork, info )
      character          jobz, uplo
      integer            info, kd, ldab, ldz, n
      double precision   rwork( * ), w( * )
      complex*16         ab( ldab, * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine zhbevd( jobz, uplo, n, kd, ab, ldab, w, z, ldz, work,
     $                   lwork, rwork, lrwork, iwork, liwork, info )
      character          jobz, uplo
      integer            info, kd, ldab, ldz, liwork, lrwork, lwork, n
      integer            iwork( * )
      double precision   rwork( * ), w( * )
      complex*16         ab( ldab, * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine zhbevx( jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl,
     $                   vu, il, iu, abstol, m, w, z, ldz, work, rwork,
     $                   iwork, ifail, info )
      character          jobz, range, uplo
      integer            il, info, iu, kd, ldab, ldq, ldz, m, n
      double precision   abstol, vl, vu
      integer            ifail( * ), iwork( * )
      double precision   rwork( * ), w( * )
      complex*16         ab( ldab, * ), q( ldq, * ), work( * ),
     $                   z( ldz, * )
      end

      interface to 
     $subroutine zhbgst( vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x,
     $                   ldx, work, rwork, info )
      character          uplo, vect
      integer            info, ka, kb, ldab, ldbb, ldx, n
      double precision   rwork( * )
      complex*16         ab( ldab, * ), bb( ldbb, * ), work( * ),
     $                   x( ldx, * )
      end

      interface to 
     $subroutine zhbgv( jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z,
     $                  ldz, work, rwork, info )
      character          jobz, uplo
      integer            info, ka, kb, ldab, ldbb, ldz, n
      double precision   rwork( * ), w( * )
      complex*16         ab( ldab, * ), bb( ldbb, * ), work( * ),
     $                   z( ldz, * )
      end

      interface to 
     $subroutine zhbtrd( vect, uplo, n, kd, ab, ldab, d, e, q, ldq,
     $                   work, info )
      character          uplo, vect
      integer            info, kd, ldab, ldq, n
      double precision   d( * ), e( * )
      complex*16         ab( ldab, * ), q( ldq, * ), work( * )
      end

      interface to 
     $subroutine zhecon( uplo, n, a, lda, ipiv, anorm, rcond, work,
     $                   info )
      character          uplo
      integer            info, lda, n
      double precision   anorm, rcond
      integer            ipiv( * )
      complex*16         a( lda, * ), work( * )
      end

      interface to 
     $subroutine zheev( jobz, uplo, n, a, lda, w, work, lwork, rwork,
     $                  info )
      character          jobz, uplo
      integer            info, lda, lwork, n
      double precision   rwork( * ), w( * )
      complex*16         a( lda, * ), work( * )
      end

      interface to 
     $subroutine zheevd( jobz, uplo, n, a, lda, w, work, lwork, rwork,
     $                   lrwork, iwork, liwork, info )
      character          jobz, uplo
      integer            info, lda, liwork, lrwork, lwork, n
      integer            iwork( * )
      double precision   rwork( * ), w( * )
      complex*16         a( lda, * ), work( * )
      end

      interface to 
     $subroutine zheevx( jobz, range, uplo, n, a, lda, vl, vu, il, iu,
     $                   abstol, m, w, z, ldz, work, lwork, rwork,
     $                   iwork, ifail, info )
      character          jobz, range, uplo
      integer            il, info, iu, lda, ldz, lwork, m, n
      double precision   abstol, vl, vu
      integer            ifail( * ), iwork( * )
      double precision   rwork( * ), w( * )
      complex*16         a( lda, * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine zhegs2( itype, uplo, n, a, lda, b, ldb, info )
      character          uplo
      integer            info, itype, lda, ldb, n
      complex*16         a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine zhegst( itype, uplo, n, a, lda, b, ldb, info )
      character          uplo
      integer            info, itype, lda, ldb, n
      complex*16         a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine zhegv( itype, jobz, uplo, n, a, lda, b, ldb, w, work,
     $                  lwork, rwork, info )
      character          jobz, uplo
      integer            info, itype, lda, ldb, lwork, n
      double precision   rwork( * ), w( * )
      complex*16         a( lda, * ), b( ldb, * ), work( * )
      end

      interface to 
     $subroutine zherfs( uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb,
     $                   x, ldx, ferr, berr, work, rwork, info )
      character          uplo
      integer            info, lda, ldaf, ldb, ldx, n, nrhs
      integer            ipiv( * )
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         a( lda, * ), af( ldaf, * ), b( ldb, * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine zhesv( uplo, n, nrhs, a, lda, ipiv, b, ldb, work,
     $                  lwork, info )
      character          uplo
      integer            info, lda, ldb, lwork, n, nrhs
      integer            ipiv( * )
      complex*16         a( lda, * ), b( ldb, * ), work( lwork )
      end

      interface to 
     $subroutine zhesvx( fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b,
     $                   ldb, x, ldx, rcond, ferr, berr, work, lwork,
     $                   rwork, info )
      character          fact, uplo
      integer            info, lda, ldaf, ldb, ldx, lwork, n, nrhs
      double precision   rcond
      integer            ipiv( * )
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         a( lda, * ), af( ldaf, * ), b( ldb, * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine zhetd2( uplo, n, a, lda, d, e, tau, info )
      character          uplo
      integer            info, lda, n
      double precision   d( * ), e( * )
      complex*16         a( lda, * ), tau( * )
      end

      interface to 
     $subroutine zhetf2( uplo, n, a, lda, ipiv, info )
      character          uplo
      integer            info, lda, n
      integer            ipiv( * )
      complex*16         a( lda, * )
      end

      interface to 
     $subroutine zhetrd( uplo, n, a, lda, d, e, tau, work, lwork, info )
      character          uplo
      integer            info, lda, lwork, n
      double precision   d( * ), e( * )
      complex*16         a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine zhetrf( uplo, n, a, lda, ipiv, work, lwork, info )
      character          uplo
      integer            info, lda, lwork, n
      integer            ipiv( * )
      complex*16         a( lda, * ), work( lwork )
      end

      interface to 
     $subroutine zhetri( uplo, n, a, lda, ipiv, work, info )
      character          uplo
      integer            info, lda, n
      integer            ipiv( * )
      complex*16         a( lda, * ), work( * )
      end

      interface to 
     $subroutine zhetrs( uplo, n, nrhs, a, lda, ipiv, b, ldb, info )
      character          uplo
      integer            info, lda, ldb, n, nrhs
      integer            ipiv( * )
      complex*16         a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine zhgeqz( job, compq, compz, n, ilo, ihi, a, lda, b, ldb,
     $                   alpha, beta, q, ldq, z, ldz, work, lwork,
     $                   rwork, info )
      character          compq, compz, job
      integer            ihi, ilo, info, lda, ldb, ldq, ldz, lwork, n
      double precision   rwork( * )
      complex*16         a( lda, * ), alpha( * ), b( ldb, * ),
     $                   beta( * ), q( ldq, * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine zhpcon( uplo, n, ap, ipiv, anorm, rcond, work, info )
      character          uplo
      integer            info, n
      double precision   anorm, rcond
      integer            ipiv( * )
      complex*16         ap( * ), work( * )
      end

      interface to 
     $subroutine zhpev( jobz, uplo, n, ap, w, z, ldz, work, rwork,
     $                  info )
      character          jobz, uplo
      integer            info, ldz, n
      double precision   rwork( * ), w( * )
      complex*16         ap( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine zhpevd( jobz, uplo, n, ap, w, z, ldz, work, lwork,
     $                   rwork, lrwork, iwork, liwork, info )
      character          jobz, uplo
      integer            info, ldz, liwork, lrwork, lwork, n
      integer            iwork( * )
      double precision   rwork( * ), w( * )
      complex*16         ap( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine zhpevx( jobz, range, uplo, n, ap, vl, vu, il, iu,
     $                   abstol, m, w, z, ldz, work, rwork, iwork,
     $                   ifail, info )
      character          jobz, range, uplo
      integer            il, info, iu, ldz, m, n
      double precision   abstol, vl, vu
      integer            ifail( * ), iwork( * )
      double precision   rwork( * ), w( * )
      complex*16         ap( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine zhpgst( itype, uplo, n, ap, bp, info )
      character          uplo
      integer            info, itype, n
      complex*16         ap( * ), bp( * )
      end

      interface to 
     $subroutine zhpgv( itype, jobz, uplo, n, ap, bp, w, z, ldz, work,
     $                  rwork, info )
      character          jobz, uplo
      integer            info, itype, ldz, n
      double precision   rwork( * ), w( * )
      complex*16         ap( * ), bp( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine zhprfs( uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx,
     $                   ferr, berr, work, rwork, info )
      character          uplo
      integer            info, ldb, ldx, n, nrhs
      integer            ipiv( * )
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         afp( * ), ap( * ), b( ldb, * ), work( * ),
     $                   x( ldx, * )
      end

      interface to 
     $subroutine zhpsv( uplo, n, nrhs, ap, ipiv, b, ldb, info )
      character          uplo
      integer            info, ldb, n, nrhs
      integer            ipiv( * )
      complex*16         ap( * ), b( ldb, * )
      end

      interface to 
     $subroutine zhpsvx( fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x,
     $                   ldx, rcond, ferr, berr, work, rwork, info )
      character          fact, uplo
      integer            info, ldb, ldx, n, nrhs
      double precision   rcond
      integer            ipiv( * )
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         afp( * ), ap( * ), b( ldb, * ), work( * ),
     $                   x( ldx, * )
      end

      interface to 
     $subroutine zhptrd( uplo, n, ap, d, e, tau, info )
      character          uplo
      integer            info, n
      double precision   d( * ), e( * )
      complex*16         ap( * ), tau( * )
      end

      interface to 
     $subroutine zhptrf( uplo, n, ap, ipiv, info )
      character          uplo
      integer            info, n
      integer            ipiv( * )
      complex*16         ap( * )
      end

      interface to 
     $subroutine zhptri( uplo, n, ap, ipiv, work, info )
      character          uplo
      integer            info, n
      integer            ipiv( * )
      complex*16         ap( * ), work( * )
      end

      interface to 
     $subroutine zhptrs( uplo, n, nrhs, ap, ipiv, b, ldb, info )
      character          uplo
      integer            info, ldb, n, nrhs
      integer            ipiv( * )
      complex*16         ap( * ), b( ldb, * )
      end

      interface to 
     $subroutine zhsein( side, eigsrc, initv, select, n, h, ldh, w, vl,
     $                   ldvl, vr, ldvr, mm, m, work, rwork, ifaill,
     $                   ifailr, info )
      character          eigsrc, initv, side
      integer            info, ldh, ldvl, ldvr, m, mm, n
      logical            select( * )
      integer            ifaill( * ), ifailr( * )
      double precision   rwork( * )
      complex*16         h( ldh, * ), vl( ldvl, * ), vr( ldvr, * ),
     $                   w( * ), work( * )
      end

      interface to 
     $subroutine zhseqr( job, compz, n, ilo, ihi, h, ldh, w, z, ldz,
     $                   work, lwork, info )
      character          compz, job
      integer            ihi, ilo, info, ldh, ldz, lwork, n
      complex*16         h( ldh, * ), w( * ), work( * ), z( ldz, * )
      end

      interface to 
     $subroutine zlaed0( qsiz, n, d, e, q, ldq, qstore, ldqs, rwork,
     $                   iwork, info )
      integer            info, ldq, ldqs, n, qsiz
      integer            iwork( * )
      double precision   d( * ), e( * ), rwork( * )
      complex*16         q( ldq, * ), qstore( ldqs, * )
      end

      interface to 
     $subroutine zlaed7( n, cutpnt, qsiz, tlvls, curlvl, curpbm, d, q,
     $                   ldq, rho, indxq, qstore, qptr, prmptr, perm,
     $                   givptr, givcol, givnum, work, rwork, iwork,
     $                   info )
      integer            curlvl, curpbm, cutpnt, info, ldq, n, qsiz,
     $                   tlvls
      double precision   rho
      integer            givcol( 2, * ), givptr( * ), indxq( * ),
     $                   iwork( * ), perm( * ), prmptr( * ), qptr( * )
      double precision   d( * ), givnum( 2, * ), qstore( * ), rwork( * )
      complex*16         q( ldq, * ), work( * )
      end

      interface to 
     $subroutine zlaed8( k, n, qsiz, q, ldq, d, rho, cutpnt, z, dlamda,
     $                   q2, ldq2, w, indxp, indx, indxq, perm, givptr,
     $                   givcol, givnum, info )
      integer            cutpnt, givptr, info, k, ldq, ldq2, n, qsiz
      double precision   rho
      integer            givcol( 2, * ), indx( * ), indxp( * ),
     $                   indxq( * ), perm( * )
      double precision   d( * ), dlamda( * ), givnum( 2, * ), w( * ),
     $                   z( * )
      complex*16         q( ldq, * ), q2( ldq2, * )
      end

      interface to 
     $subroutine zlahef( uplo, n, nb, kb, a, lda, ipiv, w, ldw, info )
      character          uplo
      integer            info, kb, lda, ldw, n, nb
      integer            ipiv( * )
      complex*16         a( lda, * ), w( ldw, * )
      end

      interface to 
     $subroutine zlasyf( uplo, n, nb, kb, a, lda, ipiv, w, ldw, info )
      character          uplo
      integer            info, kb, lda, ldw, n, nb
      integer            ipiv( * )
      complex*16         a( lda, * ), w( ldw, * )
      end

      interface to 
     $subroutine zlatzm( side, m, n, v, incv, tau, c1, c2, ldc, work )
      character          side
      integer            incv, ldc, m, n
      complex*16         tau
      complex*16         c1( ldc, * ), c2( ldc, * ), v( * ), work( * )
      end

      interface to 
     $subroutine zpbcon( uplo, n, kd, ab, ldab, anorm, rcond, work,
     $                   rwork, info )
      character          uplo
      integer            info, kd, ldab, n
      double precision   anorm, rcond
      double precision   rwork( * )
      complex*16         ab( ldab, * ), work( * )
      end

      interface to 
     $subroutine zpbequ( uplo, n, kd, ab, ldab, s, scond, amax, info )
      character          uplo
      integer            info, kd, ldab, n
      double precision   amax, scond
      double precision   s( * )
      complex*16         ab( ldab, * )
      end

      interface to 
     $subroutine zpbrfs( uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b,
     $                   ldb, x, ldx, ferr, berr, work, rwork, info )
      character          uplo
      integer            info, kd, ldab, ldafb, ldb, ldx, n, nrhs
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         ab( ldab, * ), afb( ldafb, * ), b( ldb, * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine zpbstf( uplo, n, kd, ab, ldab, info )
      character          uplo
      integer            info, kd, ldab, n
      complex*16         ab( ldab, * )
      end

      interface to 
     $subroutine zpbsv( uplo, n, kd, nrhs, ab, ldab, b, ldb, info )
      character          uplo
      integer            info, kd, ldab, ldb, n, nrhs
      complex*16         ab( ldab, * ), b( ldb, * )
      end

      interface to 
     $subroutine zpbsvx( fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb,
     $                   equed, s, b, ldb, x, ldx, rcond, ferr, berr,
     $                   work, rwork, info )
      character          equed, fact, uplo
      integer            info, kd, ldab, ldafb, ldb, ldx, n, nrhs
      double precision   rcond
      double precision   berr( * ), ferr( * ), rwork( * ), s( * )
      complex*16         ab( ldab, * ), afb( ldafb, * ), b( ldb, * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine zpbtf2( uplo, n, kd, ab, ldab, info )
      character          uplo
      integer            info, kd, ldab, n
      complex*16         ab( ldab, * )
      end

      interface to 
     $subroutine zpbtrf( uplo, n, kd, ab, ldab, info )
      character          uplo
      integer            info, kd, ldab, n
      complex*16         ab( ldab, * )
      end

      interface to 
     $subroutine zpbtrs( uplo, n, kd, nrhs, ab, ldab, b, ldb, info )
      character          uplo
      integer            info, kd, ldab, ldb, n, nrhs
      complex*16         ab( ldab, * ), b( ldb, * )
      end

      interface to 
     $subroutine zpocon( uplo, n, a, lda, anorm, rcond, work, rwork,
     $                   info )
      character          uplo
      integer            info, lda, n
      double precision   anorm, rcond
      double precision   rwork( * )
      complex*16         a( lda, * ), work( * )
      end

      interface to 
     $subroutine zpoequ( n, a, lda, s, scond, amax, info )
      integer            info, lda, n
      double precision   amax, scond
      double precision   s( * )
      complex*16         a( lda, * )
      end

      interface to 
     $subroutine zporfs( uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x,
     $                   ldx, ferr, berr, work, rwork, info )
      character          uplo
      integer            info, lda, ldaf, ldb, ldx, n, nrhs
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         a( lda, * ), af( ldaf, * ), b( ldb, * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine zposv( uplo, n, nrhs, a, lda, b, ldb, info )
      character          uplo
      integer            info, lda, ldb, n, nrhs
      complex*16         a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine zposvx( fact, uplo, n, nrhs, a, lda, af, ldaf, equed,
     $                   s, b, ldb, x, ldx, rcond, ferr, berr, work,
     $                   rwork, info )
      character          equed, fact, uplo
      integer            info, lda, ldaf, ldb, ldx, n, nrhs
      double precision   rcond
      double precision   berr( * ), ferr( * ), rwork( * ), s( * )
      complex*16         a( lda, * ), af( ldaf, * ), b( ldb, * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine zpotf2( uplo, n, a, lda, info )
      character          uplo
      integer            info, lda, n
      complex*16         a( lda, * )
      end

      interface to 
     $subroutine zpotrf( uplo, n, a, lda, info )
      character          uplo
      integer            info, lda, n
      complex*16         a( lda, * )
      end

      interface to 
     $subroutine zpotri( uplo, n, a, lda, info )
      character          uplo
      integer            info, lda, n
      complex*16         a( lda, * )
      end

      interface to 
     $subroutine zpotrs( uplo, n, nrhs, a, lda, b, ldb, info )
      character          uplo
      integer            info, lda, ldb, n, nrhs
      complex*16         a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine zppcon( uplo, n, ap, anorm, rcond, work, rwork, info )
      character          uplo
      integer            info, n
      double precision   anorm, rcond
      double precision   rwork( * )
      complex*16         ap( * ), work( * )
      end

      interface to 
     $subroutine zppequ( uplo, n, ap, s, scond, amax, info )
      character          uplo
      integer            info, n
      double precision   amax, scond
      double precision   s( * )
      complex*16         ap( * )
      end

      interface to 
     $subroutine zpprfs( uplo, n, nrhs, ap, afp, b, ldb, x, ldx, ferr,
     $                   berr, work, rwork, info )
      character          uplo
      integer            info, ldb, ldx, n, nrhs
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         afp( * ), ap( * ), b( ldb, * ), work( * ),
     $                   x( ldx, * )
      end

      interface to 
     $subroutine zppsv( uplo, n, nrhs, ap, b, ldb, info )
      character          uplo
      integer            info, ldb, n, nrhs
      complex*16         ap( * ), b( ldb, * )
      end

      interface to 
     $subroutine zppsvx( fact, uplo, n, nrhs, ap, afp, equed, s, b, ldb,
     $                   x, ldx, rcond, ferr, berr, work, rwork, info )
      character          equed, fact, uplo
      integer            info, ldb, ldx, n, nrhs
      double precision   rcond
      double precision   berr( * ), ferr( * ), rwork( * ), s( * )
      complex*16         afp( * ), ap( * ), b( ldb, * ), work( * ),
     $                   x( ldx, * )
      end

      interface to 
     $subroutine zpptrf( uplo, n, ap, info )
      character          uplo
      integer            info, n
      complex*16         ap( * )
      end

      interface to 
     $subroutine zpptri( uplo, n, ap, info )
      character          uplo
      integer            info, n
      complex*16         ap( * )
      end

      interface to 
     $subroutine zpptrs( uplo, n, nrhs, ap, b, ldb, info )
      character          uplo
      integer            info, ldb, n, nrhs
      complex*16         ap( * ), b( ldb, * )
      end

      interface to 
     $subroutine zptcon( n, d, e, anorm, rcond, rwork, info )
      integer            info, n
      double precision   anorm, rcond
      double precision   d( * ), rwork( * )
      complex*16         e( * )
      end

      interface to 
     $subroutine zpteqr( compz, n, d, e, z, ldz, work, info )
      character          compz
      integer            info, ldz, n
      double precision   d( * ), e( * ), work( * )
      complex*16         z( ldz, * )
      end

      interface to 
     $subroutine zptrfs( uplo, n, nrhs, d, e, df, ef, b, ldb, x, ldx,
     $                   ferr, berr, work, rwork, info )
      character          uplo
      integer            info, ldb, ldx, n, nrhs
      double precision   berr( * ), d( * ), df( * ), ferr( * ),
     $                   rwork( * )
      complex*16         b( ldb, * ), e( * ), ef( * ), work( * ),
     $                   x( ldx, * )
      end

      interface to 
     $subroutine zptsv( n, nrhs, d, e, b, ldb, info )
      integer            info, ldb, n, nrhs
      double precision   d( * )
      complex*16         b( ldb, * ), e( * )
      end

      interface to 
     $subroutine zptsvx( fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx,
     $                   rcond, ferr, berr, work, rwork, info )
      character          fact
      integer            info, ldb, ldx, n, nrhs
      double precision   rcond
      double precision   berr( * ), d( * ), df( * ), ferr( * ),
     $                   rwork( * )
      complex*16         b( ldb, * ), e( * ), ef( * ), work( * ),
     $                   x( ldx, * )
      end

      interface to 
     $subroutine zpttrf( n, d, e, info )
      integer            info, n
      double precision   d( * )
      complex*16         e( * )
      end

      interface to 
     $subroutine zpttrs( uplo, n, nrhs, d, e, b, ldb, info )
      character          uplo
      integer            info, ldb, n, nrhs
      double precision   d( * )
      complex*16         b( ldb, * ), e( * )
      end

      interface to 
     $subroutine zspcon( uplo, n, ap, ipiv, anorm, rcond, work, info )
      character          uplo
      integer            info, n
      double precision   anorm, rcond
      integer            ipiv( * )
      complex*16         ap( * ), work( * )
      end

      interface to 
     $subroutine zsprfs( uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx,
     $                   ferr, berr, work, rwork, info )
      character          uplo
      integer            info, ldb, ldx, n, nrhs
      integer            ipiv( * )
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         afp( * ), ap( * ), b( ldb, * ), work( * ),
     $                   x( ldx, * )
      end

      interface to 
     $subroutine zspsv( uplo, n, nrhs, ap, ipiv, b, ldb, info )
      character          uplo
      integer            info, ldb, n, nrhs
      integer            ipiv( * )
      complex*16         ap( * ), b( ldb, * )
      end

      interface to 
     $subroutine zspsvx( fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x,
     $                   ldx, rcond, ferr, berr, work, rwork, info )
      character          fact, uplo
      integer            info, ldb, ldx, n, nrhs
      double precision   rcond
      integer            ipiv( * )
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         afp( * ), ap( * ), b( ldb, * ), work( * ),
     $                   x( ldx, * )
      end

      interface to 
     $subroutine zsptrf( uplo, n, ap, ipiv, info )
      character          uplo
      integer            info, n
      integer            ipiv( * )
      complex*16         ap( * )
      end

      interface to 
     $subroutine zsptri( uplo, n, ap, ipiv, work, info )
      character          uplo
      integer            info, n
      integer            ipiv( * )
      complex*16         ap( * ), work( * )
      end

      interface to 
     $subroutine zsptrs( uplo, n, nrhs, ap, ipiv, b, ldb, info )
      character          uplo
      integer            info, ldb, n, nrhs
      integer            ipiv( * )
      complex*16         ap( * ), b( ldb, * )
      end

      interface to 
     $subroutine zstedc( compz, n, d, e, z, ldz, work, lwork, rwork,
     $                   lrwork, iwork, liwork, info )
      character          compz
      integer            info, ldz, liwork, lrwork, lwork, n
      integer            iwork( * )
      double precision   d( * ), e( * ), rwork( * )
      complex*16         work( * ), z( ldz, * )
      end

      interface to 
     $subroutine zstein( n, d, e, m, w, iblock, isplit, z, ldz, work,
     $                   iwork, ifail, info )
      integer            info, ldz, m, n
      integer            iblock( * ), ifail( * ), isplit( * ),
     $                   iwork( * )
      double precision   d( * ), e( * ), w( * ), work( * )
      complex*16         z( ldz, * )
      end

      interface to 
     $subroutine zsteqr( compz, n, d, e, z, ldz, work, info )
      character          compz
      integer            info, ldz, n
      double precision   d( * ), e( * ), work( * )
      complex*16         z( ldz, * )
      end

      interface to 
     $subroutine zsycon( uplo, n, a, lda, ipiv, anorm, rcond, work,
     $                   info )
      character          uplo
      integer            info, lda, n
      double precision   anorm, rcond
      integer            ipiv( * )
      complex*16         a( lda, * ), work( * )
      end

      interface to 
     $subroutine zsyrfs( uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb,
     $                   x, ldx, ferr, berr, work, rwork, info )
      character          uplo
      integer            info, lda, ldaf, ldb, ldx, n, nrhs
      integer            ipiv( * )
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         a( lda, * ), af( ldaf, * ), b( ldb, * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine zsysv( uplo, n, nrhs, a, lda, ipiv, b, ldb, work,
     $                  lwork, info )
      character          uplo
      integer            info, lda, ldb, lwork, n, nrhs
      integer            ipiv( * )
      complex*16         a( lda, * ), b( ldb, * ), work( lwork )
      end

      interface to 
     $subroutine zsysvx( fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b,
     $                   ldb, x, ldx, rcond, ferr, berr, work, lwork,
     $                   rwork, info )
      character          fact, uplo
      integer            info, lda, ldaf, ldb, ldx, lwork, n, nrhs
      double precision   rcond
      integer            ipiv( * )
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         a( lda, * ), af( ldaf, * ), b( ldb, * ),
     $                   work( * ), x( ldx, * )
      end

      interface to 
     $subroutine zsytf2( uplo, n, a, lda, ipiv, info )
      character          uplo
      integer            info, lda, n
      integer            ipiv( * )
      complex*16         a( lda, * )
      end

      interface to 
     $subroutine zsytrf( uplo, n, a, lda, ipiv, work, lwork, info )
      character          uplo
      integer            info, lda, lwork, n
      integer            ipiv( * )
      complex*16         a( lda, * ), work( lwork )
      end

      interface to 
     $subroutine zsytri( uplo, n, a, lda, ipiv, work, info )
      character          uplo
      integer            info, lda, n
      integer            ipiv( * )
      complex*16         a( lda, * ), work( * )
      end

      interface to 
     $subroutine zsytrs( uplo, n, nrhs, a, lda, ipiv, b, ldb, info )
      character          uplo
      integer            info, lda, ldb, n, nrhs
      integer            ipiv( * )
      complex*16         a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine ztbcon( norm, uplo, diag, n, kd, ab, ldab, rcond, work,
     $                   rwork, info )
      character          diag, norm, uplo
      integer            info, kd, ldab, n
      double precision   rcond
      double precision   rwork( * )
      complex*16         ab( ldab, * ), work( * )
      end

      interface to 
     $subroutine ztbrfs( uplo, trans, diag, n, kd, nrhs, ab, ldab, b,
     $                   ldb, x, ldx, ferr, berr, work, rwork, info )
      character          diag, trans, uplo
      integer            info, kd, ldab, ldb, ldx, n, nrhs
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         ab( ldab, * ), b( ldb, * ), work( * ),
     $                   x( ldx, * )
      end

      interface to 
     $subroutine ztbtrs( uplo, trans, diag, n, kd, nrhs, ab, ldab, b,
     $                   ldb, info )
      character          diag, trans, uplo
      integer            info, kd, ldab, ldb, n, nrhs
      complex*16         ab( ldab, * ), b( ldb, * )
      end

      interface to 
     $subroutine ztgevc( side, howmny, select, n, a, lda, b, ldb, vl,
     $                   ldvl, vr, ldvr, mm, m, work, rwork, info )
      character          howmny, side
      integer            info, lda, ldb, ldvl, ldvr, m, mm, n
      logical            select( * )
      double precision   rwork( * )
      complex*16         a( lda, * ), b( ldb, * ), vl( ldvl, * ),
     $                   vr( ldvr, * ), work( * )
      end

      interface to 
     $subroutine ztgsja( jobu, jobv, jobq, m, p, n, k, l, a, lda, b,
     $                   ldb, tola, tolb, alpha, beta, u, ldu, v, ldv,
     $                   q, ldq, work, ncycle, info )
      character          jobq, jobu, jobv
      integer            info, k, l, lda, ldb, ldq, ldu, ldv, m, n,
     $                   ncycle, p
      double precision   tola, tolb
      double precision   alpha( * ), beta( * )
      complex*16         a( lda, * ), b( ldb, * ), q( ldq, * ),
     $                   u( ldu, * ), v( ldv, * ), work( * )
      end

      interface to 
     $subroutine ztpcon( norm, uplo, diag, n, ap, rcond, work, rwork,
     $                   info )
      character          diag, norm, uplo
      integer            info, n
      double precision   rcond
      double precision   rwork( * )
      complex*16         ap( * ), work( * )
      end

      interface to 
     $subroutine ztprfs( uplo, trans, diag, n, nrhs, ap, b, ldb, x, ldx,
     $                   ferr, berr, work, rwork, info )
      character          diag, trans, uplo
      integer            info, ldb, ldx, n, nrhs
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         ap( * ), b( ldb, * ), work( * ), x( ldx, * )
      end

      interface to 
     $subroutine ztptri( uplo, diag, n, ap, info )
      character          diag, uplo
      integer            info, n
      complex*16         ap( * )
      end

      interface to 
     $subroutine ztptrs( uplo, trans, diag, n, nrhs, ap, b, ldb, info )
      character          diag, trans, uplo
      integer            info, ldb, n, nrhs
      complex*16         ap( * ), b( ldb, * )
      end

      interface to 
     $subroutine ztrcon( norm, uplo, diag, n, a, lda, rcond, work,
     $                   rwork, info )
      character          diag, norm, uplo
      integer            info, lda, n
      double precision   rcond
      double precision   rwork( * )
      complex*16         a( lda, * ), work( * )
      end

      interface to 
     $subroutine ztrevc( side, howmny, select, n, t, ldt, vl, ldvl, vr,
     $                   ldvr, mm, m, work, rwork, info )
      character          howmny, side
      integer            info, ldt, ldvl, ldvr, m, mm, n
      logical            select( * )
      double precision   rwork( * )
      complex*16         t( ldt, * ), vl( ldvl, * ), vr( ldvr, * ),
     $                   work( * )
      end

      interface to 
     $subroutine ztrexc( compq, n, t, ldt, q, ldq, ifst, ilst, info )
      character          compq
      integer            ifst, ilst, info, ldq, ldt, n
      complex*16         q( ldq, * ), t( ldt, * )
      end

      interface to 
     $subroutine ztrrfs( uplo, trans, diag, n, nrhs, a, lda, b, ldb, x,
     $                   ldx, ferr, berr, work, rwork, info )
      character          diag, trans, uplo
      integer            info, lda, ldb, ldx, n, nrhs
      double precision   berr( * ), ferr( * ), rwork( * )
      complex*16         a( lda, * ), b( ldb, * ), work( * ),
     $                   x( ldx, * )
      end

      interface to 
     $subroutine ztrsen( job, compq, select, n, t, ldt, q, ldq, w, m, s,
     $                   sep, work, lwork, info )
      character          compq, job
      integer            info, ldq, ldt, lwork, m, n
      double precision   s, sep
      logical            select( * )
      complex*16         q( ldq, * ), t( ldt, * ), w( * ), work( * )
      end

      interface to 
     $subroutine ztrsna( job, howmny, select, n, t, ldt, vl, ldvl, vr,
     $                   ldvr, s, sep, mm, m, work, ldwork, rwork,
     $                   info )
      character          howmny, job
      integer            info, ldt, ldvl, ldvr, ldwork, m, mm, n
      logical            select( * )
      double precision   rwork( * ), s( * ), sep( * )
      complex*16         t( ldt, * ), vl( ldvl, * ), vr( ldvr, * ),
     $                   work( ldwork, * )
      end

      interface to 
     $subroutine ztrsyl( trana, tranb, isgn, m, n, a, lda, b, ldb, c,
     $                   ldc, scale, info )
      character          trana, tranb
      integer            info, isgn, lda, ldb, ldc, m, n
      double precision   scale
      complex*16         a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to 
     $subroutine ztrti2( uplo, diag, n, a, lda, info )
      character          diag, uplo
      integer            info, lda, n
      complex*16         a( lda, * )
      end

      interface to 
     $subroutine ztrtri( uplo, diag, n, a, lda, info )
      character          diag, uplo
      integer            info, lda, n
      complex*16         a( lda, * )
      end

      interface to 
     $subroutine ztrtrs( uplo, trans, diag, n, nrhs, a, lda, b, ldb,
     $                   info )
      character          diag, trans, uplo
      integer            info, lda, ldb, n, nrhs
      complex*16         a( lda, * ), b( ldb, * )
      end

      interface to 
     $subroutine ztzrqf( m, n, a, lda, tau, info )
      integer            info, lda, m, n
      complex*16         a( lda, * ), tau( * )
      end

      interface to 
     $subroutine zung2l( m, n, k, a, lda, tau, work, info )
      integer            info, k, lda, m, n
      complex*16         a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine zung2r( m, n, k, a, lda, tau, work, info )
      integer            info, k, lda, m, n
      complex*16         a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine zungbr( vect, m, n, k, a, lda, tau, work, lwork, info )
      character          vect
      integer            info, k, lda, lwork, m, n
      complex*16         a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine zunghr( n, ilo, ihi, a, lda, tau, work, lwork, info )
      integer            ihi, ilo, info, lda, lwork, n
      complex*16         a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine zungl2( m, n, k, a, lda, tau, work, info )
      integer            info, k, lda, m, n
      complex*16         a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine zunglq( m, n, k, a, lda, tau, work, lwork, info )
      integer            info, k, lda, lwork, m, n
      complex*16         a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine zungql( m, n, k, a, lda, tau, work, lwork, info )
      integer            info, k, lda, lwork, m, n
      complex*16         a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine zungqr( m, n, k, a, lda, tau, work, lwork, info )
      integer            info, k, lda, lwork, m, n
      complex*16         a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine zungr2( m, n, k, a, lda, tau, work, info )
      integer            info, k, lda, m, n
      complex*16         a( lda, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine zungrq( m, n, k, a, lda, tau, work, lwork, info )
      integer            info, k, lda, lwork, m, n
      complex*16         a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine zungtr( uplo, n, a, lda, tau, work, lwork, info )
      character          uplo
      integer            info, lda, lwork, n
      complex*16         a( lda, * ), tau( * ), work( lwork )
      end

      interface to 
     $subroutine zunm2l( side, trans, m, n, k, a, lda, tau, c, ldc,
     $                   work, info )
      character          side, trans
      integer            info, k, lda, ldc, m, n
      complex*16         a( lda, * ), c( ldc, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine zunm2r( side, trans, m, n, k, a, lda, tau, c, ldc,
     $                   work, info )
      character          side, trans
      integer            info, k, lda, ldc, m, n
      complex*16         a( lda, * ), c( ldc, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine zunmbr( vect, side, trans, m, n, k, a, lda, tau, c,
     $                   ldc, work, lwork, info )
      character          side, trans, vect
      integer            info, k, lda, ldc, lwork, m, n
      complex*16         a( lda, * ), c( ldc, * ), tau( * ),
     $                   work( lwork )
      end

      interface to 
     $subroutine zunmhr( side, trans, m, n, ilo, ihi, a, lda, tau, c,
     $                   ldc, work, lwork, info )
      character          side, trans
      integer            ihi, ilo, info, lda, ldc, lwork, m, n
      complex*16         a( lda, * ), c( ldc, * ), tau( * ),
     $                   work( lwork )
      end

      interface to 
     $subroutine zunml2( side, trans, m, n, k, a, lda, tau, c, ldc,
     $                   work, info )
      character          side, trans
      integer            info, k, lda, ldc, m, n
      complex*16         a( lda, * ), c( ldc, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine zunmlq( side, trans, m, n, k, a, lda, tau, c, ldc,
     $                   work, lwork, info )
      character          side, trans
      integer            info, k, lda, ldc, lwork, m, n
      complex*16         a( lda, * ), c( ldc, * ), tau( * ),
     $                   work( lwork )
      end

      interface to 
     $subroutine zunmql( side, trans, m, n, k, a, lda, tau, c, ldc,
     $                   work, lwork, info )
      character          side, trans
      integer            info, k, lda, ldc, lwork, m, n
      complex*16         a( lda, * ), c( ldc, * ), tau( * ),
     $                   work( lwork )
      end

      interface to 
     $subroutine zunmqr( side, trans, m, n, k, a, lda, tau, c, ldc,
     $                   work, lwork, info )
      character          side, trans
      integer            info, k, lda, ldc, lwork, m, n
      complex*16         a( lda, * ), c( ldc, * ), tau( * ),
     $                   work( lwork )
      end

      interface to 
     $subroutine zunmr2( side, trans, m, n, k, a, lda, tau, c, ldc,
     $                   work, info )
      character          side, trans
      integer            info, k, lda, ldc, m, n
      complex*16         a( lda, * ), c( ldc, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine zunmrq( side, trans, m, n, k, a, lda, tau, c, ldc,
     $                   work, lwork, info )
      character          side, trans
      integer            info, k, lda, ldc, lwork, m, n
      complex*16         a( lda, * ), c( ldc, * ), tau( * ),
     $                   work( lwork )
      end

      interface to 
     $subroutine zunmtr( side, uplo, trans, m, n, a, lda, tau, c, ldc,
     $                   work, lwork, info )
      character          side, trans, uplo
      integer            info, lda, ldc, lwork, m, n
      complex*16         a( lda, * ), c( ldc, * ), tau( * ),
     $                   work( lwork )
      end

      interface to 
     $subroutine zupgtr( uplo, n, ap, tau, q, ldq, work, info )
      character          uplo
      integer            info, ldq, n
      complex*16         ap( * ), q( ldq, * ), tau( * ), work( * )
      end

      interface to 
     $subroutine zupmtr( side, uplo, trans, m, n, ap, tau, c, ldc, work,
     $                   info )
      character          side, trans, uplo
      integer            info, ldc, m, n
      complex*16         ap( * ), c( ldc, * ), tau( * ), work( * )
      end

$ENDIF
