// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: TeeChart5.ocx

[
  uuid(B6C10482-FB89-11D4-93C9-006008A7EED4),
  version(1.0),
  helpstring("TeeChart Pro Activex Control v5"),
  helpfile("teechartx5.hlp"),
  helpcontext(0x00002710)
]
library TeeChart
{
    // TLib :     // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    enum EPenEndStyle;
	enum  ECanvasBackMode;
	enum  ECanvasTextAlign;
	enum  EAxisLabelAlign;
	enum  EChartObjectShapeStyle;
	struct TeeRect;
	enum  EStreamType;
	enum  ETeeZoomDirection;
	enum  EDatasourceType;
	enum  EFunctionPeriodStyle;
	enum  EFunctionPeriodAlign;
	enum  ECustomSeriesStack;
	struct TeePoint2D;
	enum  ETeeVertAlign;
	enum  EPieOtherStyle;
	enum  EPenEndStyle;

    typedef [uuid(235FB757-F8ED-11D4-93C8-006008A7EED4), version(1.0), helpstring("Sets the behaviour of the mouse for the MarksTipTool."), helpcontext(0x0000060e)]
    enum {
        mtmMove = 0,
        mtmClick = 1
    } EMarkToolMouseAction;

    typedef [uuid(235FB751-F8ED-11D4-93C8-006008A7EED4), version(1.0), helpstring("Pixel format types for BMP images."), helpcontext(0x00000606)]
    enum {
        pfDevice = 0,
        pf1bit = 1,
        pf4bit = 2,
        pf8bit = 3,
        pf15bit = 4,
        pf16bit = 5,
        pf24bit = 6,
        pf32bit = 7
    } EPixelFormat;

    typedef [uuid(235FB748-F8ED-11D4-93C8-006008A7EED4), version(1.0), helpstring("Compression type for GIF images."), helpcontext(0x000005fd)]
    enum {
        gcLZW = 0,
        gcRLE = 1
    } EGIFCompression;

    typedef [uuid(235FB749-F8ED-11D4-93C8-006008A7EED4), version(1.0), helpstring("DitherMode type for GIF images."), helpcontext(0x000005fe)]
    enum {
        dmNearest = 0,
        dmFloydSteinberg = 1,
        dmStucki = 2,
        dmSierra = 3,
        dmJaJuNI = 4,
        dmSteveArche = 5,
        dmBurkes = 6
    } EGIFDitherMode;

    typedef [uuid(235FB74A-F8ED-11D4-93C8-006008A7EED4), version(1.0), helpstring("ColorReduction type for GIF images."), helpcontext(0x000005ff)]
    enum {
        rmNone = 0,
        rmWindows20 = 1,
        rmWindows256 = 2,
        rmWindowsGray = 3,
        rmMonochrome = 4,
        rmGrayScale = 5,
        rmNetscape = 6,
        rmQuantize = 7,
        rmQuantize256 = 8
    } EGIFColorReduction;

    typedef [uuid(A01C725E-37F8-467D-961A-D7AC120381D9), version(1.0), helpstring("Specifies the orientation of the PreviewPanel."), helpcontext(0x000004bd)]
    enum {
        ppoDefault = 0,
        ppoPortrait = 1,
        ppoLandscape = 2
    } ETeePreviewPanelOrientation;

    typedef [uuid(4E43F7D6-8F5B-469C-9465-BF79693084B1), version(1.0), helpstring("Position of Legend colour boxes."), helpcontext(0x000004a7)]
    enum {
        spLeft = 0,
        spRight = 1
    } ELegendSymbolPosition;

    typedef [uuid(A2465C64-83E3-4664-A015-F275B1EFF1F8), version(1.0), helpstring("Defines whether the Legend Symbol size should be set as a percentage of the Legend box or by pixels."), helpcontext(0x000004a8)]
    enum {
        lcsPercent = 0,
        lcsPixels = 1
    } ELegendSymbolSize;

    typedef [uuid(499A9AB7-0C46-4B9C-BFE7-EC3347471066), version(1.0), helpstring("Adds the AxisArrow Tool to the Start, End or Both ends of an Axis."), helpcontext(0x00000493)]
    enum {
        aaStart = 0,
        aaEnd = 1,
        aaBoth = 2
    } EAxisArrowToolPosition;

    typedef [uuid(7A4E5B6E-ADFC-4795-8F12-94B006CE7E48), version(1.0), helpstring("Style of the enclosing shape for the TNearestTool."), helpcontext(0x00000494)]
    enum {
        hsNone = 0,
        hsCircle = 1,
        hsRectangle = 2,
        hsDiamond = 3
    } ENearestToolStyle;

    typedef [uuid(3B2B9815-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Chart Editor pages"), helpcontext(0x000003c8)]
    enum {
        epMain = 0,
        epGeneral = 1,
        epAxis = 2,
        epTitles = 3,
        epLegend = 4,
        epPanel = 5,
        epPaging = 6,
        epWalls = 7,
        epAspect = 8,
        epSeriesGeneral = 9,
        epSeriesMarks = 10,
        epAllSeries = 11,
        epSeriesData = 12,
        epExport = 13,
        epTools = 14,
        epPrintPreview = 15,
        epOpenGL = 16
    } ETeeEditorPage;

    typedef [uuid(9EDF27F6-10F1-42D1-84AA-71FF136D2DBA), version(1.0), helpstring("List of Tool Classes that can be added to the ToolList."), helpcontext(0x000004a4)]
    enum {
        tcCursor = 0,
        tcDragMarks = 1,
        tcAxisArrow = 2,
        tcDrawLine = 3,
        tcNearest = 4,
        tcColorband = 5,
        tcColorLine = 6,
        tcRotate = 7,
        tcMarksTip = 8,
        tcChartImage = 9,
        tcAnnotate = 10,
        tcPageNumber = 11
    } EToolClass;

    typedef [uuid(3B2B9812-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Style for Error Series"), helpcontext(0x00000365)]
    enum {
        essLeft = 0,
        essRight = 1,
        essLeftRight = 2,
        essTop = 3,
        essBottom = 4,
        essTopBottom = 5
    } EErrorSeriesStyle;

    typedef [uuid(3B2B9813-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Where in range Period is applied"), helpcontext(0x00000366)]
    enum {
        paFirst = 0,
        paCenter = 1,
        paLast = 2
    } EFunctionPeriodAlign;

    typedef [uuid(3B2B9814-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Applies Period to Axis range or points"), helpcontext(0x00000367)]
    enum {
        psNumPoints = 0,
        psRange = 1
    } EFunctionPeriodStyle;

    typedef [uuid(E23E11A3-394D-11D5-943A-006008A7EED4), version(1.0), helpstring("Types for Series Datasource when ADO sourced"), helpcontext(0x000006b6)]
    enum {
        dstAllRecords = 0,
        dstSingleRecord = 1
    } EDatasourceType;

    typedef [uuid(94763168-1618-48C8-8857-8743060507AF), version(1.0), helpstring("Default tzdBoth: Sets the direction of the zoom on a selected area. "), helpcontext(0x000004ac)]
    enum {
        tzdHorizontal = 0,
        tzdVertical = 1,
        tzdBoth = 2
    } ETeeZoomDirection;

    typedef [uuid(3B2B9816-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Use with Stream method to set Stream format"), helpcontext(0x000003ff)]
    enum {
        stJpeg = 0,
        stTeeTemplate = 1
    } EStreamType;

	// TODO: hand commented
    //typedef [uuid(105CD928-ED20-11D4-93AC-006008A7EED4), version(1.0), helpstring("Defines the bounderies of a 2D rectangle"), helpcontext(0x000004f6)]
    typedef
	struct tagTeeRect {
        [helpstring("Left boundery value."), helpcontext(0x000004f6)        
]
        long Left;
        [helpstring("Top boundery value."), helpcontext(0x000004f6)        
]
        long Top;
        [helpstring("Right boundery value."), helpcontext(0x000004f6)        
]
        long Right;
        [helpstring("Bottom boundery value."), helpcontext(0x000004f6)        
]
        long Bottom;
    } TeeRect;

    typedef [uuid(105CD92A-ED20-11D4-93AC-006008A7EED4), version(1.0), helpstring("Styles with which to display Bezier plot."), helpcontext(0x000004f7)]
    enum {
        bsWindows = 0,
        bsBezier3 = 1,
        bsBezier4 = 2
    } EBezierStyle;

    typedef [uuid(2A37A079-EDEE-11D4-93AD-006008A7EED4), version(1.0), helpstring("Use with Custom3DPaletteSeries.PaletteStyle. Selects Pale or Strong colour palette."), helpcontext(0x000004f8)]
    enum {
        psPale = 0,
        psStrong = 1
    } EPaletteStyle;

    typedef [uuid(5A8B401F-3AD3-417D-8DD0-E06CEAEC8B57), version(1.0), helpstring("Used to define shapestyle."), helpcontext(0x0000049d)]
    enum {
        fosRectangle = 0,
        fosRoundRectangle = 1
    } EChartObjectShapeStyle;


    typedef [uuid(BAD4C5C8-91BA-4D00-B2CD-E10841951CA5), version(1.0), helpstring("Constants for RSI function style"), helpcontext(0x000004d0)]
    enum {
        rsiOpenClose = 0,
        rsiClose = 1
    } ERSIStyle;

    typedef [uuid(F3588AC4-8EBE-4ED8-9F98-A7411B88DDFD), version(1.0), helpstring("Constants for Series stacking"), helpcontext(0x000004d1)]
    enum {
        cssNone = 0,
        cssOverlap = 1,
        cssStack = 2,
        cssStack100 = 3
    } ECustomSeriesStack;

    typedef [uuid(A17B07B0-4D75-413D-A621-5C10AFED9F74), version(1.0), helpstring("Constants for vertical alignment of Text"), helpcontext(0x000004d2)]
    enum {
        vaTop = 0,
        vaCenter = 1,
        vaBottom = 2
    } ETeeVertAlign;

    typedef [uuid(6B2467B8-1132-4543-862F-A54B1B55322B), version(1.0), helpstring("Constants for the alignment of Axis Labels "), helpcontext(0x000004d3)]
    enum {
        alDefault = 0,
        alOpposite = 1
    } EAxisLabelAlign;

    typedef [uuid(3B2B980F-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Allows transparency to display BackColor when using patterned brushes"), helpcontext(0x0000030f)]
    enum {
        cbmOpaque = 2,
        cbmTransparent = 1,
        cbmNone = 0
    } ECanvasBackMode;

    typedef [uuid(3B2B9810-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Alignment for Canvas TextOut"), helpcontext(0x0000031b)]
    enum {
        ctaLeft = 0,
        ctaCenter = 1,
        ctaRight = 2
    } ECanvasTextAlign;


    typedef [uuid(C1D7B309-34F6-467D-AA01-FB8443333F8B), version(1.0), helpstring("Style to draw 'end of line' Pen"), helpcontext(0x000006f4)]
    enum {
        esRound = 0,
        esSquare = 1,
        esFlat = 2
    } EPenEndStyle;

	// TODO: hand commented
    typedef //[uuid(FA0DD785-212A-11D6-9597-006008A7EED4), version(1.0), helpstring("Structure supports X,Y pair return types"), helpcontext(0x000006f9)]
    struct tagTeePoint2D {
        [helpcontext(0x000006f9)        
]
        long X;
        [helpcontext(0x000006f9)        
]
        long Y;
    } TeePoint2D;



	
	interface ITChart;
    dispinterface ITChartEvents;
    interface IPen;
    interface IBrush;
    interface IStrings;
    interface ICanvas;
    interface IAspect;
    interface IAxes;
    interface IAxis;
    interface IAxisLabels;
    interface IAxisTitle;
    interface ITeeCustomShape;
    interface IExport;
    interface IImport;
    interface IScroll;
    interface IZoom;
    interface IPrinter;
    interface IWall;
    interface IWalls;
    interface ITeeShapePosition;
    interface IGradient;
    interface IPage;
    interface IPanel;
    interface ISeries;
    interface ITeeFunction;
    interface IMarks;
    interface IValueList;
    interface IPointer;
    interface ICustomSeries;
    interface IAreaSeries;
    interface IPointSeries;
    interface ILineSeries;
    interface IFastLineSeries;
    interface ICircledSeries;
    interface IPieSeries;
    interface IBubbleSeries;
    interface IGanttSeries;
    interface IShapeSeries;
    interface IArrowSeries;
    interface ICustomBarSeries;
    interface IBarSeries;
    interface IHorizBarSeries;
    interface ICandleSeries;
    interface ICustomPolarSeries;
    interface ICustom3DSeries;
    interface IErrorBarSeries;
    interface IVolumeSeries;
    interface IAddFunction;
    interface ISubtractFunction;
    interface IMultiplyFunction;
    interface IDivideFunction;
    interface IAverageFunction;
    interface IHighFunction;
    interface ILowFunction;
    interface ICurveFittingFunction;
    interface IExpAvgFunction;
    interface IMovingAvgFunction;
    interface IChartFont;
    interface IMomentumFunction;
    interface IPieOtherSlice;
    interface IExplodedSlices;
    interface ICustom3DPaletteSeries;
    interface ICustom3DGridSeries;
    interface IBezierSeries;
    interface IRadarSeries;
    interface IErrorSeries;
    interface IPoint3DSeries;
    interface ISurfaceSeries;
    interface ISeriesMarksPositions;
    interface ISeriesMarkPosition;
    interface IPolarSeries;
    interface ICircleLabels;
    interface ITrendFunction;
    interface IStdDeviationFunction;
    interface ICumulativeFunction;
    interface IRSIFunction;
    interface ICountFunction;
    interface IEnvironment;
    interface ITeeLinked;
    dispinterface ITeeCommanderEvents;
    interface ITeeCommander;
    interface ITeeListBox;
    dispinterface ITeeListBoxEvents;
    interface ITeeEditor;
    interface ITeePreviewer;
    interface ITeePoint2D;
    interface ITeePoint3D;
    interface ITeeEditorShowPages;
    interface ITeeEditorOptions;
    interface ITeePreviewerOptions;
    interface ITeeOpenGL;
    interface IClockSeries;
    interface IWindRoseSeries;
    interface IBar3DSeries;
    interface IImageBarSeries;
    interface ITools;
    interface ICustomToolSeries;
    interface IDragMarksTool;
    interface ICustomToolAxis;
    interface IDrawLineTool;
    interface INearestTool;
    interface IColorBandTool;
    interface IColorLineTool;
    interface IRotateTool;
    interface IHorizLineSeries;
    interface IHighLowSeries;
    interface ITitles;
    interface IToolList;
    interface ILegendSymbol;
    interface ITeeFont;
    interface ITeeShadow;
    interface ITeePreviewPanel;
    dispinterface ITeePreviewPanelEvents;
    interface IChartGrid;
    dispinterface IChartGridEvents;
    interface IChartGridNavigator;
    interface IChartPageNavigator;
    interface IChartEditorPanel;
    interface IContourLevels;
    interface IContourLevel;
    interface IDonutSeries;
    interface ITriSurfaceSeries;
    interface ICustomBoxSeries;
    interface IHorizBoxPlotSeries;
    interface IHistogramSeries;
    interface IColorGridSeries;
    interface IBarJoinSeries;
    interface IWaterfallSeries;
    interface ISmithSeries;
    interface IPyramidSeries;
    interface IMapSeries;
    interface IContourSeries;
    interface IBoxPlotSeries;
    interface ITeePanelsList;
    interface ICursorTool;
    interface IDrawLineList;
    interface IDrawLine;
    interface IAxisArrowTool;
    interface IExportFormat;
    interface IJPEGExport;
    interface IPNGExport;
    interface IGIFExport;
    interface IPCXExport;
    interface IMetafileExport;
    interface IBMPExport;
    interface IMarksTipTool;
    interface IChartImageTool;
    interface IMomentumDivFunction;
    interface IExpTrendFunction;
    interface IExpMovAvgFunction;
    interface IRMSFunction;
    interface IMACDFunction;
    interface IStochasticFunction;
    interface IBollingerFunction;
    interface IADXFunction;
    interface INativeExport;
    interface IDataExport;
    interface IXMLExport;
    interface IXLSExport;
    interface IHTMLExport;
    interface ITextExport;
    interface IMapPolygonList;
    interface IMapPolygon;
    interface IFunnelSeries;
    interface ICalendarSeries;
    interface ICalendarCell;
    interface ICalendarCellUpper;
    interface IAnnotationTool;
    interface ILegend;
    interface IPageNumTool;
    interface ISeriesTextSource;
    interface ISeriesTextFields;
    interface ISeriesTextField;
    interface IValueLists;
    interface ITeeShapePanel;
    interface IChartGridRows;
    interface IChartGridCols;

    typedef [uuid(3B2B97E9-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Chart panel bevel"), helpcontext(0x00000269)]
    enum {
        bvNone = 0,
        bvLowered = 1,
        bvRaised = 2
    } EPanelBevel;

    typedef [uuid(3B2B97EA-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Chart panel border"), helpcontext(0x0000025f)]
    enum {
        bsNone = 0,
        bsSingle = 1
    } EBorderStyle;

    typedef [uuid(3B2B97EB-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for drag & drop"), helpcontext(0x000001d1)]
    enum {
        dmManual = 0,
        dmAutomatic = 1
    } EDragMode;

    typedef [uuid(3B2B97EC-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Pen style options"), helpcontext(0x00000261)]
    enum {
        psSolid = 0,
        psDash = 1,
        psDot = 2,
        psDashDot = 3,
        psDashDotDot = 4,
        psClear = 5,
        psInsideFrame = 6,
        psSmallDots = 7
    } EChartPenStyle;

    typedef [uuid(3B2B97ED-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Chart Legend options"), helpcontext(0x00000235)]
    enum {
        lsAuto = 0,
        lsSeries = 1,
        lsValues = 2,
        lsLastValues = 3
    } ELegendStyle;

    typedef [uuid(3B2B97EE-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for mouse events"), helpcontext(0x000002d2)]
    enum {
        mbLeft = 1,
        mbRight = 2,
        mbMiddle = 4
    } EMouseButton;

    typedef [uuid(3B2B97EF-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Chart drag and drop"), helpcontext(0x000001d0)]
    enum {
        dsDragEnter = 0,
        dsDragLeave = 1,
        dsDragMove = 2
    } EDragState;

    typedef [uuid(3B2B97F0-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Chart Panel Gradient"), helpcontext(0x00000230)]
    enum {
        gdTopBottom = 0,
        gdBottomTop = 1,
        gdLeftRight = 2,
        gdRightLeft = 3,
        gdFromCenter = 4,
        gdFromTopLeft = 5,
        gdFromBottomLeft = 6
    } EGradientDirection;

    typedef [uuid(3B2B97F1-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Chart Axis Labels styles"), helpcontext(0x000001cc)]
    enum {
        talAuto = 0,
        talNone = 1,
        talValue = 2,
        talMark = 3,
        talText = 4
    } EAxisLabelStyle;

    typedef [uuid(3B2B97F2-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Chart horizontal axis"), helpcontext(0x0000025e)]
    enum {
        aTopAxis = 0,
        aBottomAxis = 1,
        aBothHorizAxis = 2,
        aCustomHorizAxis = 3
    } EHorizontalAxis;

    typedef [uuid(3B2B97F3-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Brush styles"), helpcontext(0x00000266)]
    enum {
        bsSolid = 0,
        bsClear = 1,
        bsHorizontal = 2,
        bsVertical = 3,
        bsFDiagonal = 4,
        bsBDiagonal = 5,
        bsCross = 6,
        bsDiagCross = 7,
        bsFill80 = 8,
        bsFill60 = 9,
        bsFill40 = 10,
        bsFill20 = 11,
        bsFill10 = 12,
        bsZigZag = 13,
        bsVertSmall = 14,
        bsHorizSmall = 15,
        bsDiagSmall = 16,
        bsBackDiagSmall = 17,
        bsCrossSmall = 18,
        bsBackCrossSmall = 19
    } EBrushStyle;

    typedef [uuid(3B2B97F4-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Area Series"), helpcontext(0x0000023e)]
    enum {
        maNone = 0,
        maStacked = 1,
        maStacked100 = 2
    } EMultiArea;

    typedef [uuid(3B2B97F5-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Bar and Horizontal Bar Series"), helpcontext(0x0000023f)]
    enum {
        mbNone = 0,
        mbSide = 1,
        mbStacked = 2,
        mbStacked100 = 3,
        mbSideAll = 4
    } EMultiBar;

    typedef [uuid(3B2B97F7-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Series Marks styles"), helpcontext(0x00000252)]
    enum {
        smsValue = 0,
        smsPercent = 1,
        smsLabel = 2,
        smsLabelPercent = 3,
        smsLabelValue = 4,
        smsLegend = 5,
        smsPercentTotal = 6,
        smsLabelPercentTotal = 7,
        smsXValue = 8,
        smsXY = 9
    } EMarkStyle;

    typedef [uuid(3B2B97F8-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Bar Series styles"), helpcontext(0x000001d2)]
    enum {
        bsRectangle = 0,
        bsPyramid = 1,
        bsInvPyramid = 2,
        bsCilinder = 3,
        bsEllipse = 4,
        bsArrow = 5,
        bsRectGradient = 6,
        bsCone = 7
    } EBarStyle;

    typedef [uuid(3B2B97F9-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for chart scrolling"), helpcontext(0x00000162)]
    enum {
        pmNone = 0,
        pmHorizontal = 1,
        pmVertical = 2,
        pmBoth = 3
    } EChartScroll;

    typedef [uuid(3B2B97FA-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Chart Legend Alignment"), helpcontext(0x00000234)]
    enum {
        laLeft = 0,
        laRight = 1,
        laTop = 2,
        laBottom = 3
    } ELegendAlignment;

    typedef [uuid(3B2B97FB-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Chart Legend TextStyle"), helpcontext(0x00000236)]
    enum {
        ltsPlain = 0,
        ltsLeftValue = 1,
        ltsRightValue = 2,
        ltsLeftPercent = 3,
        ltsRightPercent = 4,
        ltsXValue = 5,
        ltsValue = 6,
        ltsPercent = 7,
        ltsXAndValue = 8,
        ltsXAndPercent = 9
    } ELegendTextStyle;

    typedef [uuid(3B2B97FC-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Axis type"), helpcontext(0x00000265)]
    enum {
        atLeft = 0,
        atTop = 1,
        atRight = 2,
        atBottom = 3,
        atDepth = 4,
        atCustom = 5
    } EAxisType;

    typedef [uuid(3B2B97FD-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for date-time Axis Increment"), helpcontext(0x00000221)]
    enum {
        dtOneSecond = 1,
        dtFiveSeconds = 2,
        dtTenSeconds = 3,
        dtFifteenSeconds = 4,
        dtThirtySeconds = 5,
        dtOneMinute = 6,
        dtFiveMinutes = 7,
        dtTenMinutes = 8,
        dtFifteenMinutes = 9,
        dtThirtyMinutes = 10,
        dtOneHour = 11,
        dtTwoHours = 12,
        dtSixHours = 13,
        dtTwelveHours = 14,
        dtOneDay = 15,
        dtTwoDays = 16,
        dtThreeDays = 17,
        dtOneWeek = 18,
        dtHalfMonth = 19,
        dtOneMonth = 20,
        dtTwoMonths = 21,
        dtThreeMonths = 22,
        dtFourMonths = 23,
        dtOneMillisecond = 0,
        dtSixMonths = 24,
        dtOneYear = 25
    } EDateTimeStep;

    typedef [uuid(3B2B97FE-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for JPEG export"), helpcontext(0x00000268)]
    enum {
        jpegBestQuality = 0,
        jpegBestSpeed = 1
    } EJPEGPerformance;

    typedef [uuid(3B2B97FF-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Global constants"), helpcontext(0x000001cf)]
    enum {
        clTeeColor = 536870912,
        clNone = 536870911
    } EConstants;

    typedef [uuid(3B2B9800-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Function types"), helpcontext(0x00000267)]
    enum {
        tfCopy = 0,
        tfAdd = 1,
        tfSubtract = 2,
        tfMultiply = 3,
        tfDivide = 4,
        tfAverage = 5,
        tfHigh = 6,
        tfLow = 7,
        tfMovavg = 8,
        tfExpavg = 9,
        tfMomentum = 10,
        tfCurveFit = 11,
        tfRSI = 12,
        tfTrend = 13,
        tfStdDeviation = 14,
        tfCumulative = 15,
        tfCount = 16,
        tfExpTrend = 17,
        tfExpMovAvg = 18,
        tfMomentumDiv = 19,
        tfRMS = 20,
        tfMACD = 21,
        tfStochastic = 22,
        tfBollinger = 23,
        tfADX = 24
    } EFunctionType;

    typedef [uuid(3B2B9801-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Shape Series XYStyle"), helpcontext(0x00000263)]
    enum {
        xysPixels = 0,
        xysAxis = 1,
        xysAxisOrigin = 2
    } EShapeXYStyle;

    typedef [uuid(3B2B9802-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Candle Series Style"), helpcontext(0x000001d9)]
    enum {
        csCandleBar = 0,
        csCandleStick = 1,
        csOpenClose = 2
    } ECandleStyle;

    typedef [uuid(3B2B9803-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Error Bar Series width"), helpcontext(0x00000228)]
    enum {
        ewuPercent = 0,
        ewuPixels = 1
    } EErrorWidthUnits;

    typedef [uuid(3B2B9804-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Series Values order"), helpcontext(0x00000201)]
    enum {
        loNone = 0,
        loAscending = 1,
        loDescending = 2
    } EValueListOrder;

    typedef [uuid(3B2B9805-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Shape Series style"), helpcontext(0x0000020c)]
    enum {
        chasRectangle = 0,
        chasCircle = 1,
        chasVertLine = 2,
        chasHorizLine = 3,
        chasTriangle = 4,
        chasInvertTriangle = 5,
        chasLine = 6,
        chasDiamond = 7,
        chasCube = 8,
        chasCross = 9,
        chasDiagCross = 10,
        chasStar = 11,
        chasPyramid = 12,
        chasInvertPyramid = 13
    } EShapeStyle;

    typedef [uuid(3B2B9806-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Series type"), helpcontext(0x00000262)]
    enum {
        scLine = 0,
        scBar = 1,
        scHorizBar = 2,
        scArea = 3,
        scPoint = 4,
        scPie = 5,
        scFastLine = 6,
        scShape = 7,
        scGantt = 8,
        scBubble = 9,
        scArrow = 10,
        scCandle = 11,
        scPolar = 12,
        scSurface = 13,
        scVolume = 14,
        scErrorBar = 15,
        scBezier = 16,
        scContour = 17,
        scError = 18,
        scPoint3D = 19,
        scRadar = 20,
        scClock = 21,
        scWindRose = 22,
        scBar3D = 23,
        scImageBar = 24,
        scDonut = 25,
        scTriSurface = 26,
        scBox = 27,
        scHorizBox = 28,
        scHistogram = 29,
        scColorGrid = 30,
        scBarJoin = 31,
        scHighLow = 32,
        scWaterfall = 33,
        scSmith = 34,
        scPyramid = 35,
        scMap = 36,
        scHorizLine = 37,
        scFunnel = 38,
        scCalendar = 39
    } ESeriesClass;

    typedef [uuid(3B2B9807-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for paper orientation"), helpcontext(0x00000257)]
    enum {
        poPortrait = 0,
        poLandscape = 1
    } EPrinterOrientation;

    typedef [uuid(3B2B9808-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Series Pointer Style"), helpcontext(0x00000258)]
    enum {
        psRectangle = 0,
        psCircle = 1,
        psTriangle = 2,
        psDownTriangle = 3,
        psCross = 4,
        psDiagCross = 5,
        psStar = 6,
        psDiamond = 7,
        psSmallDot = 8
    } EPointerStyle;

    typedef [uuid(3B2B9809-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Curve Fitting function"), helpcontext(0x0000026d)]
    enum {
        cfPolynomial = 0,
        cfLogarithmic = 1,
        cfExponential = 2
    } ETypeFitting;

    typedef [uuid(3B2B980A-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Chart background image"), helpcontext(0x0000026a)]
    enum {
        pbmStretch = 0,
        pbmTile = 1,
        pbmCenter = 2
    } EBackImageMode;

    typedef [uuid(3B2B980B-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for text alignment"), helpcontext(0x00000264)]
    enum {
        aLeft = 0,
        aRight = 1,
        aCenter = 2
    } ETextAlignment;

    typedef [uuid(3B2B980C-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Chart vertical Axis"), helpcontext(0x000000cb)]
    enum {
        aLeftAxis = 0,
        aRightAxis = 1,
        aBothVertAxis = 2,
        aCustomVertAxis = 3
    } EVerticalAxis;

    typedef [uuid(3B2B980D-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for mouse and keyboard events"), helpcontext(0x000002d3)]
    enum {
        ssShift = 1,
        ssAlt = 2,
        ssCtrl = 4,
        ssNone = 0
    } EShiftState;

    typedef [uuid(3B2B980E-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Constants for Chart Header and Footer text alignment"), helpcontext(0x00000260)]
    enum {
        taLeftJustify = 0,
        taRightJustify = 1,
        taCenter = 2
    } ETitleAlignment;

    [
      odl,
      uuid(B6C10485-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Dual Dispatch interface for TeeChart Pro Activex Control"),
      helpcontext(0x000001da),
      hidden,
      dual,
      oleautomation
    ]
    interface ITChart : IDispatch {
        [id(0x00000001), propget, helpstring("General Chart viewing properties"), helpcontext(0x00000168)]
        HRESULT Aspect([out, retval] IAspect** Aspect);
        [id(0x00000002), propget, helpstring("Access to the 4 axes"), helpcontext(0x00000052)]
        HRESULT Axis([out, retval] IAxes** Axis);
        [id(0x00000003), propget, helpstring("Drawing attributes and functions"), helpcontext(0x00000001)]
        HRESULT Canvas([out, retval] ICanvas** Canvas);
        [id(0x00000004), propget, helpstring("Restrict the drawing of Series points to within Chart boundaries"), helpcontext(0x0000009b)]
        HRESULT ClipPoints([out, retval] VARIANT_BOOL* ClipPoints);
        [id(0x00000004), propput, helpstring("Restrict the drawing of Series points to within Chart boundaries"), helpcontext(0x0000009b)]
        HRESULT ClipPoints([in] VARIANT_BOOL ClipPoints);
        [id(0x00000005), propget, helpstring("Defines the Chart cursor"), helpcontext(0x000000ad)]
        HRESULT Cursor([out, retval] short* Cursor);
        [id(0x00000005), propput, helpstring("Defines the Chart cursor"), helpcontext(0x000000ad)]
        HRESULT Cursor([in] short Cursor);
        [id(0x00000006), propget, helpstring("Changes the cursor image presented when the control is being dragged."), helpcontext(0x000001e0)]
        HRESULT DragCursor([out, retval] short* DragCursor);
        [id(0x00000006), propput, helpstring("Changes the cursor image presented when the control is being dragged."), helpcontext(0x000001e0)]
        HRESULT DragCursor([in] short DragCursor);
        [id(0x00000007), propget, helpstring("Controls when the user can drag the control."), helpcontext(0x000001de)]
        HRESULT DragMode([out, retval] EDragMode* DragMode);
        [id(0x00000007), propput, helpstring("Controls when the user can drag the control."), helpcontext(0x000001de)]
        HRESULT DragMode([in] EDragMode DragMode);
        [id(0x00000008), propget, helpstring("Enables/Disables the TChart."), helpcontext(0x000001e1)]
        HRESULT Enabled([out, retval] VARIANT_BOOL* Enabled);
        [id(0x00000008), propput, helpstring("Enables/Disables the TChart."), helpcontext(0x000001e1)]
        HRESULT Enabled([in] VARIANT_BOOL Enabled);
        [id(0x00000009), propget, helpstring("Chart exporting methods"), helpcontext(0x000001ea)]
        HRESULT Export([out, retval] IExport** Export);
        [id(0x0000000a), propget, helpstring("Chart Footer text and attributes"), helpcontext(0x000000d9)]
        HRESULT Footer([out, retval] ITitles** Footer);
        [id(0x0000000b), propget, helpstring("Pen used to draw a frame around chart axis"), helpcontext(0x000000de)]
        HRESULT Frame([out, retval] IPen** Frame);
        [id(0x00000016), propget, helpstring("Chart Header text and attributes"), helpcontext(0x00000289)]
        HRESULT Header([out, retval] ITitles** Header);
        [id(0x0000000c), propget, helpstring("Height of overall Chart panel"), helpcontext(0x000001e4)]
        HRESULT Height([out, retval] long* Height);
        [id(0x0000000c), propput, helpstring("Height of overall Chart panel"), helpcontext(0x000001e4)]
        HRESULT Height([in] long Height);
        [id(0x0000000d), propget, helpstring("Chart importing methods"), helpcontext(0x000001e7)]
        HRESULT Import([out, retval] IImport** Import);
        [id(0x0000000e), propget, helpstring("Left position of overall Chart panel"), helpcontext(0x000001e6)]
        HRESULT Left([out, retval] long* Left);
        [id(0x0000000e), propput, helpstring("Left position of overall Chart panel"), helpcontext(0x000001e6)]
        HRESULT Left([in] long Left);
        [id(0x0000000f), propget, helpstring("Rectangle of Series Titles or Values"), helpcontext(0x00000110)]
        HRESULT Legend([out, retval] ILegend** Legend);
        [id(0x00000010), propget, helpstring("Page formatting of multipage Charts"), helpcontext(0x0000016b)]
        HRESULT Page([out, retval] IPage** Page);
        [id(0x00000011), propget, helpstring("Access to Chart Panel attributes"), helpcontext(0x00000172)]
        HRESULT Panel([out, retval] IPanel** Panel);
        [id(0x00000012), propget, helpstring("Chart printing methods and properties"), helpcontext(0x000001ed)]
        HRESULT Printer([out, retval] IPrinter** Printer);
        [id(0x00000013), propget, helpstring("Properties to control Chart scroll"), helpcontext(0x00000163)]
        HRESULT Scroll([out, retval] IScroll** Scroll);
        [id(0x00000014), propget, hidden, helpstring("Deprecated. To support prior versions only - Access Series Collection"), helpcontext(0x000001a3)]
        HRESULT aSeries(
                        [in] long SeriesIndex, 
                        [out, retval] ISeries** Index);
        [id(0x00000015), propget, helpstring("Number of Series in Chart"), helpcontext(0x000001a6)]
        HRESULT SeriesCount([out, retval] long* SeriesCount);
        [id(0x00000017), propget, helpstring("Overall Chart Panel Top position"), helpcontext(0x000001e5)]
        HRESULT Top([out, retval] long* Top);
        [id(0x00000017), propput, helpstring("Overall Chart Panel Top position"), helpcontext(0x000001e5)]
        HRESULT Top([in] long Top);
        [id(0x00000018), propget, helpstring("Controls the visibility of the control at runtime."), helpcontext(0x000001e2)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x00000018), propput, helpstring("Controls the visibility of the control at runtime."), helpcontext(0x000001e2)]
        HRESULT Visible([in] VARIANT_BOOL Visible);
        [id(0x00000019), propget, helpstring("The Chart bounding box sides"), helpcontext(0x0000015a)]
        HRESULT Walls([out, retval] IWalls** Walls);
        [id(0x0000001a), propget, helpstring("Overall Chart Panel Width"), helpcontext(0x000001e3)]
        HRESULT Width([out, retval] long* Width);
        [id(0x0000001a), propput, helpstring("Overall Chart Panel Width"), helpcontext(0x000001e3)]
        HRESULT Width([in] long Width);
        [id(0x0000001b), propget, helpstring("Properties to control Chart zoom"), helpcontext(0x0000015e)]
        HRESULT Zoom([out, retval] IZoom** Zoom);
        [id(0xfffffdd8), helpstring("About TeeChart Pro Activex..."), helpcontext(0x0000001f)]
        HRESULT AboutBox();
        [id(0x0000001c), helpstring("Adds a new Series to the Chart"), helpcontext(0x00000021)]
        HRESULT AddSeries(
                        [in] ESeriesClass SeriesClass, 
                        [out, retval] long* Value);
        [id(0x0000001d), helpstring("Changes an existing Series from one type to another"), helpcontext(0x00000020)]
        HRESULT ChangeSeriesType(
                        [in] long SeriesIndex, 
                        [in] ESeriesClass NewSeriesType);
        [id(0x0000001e), helpstring("Duplicates a Series and values"), helpcontext(0x0000030c)]
        HRESULT CloneSeries(
                        [in] long SourceSeriesIndex, 
                        [out, retval] long* SeriesIndex);
        [id(0x0000001f), helpstring("Draws Chart on a custom Windows handle DC (device context)"), helpcontext(0x000000bd)]
        HRESULT Draw(
                        [in] long DC, 
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Right, 
                        [in] long Bottom);
        [id(0x00000020), helpstring("Interchanges Series Z positions"), helpcontext(0x000000cd)]
        HRESULT ExchangeSeries(
                        [in] long Series1, 
                        [in] long Series2);
        [id(0x00000021), helpstring("Returns the corresponding floating value for a DateTimeStep constant"), helpcontext(0x000000e4)]
        HRESULT GetDateTimeStep(
                        [in] EDateTimeStep DateTimeStep, 
                        [out, retval] double* Step);
        [id(0x00000022), helpstring("Gets as yet unused Series Color from Default Color Palette"), helpcontext(0x000000e5)]
        HRESULT GetFreeSeriesColor(
                        [in] VARIANT_BOOL CheckBackgroundColor, 
                        [out, retval] OLE_COLOR* CheckBackground);
        [id(0x00000023), helpstring("Series associated with Axis for labelling"), helpcontext(0x000000e6)]
        HRESULT GetLabelsSeries(
                        [in] EAxisType DestAxis, 
                        [out, retval] ISeries** Axis);
        [id(0x00000024), helpstring("TRUE if AColor is not used by a Series"), helpcontext(0x000000fe)]
        HRESULT IsFreeSeriesColor(
                        [in] OLE_COLOR AColor, 
                        [in] VARIANT_BOOL CheckBackgroundColor, 
                        [out, retval] VARIANT_BOOL* CheckBackground);
        [id(0x00000025), helpstring("Removes all Series from Chart"), helpcontext(0x00000194)]
        HRESULT RemoveAllSeries();
        [id(0x00000026), helpstring("Removes SeriesIndexth Series from the Chart"), helpcontext(0x00000195)]
        HRESULT RemoveSeries([in] long SeriesIndex);
        [id(0x00000027), helpstring("Forces Chart screen update"), helpcontext(0x00000196)]
        HRESULT Repaint();
        [id(0x00000028), helpstring("Returns the Series title for the Legend"), helpcontext(0x000001a8)]
        HRESULT SeriesTitleLegend(
                        [in] long ASeriesIndex, 
                        [out, retval] BSTR* SeriesIndex);
        [id(0x00000029), helpstring("Runs the Chart editor dialog"), helpcontext(0x000001b0)]
        HRESULT ShowEditor([optional, defaultvalue(-1)] long SeriesIndex);
        [id(0x0000002a), helpstring("Call to stop processing mouse clicks in OnClick... events"), helpcontext(0x00000084)]
        HRESULT StopMouse();
        [id(0x0000002b), propget, helpstring("Enables/Disables the TChart timer."), helpcontext(0x000002ea)]
        HRESULT TimerEnabled([out, retval] VARIANT_BOOL* TimerEnabled);
        [id(0x0000002b), propput, helpstring("Enables/Disables the TChart timer."), helpcontext(0x000002ea)]
        HRESULT TimerEnabled([in] VARIANT_BOOL TimerEnabled);
        [id(0x0000002c), propget, helpstring("Sets the timer interval (milliseconds)."), helpcontext(0x000002eb)]
        HRESULT TimerInterval([out, retval] long* TimerInterval);
        [id(0x0000002c), propput, helpstring("Sets the timer interval (milliseconds)."), helpcontext(0x000002eb)]
        HRESULT TimerInterval([in] long TimerInterval);
        [id(0x0000002d), propget, helpstring("Permits disable of Chart Repaint"), helpcontext(0x0000032e)]
        HRESULT AutoRepaint([out, retval] VARIANT_BOOL* Value);
        [id(0x0000002d), propput, helpstring("Permits disable of Chart Repaint"), helpcontext(0x0000032e)]
        HRESULT AutoRepaint([in] VARIANT_BOOL Value);
        [id(0x0000002e), helpstring("Edit Indexth Chart Series"), helpcontext(0x00000381)]
        HRESULT EditOneSeries([in] long SeriesIndex);
        [id(0x0000002f), propget, helpstring("TeeChart environment variables"), helpcontext(0x0000038c)]
        HRESULT Environment([out, retval] IEnvironment** Value);
        [id(0x00000030), propget, helpstring("For internal use to connect to other Tee controls"), helpcontext(0x00000396)]
        HRESULT ChartLink([out, retval] long* Value);
        [id(0x00000031), propget, helpstring("Returns the current mouse position in pixels relative to the Chart panel origin"), helpcontext(0x000003f6)]
        HRESULT MousePosition([out, retval] ITeePoint2D** Value);
        [id(0x00000032), helpstring("Permits location of Chart painted output within Chart Panel"), helpcontext(0x000003fb)]
        HRESULT ChartRect(
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Right, 
                        [in] long Bottom);
        [id(0x00000033), propget, helpstring("Accesses Tool attributes."), helpcontext(0x00000400)]
        HRESULT Tools([out, retval] IToolList** Value);
        [id(0x00000034), propget, helpstring("Chart SubHeader text and attributes."), helpcontext(0x00000401)]
        HRESULT SubHeader([out, retval] ITitles** Value);
        [id(0x00000035), propget, helpstring("Chart SubFooter text and attributes."), helpcontext(0x00000402)]
        HRESULT SubFooter([out, retval] ITitles** Value);
        [id(0x00000037), helpstring("Clears Chart of all data and modifications"), helpcontext(0x00000403)]
        HRESULT ClearChart();
        [id(0x00000036), helpstring("Refreshes the Series Data"), helpcontext(0x0000061e)]
        HRESULT RefreshData();
        [id(0x00000038)]
        HRESULT Series(
                        [in] long SeriesIndex, 
                        [out, retval] ISeries** Index);
    };

    [
      uuid(B6C10487-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Events interface for TeeChart Pro Activex Control"),
      helpcontext(0x000001da)
    ]
    dispinterface ITChartEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Called when chart has finished drawing. Use to custom draw."), helpcontext(0x0000013f)]
            void OnAfterDraw();
            [id(0x0000001d), helpstring("Called before Series are displayed (after axis are shown)"), helpcontext(0x00000064)]
            void OnBeforeDrawSeries();
            [id(0x0000001e), helpstring("Called before Axes are displayed"), helpcontext(0x00000063)]
            void OnBeforeDrawAxes();
            [id(0x00000003), helpstring("Called when mouse clicking the Chart"), helpcontext(0x0000013e)]
            void OnClick();
            [id(0x00000004), helpstring("Called when mouse clicking near a Chart axis"), helpcontext(0x00000142)]
            void OnClickAxis(
                            [in] long Axis, 
                            [in] EMouseButton Button, 
                            [in] EShiftState Shift, 
                            [in] long X, 
                            [in] long Y);
            [id(0x00000005), helpstring("Called when mouse is clicked on an empty background Chart area"), helpcontext(0x00000143)]
            void OnClickBackground(
                            [in] EMouseButton Button, 
                            [in] EShiftState Shift, 
                            [in] long X, 
                            [in] long Y);
            [id(0x00000006), helpstring("Called when mouse clicking the Chart Legend"), helpcontext(0x00000144)]
            void OnClickLegend(
                            [in] EMouseButton Button, 
                            [in] EShiftState Shift, 
                            [in] long X, 
                            [in] long Y);
            [id(0x00000007), helpstring("Called when mouse clicking a Series point"), helpcontext(0x00000146)]
            void OnClickSeries(
                            [in] long SeriesIndex, 
                            [in] long ValueIndex, 
                            [in] EMouseButton Button, 
                            [in] EShiftState Shift, 
                            [in] long X, 
                            [in] long Y);
            [id(0x00000008), helpstring("Called when double clicking a Chart"), helpcontext(0x00000147)]
            void OnDblClick();
            [id(0x00000009), helpstring("Occurs when the user drops an object being dragged. "), helpcontext(0x0000013d)]
            void OnDragDrop(
                            [in] long X, 
                            [in] long Y);
            [id(0x0000000a), helpstring("Occurs when the user drags an object over a TChart."), helpcontext(0x0000013c)]
            void OnDragOver(
                            [in] long X, 
                            [in] long Y, 
                            [in] EDragState State, 
                            [in, out] VARIANT_BOOL* Accept);
            [id(0x0000000b), helpstring("Occurs when the dragging of an object ends, either by dropping the object or by canceling the dragging."), helpcontext(0x0000013b)]
            void OnEndDrag(
                            [in] long X, 
                            [in] long Y);
            [id(0x0000000c), helpstring("Called when mouse cursor goes into Chart"), helpcontext(0x0000013a)]
            void OnEnter();
            [id(0x0000000d), helpstring("Called when mouse cursor moves out of Chart"), helpcontext(0x00000139)]
            void OnExit();
            [id(0x0000000e), helpstring("Use to specify custom axis label's text"), helpcontext(0x00000149)]
            void OnGetAxisLabel(
                            [in] long Axis, 
                            [in] long SeriesIndex, 
                            [in] long ValueIndex, 
                            [in, out] BSTR* LabelText);
            [id(0x00000010), helpstring("Use to specify Legend dimensions and position"), helpcontext(0x0000014c)]
            void OnGetLegendRect(
                            [in, out] long* Left, 
                            [in, out] long* Top, 
                            [in, out] long* Right, 
                            [in, out] long* Bottom);
            [id(0x00000012), helpstring("Called when axis are drawing. Use to specify custom axis labels"), helpcontext(0x0000014f)]
            void OnGetNextAxisLabel(
                            [in] long Axis, 
                            [in] long LabelIndex, 
                            [in, out] double* LabelValue, 
                            [in, out] VARIANT_BOOL* MoreLabels);
            [id(0x00000013), helpstring("Called when user presses mouse button"), helpcontext(0x00000138)]
            void OnMouseDown(
                            [in] EMouseButton Button, 
                            [in] EShiftState Shift, 
                            [in] long X, 
                            [in] long Y);
            [id(0x00000014), helpstring("Called while user is moving the mouse"), helpcontext(0x00000137)]
            void OnMouseMove(
                            [in] EShiftState Shift, 
                            [in] long X, 
                            [in] long Y);
            [id(0x00000015), helpstring("Called when user depresses mouse button"), helpcontext(0x00000136)]
            void OnMouseUp(
                            [in] EMouseButton Button, 
                            [in] EShiftState Shift, 
                            [in] long X, 
                            [in] long Y);
            [id(0x00000016), helpstring("Called when Chart.Page.Current changes"), helpcontext(0x00000151)]
            void OnPageChange();
            [id(0x00000017), helpstring("Called when Chart is resized"), helpcontext(0x00000135)]
            void OnResize();
            [id(0x00000018), helpstring("Called when Chart is scrolled"), helpcontext(0x00000153)]
            void OnScroll();
            [id(0x00000019), helpstring("Occurs when the user begins to drag the control or an object it contains by left-clicking on the control and holding the mouse button down."), helpcontext(0x00000134)]
            void OnStartDrag();
            [id(0x0000001a), helpstring("Called when Chart is unzoomed (drag from bottom/right to top/left)"), helpcontext(0x00000154)]
            void OnUndoZoom();
            [id(0x0000001b), helpstring("Called when Chart is zoomed (draw from top/left to bottom/right)"), helpcontext(0x00000155)]
            void OnZoom();
            [id(0x00000002), helpstring("Use to allow or cancel manual mouse scrolling"), helpcontext(0x00000140)]
            void OnAllowScroll(
                            [in] EAxisType Axis, 
                            [in, out] double* AMin, 
                            [in, out] double* AMax, 
                            [in, out] VARIANT_BOOL* AllowScroll);
            [id(0x0000000f), helpstring("Use to specify each Legend item position"), helpcontext(0x0000014b)]
            void OnGetLegendPos(
                            [in] long ItemIndex, 
                            [in, out] long* X, 
                            [in, out] long* Y, 
                            [in, out] long* XColor);
            [id(0x00000011), helpstring("Use to specify each Legend item text"), helpcontext(0x0000014d)]
            void OnGetLegendText(
                            [in] long LegendStyle, 
                            [in] long ValueIndex, 
                            [in, out] BSTR* LegendText);
            [id(0x0000001c), helpstring("Called after a database record has been retrieved and added to Series"), helpcontext(0x00000152)]
            void OnDatabaseRecord(
                            [in] long SeriesIndex, 
                            [in] long Index, 
                            [in, out] VARIANT_BOOL* StopRetrieve);
            [id(0x0000001f), helpstring("Called at every TimerInterval / TimerEnabled"), helpcontext(0x000002e9)]
            void OnTimer();
            [id(0x00000020), helpstring("Offers access to modify Point's Mark Text"), helpcontext(0x000003de)]
            void OnGetSeriesMark(
                            [in] long SeriesIndex, 
                            [in] long ValueIndex, 
                            [in, out] BSTR* MarkText);
            [id(0x00000021), helpstring("Offers access to modify Pointer.Style"), helpcontext(0x000003e9)]
            void OnGetSeriesPointerStyle(
                            [in] long SeriesIndex, 
                            [in] long ValueIndex, 
                            [in, out] EPointerStyle* AStyle);
            [id(0x00000022), helpstring("Use to set each Level value for a Contour Series"), helpcontext(0x000003ea)]
            void OnGetSeriesContourLevel(
                            [in] long SeriesIndex, 
                            [in] long LevelIndex, 
                            [in, out] double* LevelValue, 
                            [in, out] OLE_COLOR* LevelColor);
            [id(0x00000027), helpstring("Called before Walls are displayed"), helpcontext(0x000003f3)]
            void OnBeforeDrawChart();
            [id(0x00000024), helpstring("Called just before Chart Series are painted"), helpcontext(0x000003fc)]
            void OnSeriesBeforeDrawValues([in] long SeriesIndex);
            [id(0x00000023), helpstring("Called just after Chart Series are painted"), helpcontext(0x00000404)]
            void OnSeriesAfterDrawValues([in] long SeriesIndex);
            [id(0x00000025), helpstring("Modify ToolTip item text"), helpcontext(0x00000405)]
            void OnMarkTipToolGetText(
                            [in] long Tool, 
                            [in, out] BSTR* Text);
            [id(0x00000028), helpstring("Called when Tool moved"), helpcontext(0x0000061f)]
            void OnCursorToolChange(
                            [in] long Tool, 
                            [in] long X, 
                            [in] long Y, 
                            [in] double XVal, 
                            [in] double YVal, 
                            [in] long Series, 
                            [in] long ValueIndex);
            [id(0x00000029), helpstring("Called when DrawLine Tool line is dragged"), helpcontext(0x00000620)]
            void OnDrawLineToolLineDrag();
            [id(0x0000002a), helpstring("Called when new DrawLine Tool line is drawn"), helpcontext(0x00000621)]
            void OnDrawLineToolNewLine();
            [id(0x0000002b), helpstring("Called when DrawLine Tool line has been dragged"), helpcontext(0x00000622)]
            void OnDrawLineToolDraggedLine();
            [id(0x0000002c), helpstring("Called when DrawLine Tool line selected"), helpcontext(0x00000623)]
            void OnDrawLineToolSelectLine();
            [id(0x00000026), helpstring("Called when Calender Series cell focus is changed"), helpcontext(0x00000624)]
            void OnCalendarSeriesChange(
                            [in] long Series, 
                            [in] double Value);
            [id(0x0000002d), helpstring("Called before adding a Series point"), helpcontext(0x000006b9)]
            void OnSeriesBeforeAdd(
                            [in] long SeriesIndex, 
                            [in, out] VARIANT_BOOL* MoreValues);
    };

    [
      uuid(B6C10489-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("TeeChart Pro Activex control v5"),
      helpcontext(0x000001da),
      control
    ]
    coclass TChart {
        [default] interface ITChart;
        [default, source] dispinterface ITChartEvents;
    };

    [
      odl,
      uuid(B6C1048B-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Drawing properties for frames and borders"),
      helpcontext(0x00000202),
      dual,
      oleautomation
    ]
    interface IPen : IDispatch {
        [id(0x00000001), propget, helpstring("Pen color"), helpcontext(0x000000a1)]
        HRESULT Color([out, retval] OLE_COLOR* Color);
        [id(0x00000001), propput, helpstring("Pen color"), helpcontext(0x000000a1)]
        HRESULT Color([in] OLE_COLOR Color);
        [id(0x00000002), propget, helpstring("Pen width in pixels"), helpcontext(0x000001bd)]
        HRESULT Width([out, retval] long* Width);
        [id(0x00000002), propput, helpstring("Pen width in pixels"), helpcontext(0x000001bd)]
        HRESULT Width([in] long Width);
        [id(0x00000003), propget, helpstring("Pen style (solid, dash, dot, etc)"), helpcontext(0x000002a8)]
        HRESULT Style([out, retval] EChartPenStyle* Style);
        [id(0x00000003), propput, helpstring("Pen style (solid, dash, dot, etc)"), helpcontext(0x000002a8)]
        HRESULT Style([in] EChartPenStyle Style);
        [id(0x00000004), propget, helpstring("Use / don't use this pen for drawing"), helpcontext(0x000002b2)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x00000004), propput, helpstring("Use / don't use this pen for drawing"), helpcontext(0x000002b2)]
        HRESULT Visible([in] VARIANT_BOOL Visible);
		[id(0x00000005), propget, helpstring("Pen end detail style"), helpcontext(0x000006f3)]
        HRESULT EndStyle([out, retval] EPenEndStyle* Value);
        [id(0x00000005), propput, helpstring("Pen end detail style"), helpcontext(0x000006f3)]
        HRESULT EndStyle([in] EPenEndStyle Value);
    };

    [
      odl,
      uuid(B6C1048D-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Drawing filling properties"),
      helpcontext(0x00000164),
      dual,
      oleautomation
    ]
    interface IBrush : IDispatch {
        [id(0x00000001), propget, helpstring("The color used to fill drawing shapes"), helpcontext(0x000001ac)]
        HRESULT Color([out, retval] OLE_COLOR* Color);
        [id(0x00000001), propput, helpstring("The color used to fill drawing shapes"), helpcontext(0x000001ac)]
        HRESULT Color([in] OLE_COLOR Color);
        [id(0x00000002), propget, helpstring("The pattern style used to fill drawing shapes"), helpcontext(0x000001bc)]
        HRESULT Style([out, retval] EBrushStyle* Style);
        [id(0x00000002), propput, helpstring("The pattern style used to fill drawing shapes"), helpcontext(0x000001bc)]
        HRESULT Style([in] EBrushStyle Style);
        [id(0x0000000e), helpstring("Defines the image to be displayed as pattern for Brush area"), helpcontext(0x00000560)]
        HRESULT LoadImage([in] BSTR FileName);
        [id(0x00000010), helpstring("Assign bitmap to Brush"), helpcontext(0x000006c2)]
        HRESULT AssignImage([in] long ImageHandle);
        [id(0x00000004), helpstring("Clears the Brush image"), helpcontext(0x000006c1)]
        HRESULT ClearImage();
    };

    [
      odl,
      uuid(B6C1048E-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Text collection for Chart Header,Footer and ShapeSeries"),
      helpcontext(0x0000016f),
      dual,
      oleautomation
    ]
    interface IStrings : IDispatch {
        [id(00000000), propget, helpcontext(0x00000013)]
        HRESULT ControlDefault(
                        [in] long Index, 
                        [out, retval] VARIANT* Value);
        [id(00000000), propput, helpcontext(0x00000013)]
        HRESULT ControlDefault(
                        [in] long Index, 
                        [in] VARIANT Value);
        [id(0x00000001), helpstring("Number of items in text collection"), helpcontext(0x00000013)]
        HRESULT Count([out, retval] long* Count);
        [id(0x00000002), propget, helpstring("Returns the text of Index item"), helpcontext(0x00000011)]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] VARIANT* Value);
        [id(0x00000002), propput, helpstring("Returns the text of Index item"), helpcontext(0x00000011)]
        HRESULT Item(
                        [in] long Index, 
                        [in] VARIANT Value);
        [id(0x00000003), helpstring("Deletes Index text string from collection"), helpcontext(0x00000012)]
        HRESULT Remove([in] long Index);
        [id(0x00000004), helpstring("Removes all text items from collection"), helpcontext(0x00000014)]
        HRESULT Clear();
        [id(0x00000005), helpstring("Adds a new text item to collection"), helpcontext(0x00000015)]
        HRESULT Add(
                        [in] VARIANT AItem, 
                        [out, retval] long* Item);
        [id(0xfffffffc)]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
    };

    [
      odl,
      uuid(B6C1048F-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Chart custom drawing properties and methods"),
      helpcontext(0x00000002),
      dual,
      oleautomation
    ]
    interface ICanvas : IDispatch {
        [id(0x00000001), propget, helpstring("Color and pattern style to fill drawings"), helpcontext(0x00000072)]
        HRESULT Brush([out, retval] IBrush** Brush);
        [id(0x00000002), propget, helpstring("Color, width and style of drawing lines"), helpcontext(0x000000ef)]
        HRESULT Pen([out, retval] IPen** Pen);
        [id(0x00000003), helpstring("Will draw a line from the present Pen position to the new co-ordinates"), helpcontext(0x0000000b)]
        HRESULT LineTo(
                        [in] long X, 
                        [in] long Y);
        [id(0x00000004), helpstring("will move the Canvas cursor to the co-ordinate defined"), helpcontext(0x0000000c)]
        HRESULT MoveTo(
                        [in] long X, 
                        [in] long Y);
        [id(0x00000005), helpstring("Will draw a rectangle between the defined co-ordinates"), helpcontext(0x000002cb)]
        HRESULT Rectangle(
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Right, 
                        [in] long Bottom);
        [id(0x00000006), propget, helpstring("The font attributes for TextOut and RotateLabel methods"), helpcontext(0x000000d3)]
        HRESULT Font([out, retval] IChartFont** Font);
        [id(0x00000007), helpstring("will draw an arc in the rectangle defined by the 4 co-ordinates"), helpcontext(0x0000000e)]
        HRESULT Arc(
                        [in] long X1, 
                        [in] long Y1, 
                        [in] long X2, 
                        [in] long Y2, 
                        [in] long X3, 
                        [in] long Y3, 
                        [in] long X4, 
                        [in] long Y4);
        [id(0x00000008), helpstring("will draw an ellipse between the 4 rectangle co-ordinates"), helpcontext(0x0000000d)]
        HRESULT Ellipse(
                        [in] long X1, 
                        [in] long Y1, 
                        [in] long X2, 
                        [in] long Y2);
        [id(0x00000009), helpstring("Outputs Text at XY position using current Font attributes"), helpcontext(0x00000006)]
        HRESULT TextOut(
                        [in] long X, 
                        [in] long Y, 
                        [in] BSTR Text);
        [id(0x0000000a), helpstring("Vertical size in pixels of the string St parameter"), helpcontext(0x000002cc)]
        HRESULT TextHeight(
                        [in] BSTR SomeText, 
                        [out, retval] long* St);
        [id(0x0000000b), helpstring("Horizontal size in pixels of string St parameter"), helpcontext(0x000002cd)]
        HRESULT TextWidth(
                        [in] BSTR SomeText, 
                        [out, retval] long* St);
        [id(0x00000025), helpstring("Creates a clipping region in the Chart rectangle"), helpcontext(0x0000009c)]
        HRESULT ClipRectangle(
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Right, 
                        [in] long Bottom);
        [id(0x00000050), helpstring("Removes any clipping region applied to Chart Canvas"), helpcontext(0x00000293)]
        HRESULT UnClipRectangle();
        [id(0x00000046), helpstring("Draws a text string at specified xy coordinates with RotDegree rotation angle"), helpcontext(0x00000199)]
        HRESULT RotateLabel(
                        [in] long X, 
                        [in] long Y, 
                        [in] BSTR St, 
                        [in] long RotDegree);
        [id(0x0000002f), helpstring("Returns TRUE if video mode color depth > 256 colors"), helpcontext(0x000000ff)]
        HRESULT IsScreenHighColor([out, retval] VARIANT_BOOL* IsScreenHighColor);
        [id(0x0000000c), propget, helpstring("Returns the chart top position in pixels"), helpcontext(0x000002e3)]
        HRESULT Top([out, retval] long* Top);
        [id(0x0000000d), propget, helpstring("Returns the chart left position in pixels"), helpcontext(0x000002e5)]
        HRESULT Left([out, retval] long* Left);
        [id(0x0000000e), propget, helpstring("Returns the chart bounding width in pixels"), helpcontext(0x000002e6)]
        HRESULT Width([out, retval] long* Width);
        [id(0x0000000f), propget, helpstring("Returns the chart bounding height in pixels"), helpcontext(0x000002e4)]
        HRESULT Height([out, retval] long* Height);
        [id(0x00000010), propget, helpstring("Enables BackColor or for patterned brushes"), helpcontext(0x0000030d)]
        HRESULT BackMode([out, retval] ECanvasBackMode* Value);
        [id(0x00000010), propput, helpstring("Enables BackColor or for patterned brushes"), helpcontext(0x0000030d)]
        HRESULT BackMode([in] ECanvasBackMode Value);
        [id(0x00000011), propget, helpstring("Back Color when using non solid Brushes"), helpcontext(0x0000030e)]
        HRESULT BackColor([out, retval] OLE_COLOR* Value);
        [id(0x00000011), propput, helpstring("Back Color when using non solid Brushes"), helpcontext(0x0000030e)]
        HRESULT BackColor([in] OLE_COLOR Value);
        [id(0x00000012), propget, helpstring("Determine if Canvas can do rotation and elevation of more than 90 degrees (OpenGL)"), helpcontext(0x00000310)]
        HRESULT SupportsFullRotation([out, retval] VARIANT_BOOL* Value);
        [id(0x00000013), propget, helpstring("Set buffered display"), helpcontext(0x00000312)]
        HRESULT UseBuffer([out, retval] VARIANT_BOOL* Value);
        [id(0x00000013), propput, helpstring("Set buffered display"), helpcontext(0x00000312)]
        HRESULT UseBuffer([in] VARIANT_BOOL Value);
        [id(0x00000014), helpstring("Draw 3D Pie Slice"), helpcontext(0x00000313)]
        HRESULT Pie3D(
                        [in] long XCenter, 
                        [in] long YCenter, 
                        [in] long XRadius, 
                        [in] long YRadius, 
                        [in] long Z0, 
                        [in] long Z1, 
                        [in] double StartAngle, 
                        [in] double EndAngle, 
                        [in] VARIANT_BOOL DarkSides, 
                        [in] VARIANT_BOOL DrawSides);
        [id(0x00000016), helpstring("Draw Line in Z plane"), helpcontext(0x00000314)]
        HRESULT LineWithZ(
                        [in] long X0, 
                        [in] long Y0, 
                        [in] long X1, 
                        [in] long Y1, 
                        [in] long Z);
        [id(0x00000017), helpstring("Will move the Canvas cursor to the 3D co-ordinate defined"), helpcontext(0x00000315)]
        HRESULT MoveTo3D(
                        [in] long X, 
                        [in] long Y, 
                        [in] long Z);
        [id(0x00000018), helpstring("Will draw a line from the present Pen position to the new 3D co-ordinates"), helpcontext(0x00000316)]
        HRESULT LineTo3D(
                        [in] long X, 
                        [in] long Y, 
                        [in] long Z);
        [id(0x00000019), helpstring("Rectangle from (X0,Y0,Z0) to (X1,Y1,Z1)"), helpcontext(0x00000317)]
        HRESULT Plane3D(
                        [in] long X0, 
                        [in] long Y0, 
                        [in] long X1, 
                        [in] long Y1, 
                        [in] long Z0, 
                        [in] long Z1);
        [id(0x0000001a), helpstring("Draws Line X,Y between two Z planes Z0 and Z1"), helpcontext(0x00000318)]
        HRESULT ZLine3D(
                        [in] long X, 
                        [in] long Y, 
                        [in] long Z0, 
                        [in] long Z1);
        [id(0x0000001b), helpstring("Draws a 3D rotated label at XYZ position. Depends on TextAlign property."), helpcontext(0x00000319)]
        HRESULT RotateLabel3D(
                        [in] long X, 
                        [in] long Y, 
                        [in] long Z, 
                        [in] BSTR St, 
                        [in] long RotDegree);
        [id(0x0000001c), propget, helpstring("Sets the alignment used when displaying text using TextOut or TextOut3D"), helpcontext(0x0000031a)]
        HRESULT TextAlign([out, retval] ECanvasTextAlign* Value);
        [id(0x0000001c), propput, helpstring("Sets the alignment used when displaying text using TextOut or TextOut3D"), helpcontext(0x0000031a)]
        HRESULT TextAlign([in] ECanvasTextAlign Value);
        [id(0x0000001d), helpstring("Draws vertical line from Top to Bottom at X on Z plane"), helpcontext(0x0000031c)]
        HRESULT VertLine3D(
                        [in] long X, 
                        [in] long Top, 
                        [in] long Bottom, 
                        [in] long Z);
        [id(0x0000001e), helpstring("Draws Horizontal Line from Left to Right at Y on Z plane"), helpcontext(0x0000031d)]
        HRESULT HorizLine3D(
                        [in] long Left, 
                        [in] long Right, 
                        [in] long Y, 
                        [in] long Z);
        [id(0x0000001f), helpstring("Draws cylinder"), helpcontext(0x0000031e)]
        HRESULT Cylinder(
                        [in] VARIANT_BOOL Vertical, 
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Right, 
                        [in] long Bottom, 
                        [in] long Z0, 
                        [in] long Z1, 
                        [in] VARIANT_BOOL DarkCover);
        [id(0x00000020), helpstring("Draws cube between Planes Z0 and Z1"), helpcontext(0x0000031f)]
        HRESULT Cube(
                        [in] long Left, 
                        [in] long Right, 
                        [in] long Top, 
                        [in] long Bottom, 
                        [in] long Z0, 
                        [in] long Z1, 
                        [in] VARIANT_BOOL DarkSides);
        [id(0x00000021), helpstring("Draws Ellipse on Z Plane"), helpcontext(0x00000320)]
        HRESULT EllipseWithZ(
                        [in] long X1, 
                        [in] long Y1, 
                        [in] long X2, 
                        [in] long Y2, 
                        [in] long Z);
        [id(0x00000022), helpstring("Draws Plane between 4 sets of co-ordinates on Z plane."), helpcontext(0x00000321)]
        HRESULT PlaneWithZ(
                        [in] long X1, 
                        [in] long Y1, 
                        [in] long X2, 
                        [in] long Y2, 
                        [in] long X3, 
                        [in] long Y3, 
                        [in] long X4, 
                        [in] long Y4, 
                        [in] long Z);
        [id(0x00000023), helpstring("Draws a polygon of four points. The first and second point  at  Z0 position, the third and fourth point at Z1 position."), helpcontext(0x00000322)]
        HRESULT PlaneFour3D(
                        [in] long X1, 
                        [in] long Y1, 
                        [in] long X2, 
                        [in] long Y2, 
                        [in] long X3, 
                        [in] long Y3, 
                        [in] long X4, 
                        [in] long Y4, 
                        [in] long Z0, 
                        [in] long Z1);
        [id(0x00000024), helpstring("Draws Rectangle in plane Z"), helpcontext(0x00000323)]
        HRESULT RectangleWithZ(
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Right, 
                        [in] long Bottom, 
                        [in] long Z);
        [id(0x00000026), helpstring("Vertical Rectangle from Top to Bottom at Z"), helpcontext(0x00000324)]
        HRESULT RectangleZ(
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Bottom, 
                        [in] long Z0, 
                        [in] long Z1);
        [id(0x00000027), helpstring("Writes Text to X,Y co-ordinate on Z plane"), helpcontext(0x00000325)]
        HRESULT TextOut3D(
                        [in] long X, 
                        [in] long Y, 
                        [in] long Z, 
                        [in] BSTR Text);
        [id(0x00000028), helpstring("Draws a triangle of co-ordinates at Z position"), helpcontext(0x00000326)]
        HRESULT TriangleWithZ(
                        [in] long X1, 
                        [in] long Y1, 
                        [in] long X2, 
                        [in] long Y2, 
                        [in] long X3, 
                        [in] long Y3, 
                        [in] long Z);
        [id(0x00000029), helpstring("Draws Frame with colours to depict 3D"), helpcontext(0x00000327)]
        HRESULT Frame3D(
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Right, 
                        [in] long Bottom, 
                        [in] OLE_COLOR TopColor, 
                        [in] OLE_COLOR BottomColor, 
                        [in] long Width);
        [id(0x0000002a), helpstring("Clears background defined for rectangle"), helpcontext(0x00000328)]
        HRESULT EraseBackground(
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Right, 
                        [in] long Bottom);
        [id(0x0000002b), helpstring("Fills rectangle area with colour gradient between Start End colours"), helpcontext(0x00000329)]
        HRESULT GradientFill(
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Right, 
                        [in] long Bottom, 
                        [in] OLE_COLOR StartColor, 
                        [in] OLE_COLOR EndColor, 
                        [in] EGradientDirection Direction);
        [id(0x0000002c), helpstring("Draws Line between 2 points using current Pen"), helpcontext(0x0000032a)]
        HRESULT Line(
                        [in] long X0, 
                        [in] long Y0, 
                        [in] long X1, 
                        [in] long Y1);
        [id(0x0000002d), helpstring("Horizontal Rectangle from Left to Right, from Z0 to Z1 position, at Top Y"), helpcontext(0x0000032b)]
        HRESULT RectangleY(
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Right, 
                        [in] long Z0, 
                        [in] long Z1);
        [id(0x00000015), helpstring("Set Pixel colour at X,Y,Z coordinate"), helpcontext(0x00000311)]
        HRESULT Pixels3D(
                        [in] long X, 
                        [in] long Y, 
                        [in] long Z, 
                        [in] OLE_COLOR Value);
        [id(0x0000002e), propget, helpstring("Returns the hDC Windows GDI Handle of Canvas"), helpcontext(0x000003f2)]
        HRESULT HandleDC([out, retval] long* Value);
        [id(0x00000032), helpstring("Draws a Cone"), helpcontext(0x000003ec)]
        HRESULT Cone(
                        [in] VARIANT_BOOL Vertical, 
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Right, 
                        [in] long Bottom, 
                        [in] long Z0, 
                        [in] long Z1, 
                        [in] VARIANT_BOOL Dark3D, 
                        [in] long ConePercent);
        [id(0x00000030), helpstring("Draws an Sphere"), helpcontext(0x000003eb)]
        HRESULT Sphere(
                        [in] long X, 
                        [in] long Y, 
                        [in] long Z, 
                        [in] double Radius);
        [id(0x00000031), helpstring("Draws a solid or outlined arrow"), helpcontext(0x00000395)]
        HRESULT Arrow(
                        [in] VARIANT_BOOL Filled, 
                        [in] long X0, 
                        [in] long Y0, 
                        [in] long X1, 
                        [in] long Y1, 
                        [in] long HeadWidth, 
                        [in] long HeadHeight, 
                        [in] long Z);
        [id(0x00000033), helpstring("Draws and displays at position (X, Y) objects such as icons, bitmaps, and metafiles that can store and display visual images."), helpcontext(0x00000407)]
        HRESULT Draw(
                        [in] long X, 
                        [in] long Y, 
                        [in] IPicture* Image);
        [id(0x00000034), propget, helpstring("Sets the rotation center of a 3D TChart."), helpcontext(0x00000408)]
        HRESULT RotationCenter([out, retval] ITeePoint3D** Value);
        [id(0x00000035), propget, helpstring("Returns the centre Horizontal co-ordinate of the Chart."), helpcontext(0x00000409)]
        HRESULT ChartXCenter([out, retval] long* Value);
        [id(0x00000036), propget, helpstring("Returns the centre Vertical co-ordinate of the Chart."), helpcontext(0x0000040a)]
        HRESULT ChartYCenter([out, retval] long* Value);
        [id(0x00000037), helpstring("Converts Canvas to GrayScale colours"), helpcontext(0x00000627)]
        HRESULT GrayScale([in] VARIANT_BOOL Inverted);
    };

    [
      odl,
      uuid(B6C10490-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Chart 3D and OpenGL attributes"),
      helpcontext(0x00000169),
      dual,
      oleautomation
    ]
    interface IAspect : IDispatch {
        [id(0x00000053), propget, helpstring("Draw each Series in a different Z position (back to front)"), helpcontext(0x00000033)]
        HRESULT ApplyZOrder([out, retval] VARIANT_BOOL* ApplyZOrder);
        [id(0x00000053), propput, helpstring("Draw each Series in a different Z position (back to front)"), helpcontext(0x00000033)]
        HRESULT ApplyZOrder([in] VARIANT_BOOL ApplyZOrder);
        [id(0x00000009), propget, helpstring("Ratio between Chart dimension and depth. Only when Chart.View3D is True"), helpcontext(0x0000008c)]
        HRESULT Chart3DPercent([out, retval] long* Chart3DPercent);
        [id(0x00000009), propput, helpstring("Ratio between Chart dimension and depth. Only when Chart.View3D is True"), helpcontext(0x0000008c)]
        HRESULT Chart3DPercent([in] long Chart3DPercent);
        [id(0x00000055), propget, helpstring("Returns the size in pixels of the vertical 3D effect"), helpcontext(0x000000f1)]
        HRESULT Height3D([out, retval] long* Height3D);
        [id(0x0000001e), propget, helpstring("View Chart in 3D"), helpcontext(0x000002a3)]
        HRESULT View3D([out, retval] VARIANT_BOOL* View3D);
        [id(0x0000001e), propput, helpstring("View Chart in 3D"), helpcontext(0x000002a3)]
        HRESULT View3D([in] VARIANT_BOOL View3D);
        [id(0x00000054), propget, helpstring("Returns the size in pixels of the horizontal 3D effect"), helpcontext(0x000002b3)]
        HRESULT Width3D([out, retval] long* Width3D);
        [id(0x00000001), propget, helpstring("Horizontal Chart rotation"), helpcontext(0x000002ef)]
        HRESULT Rotation([out, retval] long* RotationX);
        [id(0x00000001), propput, helpstring("Horizontal Chart rotation"), helpcontext(0x000002ef)]
        HRESULT Rotation([in] long RotationX);
        [id(0x00000002), propget, helpstring("Vertical Chart rotation"), helpcontext(0x000002ec)]
        HRESULT Elevation([out, retval] long* RotationY);
        [id(0x00000002), propput, helpstring("Vertical Chart rotation"), helpcontext(0x000002ec)]
        HRESULT Elevation([in] long RotationY);
        [id(0x00000004), propget, helpstring("Whole Chart zoom"), helpcontext(0x000002f2)]
        HRESULT Zoom([out, retval] long* Zoom);
        [id(0x00000004), propput, helpstring("Whole Chart zoom"), helpcontext(0x000002f2)]
        HRESULT Zoom([in] long Zoom);
        [id(0x00000003), propget, helpstring("Set/disallow text to Zoom"), helpcontext(0x0000032d)]
        HRESULT ZoomText([out, retval] VARIANT_BOOL* Value);
        [id(0x00000003), propput, helpstring("Set/disallow text to Zoom"), helpcontext(0x0000032d)]
        HRESULT ZoomText([in] VARIANT_BOOL Value);
        [id(0x00000006), propget, helpstring("Move Chart left/right"), helpcontext(0x000002ed)]
        HRESULT HorizOffset([out, retval] long* Value);
        [id(0x00000006), propput, helpstring("Move Chart left/right"), helpcontext(0x000002ed)]
        HRESULT HorizOffset([in] long Value);
        [id(0x00000007), propget, helpstring("Move Chart up/down"), helpcontext(0x000002f1)]
        HRESULT VertOffset([out, retval] long* Value);
        [id(0x00000007), propput, helpstring("Move Chart up/down"), helpcontext(0x000002f1)]
        HRESULT VertOffset([in] long Value);
        [id(0x00000008), propget, helpstring("Tilt whole Chart"), helpcontext(0x000002f0)]
        HRESULT Tilt([out, retval] long* Value);
        [id(0x00000008), propput, helpstring("Tilt whole Chart"), helpcontext(0x000002f0)]
        HRESULT Tilt([in] long Value);
        [id(0x0000000a), propget, helpstring("Set/disable orthogonal 3D representation"), helpcontext(0x000002ee)]
        HRESULT Orthogonal([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000a), propput, helpstring("Set/disable orthogonal 3D representation"), helpcontext(0x000002ee)]
        HRESULT Orthogonal([in] VARIANT_BOOL Value);
        [id(0x0000000b), propget, helpstring("Perspective percent"), helpcontext(0x0000037c)]
        HRESULT Perspective([out, retval] long* Value);
        [id(0x0000000b), propput, helpstring("Perspective percent"), helpcontext(0x0000037c)]
        HRESULT Perspective([in] long Value);
        [id(0x00000005), propget, helpstring("OpenGL 3D photorealistic rendering"), helpcontext(0x000003b7)]
        HRESULT OpenGL([out, retval] ITeeOpenGL** Value);
        [id(0x0000000c), propget, helpstring("Defines the angle by which the TChart is rotated in Orthagonal  Mode."), helpcontext(0x00000520)]
        HRESULT OrthoAngle([out, retval] long* Value);
        [id(0x0000000c), propput, helpstring("Defines the angle by which the TChart is rotated in Orthagonal  Mode."), helpcontext(0x00000520)]
        HRESULT OrthoAngle([in] long Value);
    };

    [
      odl,
      uuid(B6C10491-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Groups the four Chart axis ( Left,Top,Right and Bottom )"),
      helpcontext(0x000001f1),
      dual,
      oleautomation
    ]
    interface IAxes : IDispatch {
        [id(0x00000001), propget, helpstring("The left Chart axis object"), helpcontext(0x0000010e)]
        HRESULT Left([out, retval] IAxis** Left);
        [id(0x00000002), propget, helpstring("The right Chart axis object"), helpcontext(0x00000198)]
        HRESULT Right([out, retval] IAxis** Right);
        [id(0x00000003), propget, helpstring("The top Chart axis object"), helpcontext(0x0000028d)]
        HRESULT Top([out, retval] IAxis** Top);
        [id(0x00000004), propget, helpstring("The bottom Chart axis object"), helpcontext(0x0000006a)]
        HRESULT Bottom([out, retval] IAxis** Bottom);
        [id(0x0000000a), propget, helpstring("Show / hides all axis"), helpcontext(0x00000055)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x0000000a), propput, helpstring("Show / hides all axis"), helpcontext(0x00000055)]
        HRESULT Visible([in] VARIANT_BOOL Visible);
        [id(0x00000005), propget, helpstring("The Depth Chart axis object"), helpcontext(0x000003a1)]
        HRESULT Depth([out, retval] IAxis** Value);
        [id(0x00000006), propget, helpstring("Place Axes above or below Series"), helpcontext(0x0000037b)]
        HRESULT DrawAxesBeforeSeries([out, retval] VARIANT_BOOL* Value);
        [id(0x00000006), propput, helpstring("Place Axes above or below Series"), helpcontext(0x0000037b)]
        HRESULT DrawAxesBeforeSeries([in] VARIANT_BOOL Value);
        [id(0x00000007), helpstring("Add a new Custom Axis"), helpcontext(0x000003a3)]
        HRESULT AddCustom(
                        [in] VARIANT_BOOL IsHorizontal, 
                        [out, retval] long* Value);
        [id(0x00000008), propget, helpstring("Access Custom Axes' properties"), helpcontext(0x000003a5)]
        HRESULT Custom(
                        [in] long CustomAxisIndex, 
                        [out, retval] IAxis** Value);
        [id(0x00000009), propget, helpstring("Returns count of Custom Axes"), helpcontext(0x000003a5)]
        HRESULT CustomCount([out, retval] long* Value);
        [id(0x0000000b), helpstring("Removes Custom Axis of Index 'CustomAxisIndex'."), helpcontext(0x000003f7)]
        HRESULT RemoveCustom([in] long CustomAxisIndex);
        [id(0x0000000c), helpstring("Removes all Custom Axes."), helpcontext(0x000003f8)]
        HRESULT RemoveAllCustom();
    };

    [
      odl,
      uuid(B6C104C6-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Chart Left,Top,Right and Bottom Axes attributes"),
      helpcontext(0x000001f3),
      dual,
      oleautomation
    ]
    interface IAxis : IDispatch {
        [id(0x00000001), propget, helpstring("Auto calculate Max & Min of axis scale based on all dependant series"), helpcontext(0x0000004f)]
        HRESULT Automatic([out, retval] VARIANT_BOOL* Automatic);
        [id(0x00000001), propput, helpstring("Auto calculate Max & Min of axis scale based on all dependant series"), helpcontext(0x0000004f)]
        HRESULT Automatic([in] VARIANT_BOOL Automatic);
        [id(0x00000002), propget, helpstring("Auto calc Max of axis scale based on all dependant series"), helpcontext(0x00000050)]
        HRESULT AutomaticMaximum([out, retval] VARIANT_BOOL* AutomaticMaximum);
        [id(0x00000002), propput, helpstring("Auto calc Max of axis scale based on all dependant series"), helpcontext(0x00000050)]
        HRESULT AutomaticMaximum([in] VARIANT_BOOL AutomaticMaximum);
        [id(0x00000003), propget, helpstring("Auto calc Min of axis scale based on all dependant series"), helpcontext(0x00000051)]
        HRESULT AutomaticMinimum([out, retval] VARIANT_BOOL* AutomaticMinimum);
        [id(0x00000003), propput, helpstring("Auto calc Min of axis scale based on all dependant series"), helpcontext(0x00000051)]
        HRESULT AutomaticMinimum([in] VARIANT_BOOL AutomaticMinimum);
        [id(0x00000004), propget, helpstring("Pen used to draw the axis"), helpcontext(0x00000053)]
        HRESULT AxisPen([out, retval] IPen** AxisPen);
        [id(0x0000000d), propget, helpstring("Returns the axis position (Left,Top,Right or Bottom)"), helpcontext(0x00000127)]
        HRESULT AxisType([out, retval] EAxisType* AxisType);
        [id(0x00000007), propget, helpstring("Shows Axis Labels in exact DateTime steps for weeks and months. See Axis.Increments"), helpcontext(0x000000cc)]
        HRESULT ExactDateTime([out, retval] VARIANT_BOOL* ExactDateTime);
        [id(0x00000007), propput, helpstring("Shows Axis Labels in exact DateTime steps for weeks and months. See Axis.Increments"), helpcontext(0x000000cc)]
        HRESULT ExactDateTime([in] VARIANT_BOOL ExactDateTime);
        [id(0x00000008), propget, helpstring("Access Pen for Chart back Grid"), helpcontext(0x000000f0)]
        HRESULT GridPen([out, retval] IPen** GridPen);
        [id(0x00000009), propget, helpstring("Minimum step between axis labels. Can use EDateTimeStep for date-time axis"), helpcontext(0x000000f8)]
        HRESULT Increment([out, retval] double* Increment);
        [id(0x00000009), propput, helpstring("Minimum step between axis labels. Can use EDateTimeStep for date-time axis"), helpcontext(0x000000f8)]
        HRESULT Increment([in] double Increment);
        [id(0x0000000a), propget, helpstring("Swaps Axis Minimum and Maximum scales"), helpcontext(0x000000fa)]
        HRESULT Inverted([out, retval] VARIANT_BOOL* Inverted);
        [id(0x0000000a), propput, helpstring("Swaps Axis Minimum and Maximum scales"), helpcontext(0x000000fa)]
        HRESULT Inverted([in] VARIANT_BOOL Inverted);
        [id(0x0000000b), propget, helpstring("Show or hide Axis Labels"), helpcontext(0x000001f6)]
        HRESULT Labels([out, retval] IAxisLabels** Labels);
        [id(0x00000012), propget, helpstring("True to scale the Axis Logarithmically"), helpcontext(0x00000115)]
        HRESULT Logarithmic([out, retval] VARIANT_BOOL* Logarithmic);
        [id(0x00000012), propput, helpstring("True to scale the Axis Logarithmically"), helpcontext(0x00000115)]
        HRESULT Logarithmic([in] VARIANT_BOOL Logarithmic);
        [id(0x00000013), propget, helpstring("Max Axis value"), helpcontext(0x00000120)]
        HRESULT Maximum([out, retval] double* Maximum);
        [id(0x00000013), propput, helpstring("Max Axis value"), helpcontext(0x00000120)]
        HRESULT Maximum([in] double Maximum);
        [id(0x00000014), propget, helpstring("Min Axis value"), helpcontext(0x00000124)]
        HRESULT Minimum([out, retval] double* Minimum);
        [id(0x00000014), propput, helpstring("Min Axis value"), helpcontext(0x00000124)]
        HRESULT Minimum([in] double Minimum);
        [id(0x00000015), propget, helpstring("Number of Axis minor ticks between major ticks"), helpcontext(0x00000125)]
        HRESULT MinorTickCount([out, retval] long* MinorTickCount);
        [id(0x00000015), propput, helpstring("Number of Axis minor ticks between major ticks"), helpcontext(0x00000125)]
        HRESULT MinorTickCount([in] long MinorTickCount);
        [id(0x0000000c), propget, helpstring("Length in pixels of the axis minor ticks"), helpcontext(0x00000126)]
        HRESULT MinorTickLength([out, retval] long* MinorTickLength);
        [id(0x0000000c), propput, helpstring("Length in pixels of the axis minor ticks"), helpcontext(0x00000126)]
        HRESULT MinorTickLength([in] long MinorTickLength);
        [id(0x00000016), propget, helpstring("Minor tick Pen"), helpcontext(0x00000129)]
        HRESULT MinorTicks([out, retval] IPen** MinorTicks);
        [id(0x0000000e), propget, helpstring("The screen coordinate where axis is drawn"), helpcontext(0x00000128)]
        HRESULT Position([out, retval] long* Position);
        [id(0x00000018), propget, helpstring("Default 0. Length in pixels of ticks inside Chart boundaries"), helpcontext(0x00000283)]
        HRESULT TickInnerLength([out, retval] long* TickInnerLength);
        [id(0x00000018), propput, helpstring("Default 0. Length in pixels of ticks inside Chart boundaries"), helpcontext(0x00000283)]
        HRESULT TickInnerLength([in] long TickInnerLength);
        [id(0x00000019), propget, helpstring("Default 4. Length of Axis Ticks in logical pixels"), helpcontext(0x00000284)]
        HRESULT TickLength([out, retval] long* TickLength);
        [id(0x00000019), propput, helpstring("Default 4. Length of Axis Ticks in logical pixels"), helpcontext(0x00000284)]
        HRESULT TickLength([in] long TickLength);
        [id(0x0000001a), propget, helpstring("Default True. Only coincide ticks at Labels"), helpcontext(0x00000285)]
        HRESULT TickOnLabelsOnly([out, retval] VARIANT_BOOL* TickOnLabelsOnly);
        [id(0x0000001a), propput, helpstring("Default True. Only coincide ticks at Labels"), helpcontext(0x00000285)]
        HRESULT TickOnLabelsOnly([in] VARIANT_BOOL TickOnLabelsOnly);
        [id(0x0000001c), propget, helpstring("Tick Pen"), helpcontext(0x00000286)]
        HRESULT Ticks([out, retval] IPen** Ticks);
        [id(0x0000001d), propget, helpstring("Inner Tick Pen"), helpcontext(0x00000287)]
        HRESULT TicksInner([out, retval] IPen** TicksInner);
        [id(0x0000001e), propget, helpstring("Title attributes"), helpcontext(0x0000028a)]
        HRESULT Title([out, retval] IAxisTitle** Title);
        [id(0x0000001f), propget, helpstring("Default 0 to auto calc distance detween Title and Axis"), helpcontext(0x0000028c)]
        HRESULT TitleSize([out, retval] long* TitleSize);
        [id(0x0000001f), propput, helpstring("Default 0 to auto calc distance detween Title and Axis"), helpcontext(0x0000028c)]
        HRESULT TitleSize([in] long TitleSize);
        [id(0x00000020), propget, helpstring("Show / hides this axis"), helpcontext(0x000002a5)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x00000020), propput, helpstring("Show / hides this axis"), helpcontext(0x000002a5)]
        HRESULT Visible([in] VARIANT_BOOL Visible);
        [id(0x00000030), helpstring("Recalculates axis Min and Max based on all Series"), helpcontext(0x00000026)]
        HRESULT AdjustMaxMin();
        [id(0x00000028), helpstring("Calculates Horizontal coord. in pixels of Value parameter"), helpcontext(0x0000007b)]
        HRESULT CalcXPosValue(
                        [in] double SomeValue, 
                        [out, retval] long* Value);
        [id(0x00000029), helpstring("Calculates Vertical coord. in pixels of Value parameter"), helpcontext(0x00000080)]
        HRESULT CalcYPosValue(
                        [in] double SomeValue, 
                        [out, retval] long* Value);
        [id(0x0000002a), helpstring("Calculates the size in pixels of horizontal Value scales"), helpcontext(0x0000007d)]
        HRESULT CalcXSizeValue(
                        [in] double SomeValue, 
                        [out, retval] long* Value);
        [id(0x0000002b), helpstring("Calculates the size in pixels of vertical Value scales"), helpcontext(0x00000082)]
        HRESULT CalcYSizeValue(
                        [in] double SomeValue, 
                        [out, retval] long* Value);
        [id(0x0000002c), helpstring("Calculates axis scale of Value screen pixels coordinate"), helpcontext(0x00000079)]
        HRESULT CalcPosPoint(
                        [in] long SomeValue, 
                        [out, retval] double* Value);
        [id(0x00000033), helpstring("Returns True if XY pixel coordinates are near axis."), helpcontext(0x00000098)]
        HRESULT Clicked(
                        [in] long XCoord, 
                        [in] long YCoord, 
                        [out, retval] VARIANT_BOOL* Y);
        [id(0x0000002e), helpstring("Draws the axis at specified screen pixels coordinates"), helpcontext(0x000000ae)]
        HRESULT CustomDraw(
                        [in] long APosLabels, 
                        [in] long APosTitle, 
                        [in] long APosAxis, 
                        [in] VARIANT_BOOL GridVisible);
        [id(0x00000034), helpstring("Returns True if associated Series are date-time (Series.XValues.DateTime)"), helpcontext(0x000000fd)]
        HRESULT IsDateTime([out, retval] VARIANT_BOOL* IsDateTime);
        [id(0x00000036), helpstring("Maximum Horizontal value for the specified Axis"), helpcontext(0x0000011e)]
        HRESULT MaxXValue([out, retval] double* MaxXValue);
        [id(0x00000037), helpstring("Maximum Vertical value for the specified Axis"), helpcontext(0x0000011f)]
        HRESULT MaxYValue([out, retval] double* MaxYValue);
        [id(0x00000038), helpstring("Minimum Horizontal value for the specified Axis"), helpcontext(0x00000122)]
        HRESULT MinXValue([out, retval] double* MinXValue);
        [id(0x00000039), helpstring("Minimum Vertical value for the specified Axis"), helpcontext(0x00000123)]
        HRESULT MinYValue([out, retval] double* MinYValue);
        [id(0x00000032), helpstring("Change axis Min and Max to scroll chart contents"), helpcontext(0x000001a1)]
        HRESULT Scroll(
                        [in] double Offset, 
                        [in] VARIANT_BOOL CheckLimits);
        [id(0x00000035), helpstring("Changes axis Min and Max values in a single call."), helpcontext(0x000001aa)]
        HRESULT SetMinMax(
                        [in] double AMin, 
                        [in] double AMax);
        [id(0x00000005), propget, helpstring("Place GridLines between Labels"), helpcontext(0x000002f9)]
        HRESULT GridCentered([out, retval] VARIANT_BOOL* Value);
        [id(0x00000005), propput, helpstring("Place GridLines between Labels"), helpcontext(0x000002f9)]
        HRESULT GridCentered([in] VARIANT_BOOL Value);
        [id(0x00000006), propget, helpstring("Axis position as percent of Chart"), helpcontext(0x00000306)]
        HRESULT PositionPercent([out, retval] double* Value);
        [id(0x00000006), propput, helpstring("Axis position as percent of Chart"), helpcontext(0x00000306)]
        HRESULT PositionPercent([in] double Value);
        [id(0x0000000f), propget, helpstring("Axis Start position percentage of Chart"), helpcontext(0x00000307)]
        HRESULT StartPosition([out, retval] double* Value);
        [id(0x0000000f), propput, helpstring("Axis Start position percentage of Chart"), helpcontext(0x00000307)]
        HRESULT StartPosition([in] double Value);
        [id(0x00000010), propget, helpstring("Axis Start position percentage of Chart"), helpcontext(0x00000308)]
        HRESULT EndPosition([out, retval] double* Value);
        [id(0x00000010), propput, helpstring("Axis Start position percentage of Chart"), helpcontext(0x00000308)]
        HRESULT EndPosition([in] double Value);
        [id(0x00000011), propget, helpstring("Base used for Logarithmic scale"), helpcontext(0x0000037f)]
        HRESULT LogarithmicBase([out, retval] long* Value);
        [id(0x00000011), propput, helpstring("Base used for Logarithmic scale"), helpcontext(0x0000037f)]
        HRESULT LogarithmicBase([in] long Value);
        [id(0x0000003a), helpstring("Draws the axis at specified screen pixels coordinates with custom minimum and maximum"), helpcontext(0x0000038d)]
        HRESULT CustomDrawMinMax(
                        [in] long APosLabels, 
                        [in] long APosTitle, 
                        [in] long APosAxis, 
                        [in] VARIANT_BOOL GridVisible, 
                        [in] double AMinimum, 
                        [in] double AMaximum, 
                        [optional, defaultvalue(0)] long AStartPosition, 
                        [optional, defaultvalue(100)] long AEndPosition);
        [id(0x00000017), propget, helpstring("Sets characteristics of Minor Tick Grid."), helpcontext(0x000003f9)]
        HRESULT MinorGrid([out, retval] IPen** Value);
        [id(0x0000001b), propget, helpstring("Sets Axis labelling type to normal or 'otherside'"), helpcontext(0x000003fd)]
        HRESULT Otherside([out, retval] VARIANT_BOOL* Value);
        [id(0x0000001b), propput, helpstring("Sets Axis labelling type to normal or 'otherside'"), helpcontext(0x000003fd)]
        HRESULT Otherside([in] VARIANT_BOOL Value);
        [id(0x00000021), propget, hidden, helpstring("Internally links Axis to Chart Tools"), helpcontext(0x00000629)]
        HRESULT AxisLink([out, retval] long* Value);
        [id(0x00000022), helpstring("Returns max. value of Series associated with Axis"), helpcontext(0x000006f5)]
        HRESULT MaxVisibleSeriesValue(
                        [in] VARIANT_BOOL AllSeries, 
                        [in] long SeriesIndex, 
                        [out, retval] double* Value);
        [id(0x00000023), helpstring("Returns min. value of Series associated with Axis"), helpcontext(0x000006f6)]
        HRESULT MinVisibleSeriesValue(
                        [in] VARIANT_BOOL AllSeries, 
                        [in] long SeriesIndex, 
                        [out, retval] double* Value);
        [id(0x00000024), helpstring("Returns resultant increment of Axis"), helpcontext(0x000006f7)]
        HRESULT CalcIncrement([out, retval] double* Value);
    };

    [
      odl,
      uuid(B6C10493-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Chart axes labels attributes"),
      helpcontext(0x000001f7),
      dual,
      oleautomation
    ]
    interface IAxisLabels : IDispatch {
        [id(0x0000000c), propget, helpstring("Rotation angle of label. All angles valid."), helpcontext(0x0000002d)]
        HRESULT Angle([out, retval] long* Angle);
        [id(0x0000000c), propput, helpstring("Rotation angle of label. All angles valid."), helpcontext(0x0000002d)]
        HRESULT Angle([in] long Angle);
        [id(0x0000000b), propget, helpstring("Show or hide Axis Labels"), helpcontext(0x00000105)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x0000000b), propput, helpstring("Show or hide Axis Labels"), helpcontext(0x00000105)]
        HRESULT Visible([in] VARIANT_BOOL Visible);
        [id(0x00000006), propget, helpstring("Formatting mask for date-time axis labels. eg. 'dd/mm/yy'"), helpcontext(0x000000b4)]
        HRESULT DateTimeFormat([out, retval] BSTR* DateTimeFormat);
        [id(0x00000006), propput, helpstring("Formatting mask for date-time axis labels. eg. 'dd/mm/yy'"), helpcontext(0x000000b4)]
        HRESULT DateTimeFormat([in] BSTR DateTimeFormat);
        [id(0x0000000d), propget, helpstring("Font attributes used to draw axis labels"), helpcontext(0x00000107)]
        HRESULT Font([out, retval] ITeeFont** Font);
        [id(0x00000024), helpstring("Returns corresponding text of formatted Value"), helpcontext(0x00000103)]
        HRESULT FormattedValue(
                        [in] double SomeValue, 
                        [out, retval] BSTR* Value);
        [id(0x0000001b), helpstring("returns Labels position in pixels"), helpcontext(0x00000101)]
        HRESULT GetPos([out, retval] long* GetPos);
        [id(0x00000023), helpstring("Axis Label height of formatted Value"), helpcontext(0x00000100)]
        HRESULT Height(
                        [in] double SomeValue, 
                        [out, retval] long* Value);
        [id(0x00000021), helpstring("Max width in Screen pixels of all Axis Labels"), helpcontext(0x0000011a)]
        HRESULT MaxWidth([out, retval] long* MaxWidth);
        [id(0x0000000e), propget, helpstring("True to show Labels at Axis Minimum and Maximum positions"), helpcontext(0x00000108)]
        HRESULT OnAxis([out, retval] VARIANT_BOOL* OnAxis);
        [id(0x0000000e), propput, helpstring("True to show Labels at Axis Minimum and Maximum positions"), helpcontext(0x00000108)]
        HRESULT OnAxis([in] VARIANT_BOOL OnAxis);
        [id(0x00000017), propget, helpstring("Default True. Round Axis Labels to nearest magnitude"), helpcontext(0x0000019b)]
        HRESULT RoundFirstLabel([out, retval] VARIANT_BOOL* RoundFirstLabel);
        [id(0x00000017), propput, helpstring("Default True. Round Axis Labels to nearest magnitude"), helpcontext(0x0000019b)]
        HRESULT RoundFirstLabel([in] VARIANT_BOOL RoundFirstLabel);
        [id(0x0000000f), propget, helpstring("Percent amount minimum distance between Axis Labels. Set to zero to show all labels"), helpcontext(0x00000109)]
        HRESULT Separation([out, retval] long* Separation);
        [id(0x0000000f), propput, helpstring("Percent amount minimum distance between Axis Labels. Set to zero to show all labels"), helpcontext(0x00000109)]
        HRESULT Separation([in] long Separation);
        [id(0x00000010), propget, helpstring("Default 0 to auto calculate distance between Axis and Labels"), helpcontext(0x0000010a)]
        HRESULT Size([out, retval] long* Size);
        [id(0x00000010), propput, helpstring("Default 0 to auto calculate distance between Axis and Labels"), helpcontext(0x0000010a)]
        HRESULT Size([in] long Size);
        [id(0x00000011), propget, helpstring("Label display type"), helpcontext(0x00000102)]
        HRESULT Style([out, retval] EAxisLabelStyle* Style);
        [id(0x00000011), propput, helpstring("Label display type"), helpcontext(0x00000102)]
        HRESULT Style([in] EAxisLabelStyle Style);
        [id(0x00000005), propget, helpstring("Default formatting mask for axis labels for Values: '#,##0.###'"), helpcontext(0x00000054)]
        HRESULT ValueFormat([out, retval] BSTR* ValueFormat);
        [id(0x00000005), propput, helpstring("Default formatting mask for axis labels for Values: '#,##0.###'"), helpcontext(0x00000054)]
        HRESULT ValueFormat([in] BSTR ValueFormat);
        [id(0x00000022), helpstring("Axis Label width of formatted Value"), helpcontext(0x00000104)]
        HRESULT Width(
                        [in] double SomeValue, 
                        [out, retval] long* Value);
        [id(0x00000001), propget, helpstring("Use spaces in Labels to separate lines"), helpcontext(0x00000309)]
        HRESULT Multiline([out, retval] VARIANT_BOOL* Value);
        [id(0x00000001), propput, helpstring("Use spaces in Labels to separate lines"), helpcontext(0x00000309)]
        HRESULT Multiline([in] VARIANT_BOOL Value);
        [id(0x00000002), helpstring("Replaces Separator with Line break in Labels"), helpcontext(0x0000037d)]
        HRESULT TeeSplitInLines(
                        [in, out] BSTR* St, 
                        [in] BSTR Separator);
        [id(0x00000003), propget, helpstring("Set to True to show the number of the mantissa in super-script font."), helpcontext(0x000005b3)]
        HRESULT Exponent([out, retval] VARIANT_BOOL* Value);
        [id(0x00000003), propput, helpstring("Set to True to show the number of the mantissa in super-script font."), helpcontext(0x000005b3)]
        HRESULT Exponent([in] VARIANT_BOOL Value);
        [id(0x00000004), propget, helpstring("Changes default position of Axis Labels"), helpcontext(0x000005b4)]
        HRESULT Align([out, retval] EAxisLabelAlign* Value);
        [id(0x00000004), propput, helpstring("Changes default position of Axis Labels"), helpcontext(0x000005b4)]
        HRESULT Align([in] EAxisLabelAlign Value);
    };

    [
      odl,
      uuid(B6C10494-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Chart axes Title attributes"),
      helpcontext(0x000001fa),
      dual,
      oleautomation
    ]
    interface IAxisTitle : IDispatch {
        [id(0x00000001), propget, helpstring("The angle (0,90,180,270) to draw the Title Caption"), helpcontext(0x0000002d)]
        HRESULT Angle([out, retval] long* Angle);
        [id(0x00000001), propput, helpstring("The angle (0,90,180,270) to draw the Title Caption"), helpcontext(0x0000002d)]
        HRESULT Angle([in] long Angle);
        [id(0x00000002), propget, helpstring("The text to draw as axis title"), helpcontext(0x00000087)]
        HRESULT Caption([out, retval] BSTR* Caption);
        [id(0x00000002), propput, helpstring("The text to draw as axis title"), helpcontext(0x00000087)]
        HRESULT Caption([in] BSTR Caption);
        [id(0x00000003), propget, helpstring("The font used to display the Title Caption"), helpcontext(0x000000d4)]
        HRESULT Font([out, retval] ITeeFont** Font);
        [id(0x00000004), propget, helpstring("Enables/Disables the display of the Axis Title."), helpcontext(0x0000040b)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Value);
        [id(0x00000004), propput, helpstring("Enables/Disables the display of the Axis Title."), helpcontext(0x0000040b)]
        HRESULT Visible([in] VARIANT_BOOL Value);
    };

    [
      odl,
      uuid(B6C10495-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Describes panel appearance characteristics (bevel, colour, etc) for descendant TChart component shapes."),
      helpcontext(0x0000040c),
      dual,
      oleautomation
    ]
    interface ITeeCustomShape : IDispatch {
        [id(0x0000006c), propget, helpstring("Colour for Title background"), helpcontext(0x0000030a)]
        HRESULT Color([out, retval] OLE_COLOR* Value);
        [id(0x0000006c), propput, helpstring("Colour for Title background"), helpcontext(0x0000030a)]
        HRESULT Color([in] OLE_COLOR Value);
        [id(0x00000068), propget, helpstring("Font used to draw text"), helpcontext(0x000002ce)]
        HRESULT Font([out, retval] ITeeFont** Font);
        [id(0x00000065), propget, helpstring("Call Gradient characteristics for the shape."), helpcontext(0x0000040d)]
        HRESULT Gradient([out, retval] IGradient** Value);
        [id(0x000003f4), propget, helpstring("Size in pixels of shape's shadowed items."), helpcontext(0x000001ae)]
        HRESULT ShadowSize([out, retval] long* Value);
        [id(0x000003f4), propput, helpstring("Size in pixels of shape's shadowed items."), helpcontext(0x000001ae)]
        HRESULT ShadowSize([in] long Value);
        [id(0x00000066), propget, helpstring("Colour of shape's shadowed items."), helpcontext(0x000001ab)]
        HRESULT ShadowColor([out, retval] OLE_COLOR* Value);
        [id(0x00000066), propput, helpstring("Colour of shape's shadowed items."), helpcontext(0x000001ab)]
        HRESULT ShadowColor([in] OLE_COLOR Value);
        [id(0x000003f5), propget, helpstring("When True, Background not filled"), helpcontext(0x00000290)]
        HRESULT Transparent([out, retval] VARIANT_BOOL* Value);
        [id(0x000003f5), propput, helpstring("When True, Background not filled"), helpcontext(0x00000290)]
        HRESULT Transparent([in] VARIANT_BOOL Value);
        [id(0x00000067), propget, helpstring("Shape may be rectagular or rounded rectangular in shape."), helpcontext(0x000005b9)]
        HRESULT ShapeStyle([out, retval] EChartObjectShapeStyle* Value);
        [id(0x00000067), propput, helpstring("Shape may be rectagular or rounded rectangular in shape."), helpcontext(0x000005b9)]
        HRESULT ShapeStyle([in] EChartObjectShapeStyle Value);
        [id(0x0000007e), propget, helpstring("Value between 0 and 100 which sets the transparency percentage with respect foreground to background."), helpcontext(0x0000040e)]
        HRESULT Transparency([out, retval] long* Value);
        [id(0x0000007e), propput, helpstring("Value between 0 and 100 which sets the transparency percentage with respect foreground to background."), helpcontext(0x0000040e)]
        HRESULT Transparency([in] long Value);
        [id(0x00000085), propget, helpstring("Returns a rectangle defining shape boundery"), helpcontext(0x0000062b)]
        HRESULT ShapeBounds([out, retval] TeeRect* Value);
        [id(0x00000139), propget, helpstring("Bevel style"), helpcontext(0x000006df)]
        HRESULT Bevel([out, retval] EPanelBevel* Value);
        [id(0x00000139), propput, helpstring("Bevel style"), helpcontext(0x000006df)]
        HRESULT Bevel([in] EPanelBevel Value);
        [id(0x0000013a), propget, helpstring("Bevel size"), helpcontext(0x000006e0)]
        HRESULT BevelWidth([out, retval] long* Value);
        [id(0x0000013a), propput, helpstring("Bevel size"), helpcontext(0x000006e0)]
        HRESULT BevelWidth([in] long Value);
    };

    [
      odl,
      uuid(B6C10496-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Chart Export methods"),
      helpcontext(0x000001eb),
      dual,
      oleautomation
    ]
    interface IExport : IDispatch {
        [id(0x00000001), helpstring("Copies Chart to Clipboard in bitmap format"), helpcontext(0x000000a8)]
        HRESULT CopyToClipboardBitmap();
        [id(0x00000002), helpstring("Copies Chart to Clipboard in metafile format"), helpcontext(0x000000a9)]
        HRESULT CopyToClipboardMetafile([in] VARIANT_BOOL Enhanced);
        [id(0x00000003), helpstring("Stores the Chart to an image bitmap file"), helpcontext(0x0000019d)]
        HRESULT SaveToBitmapFile([in] BSTR FileName);
        [id(0x00000004), helpstring("Stores the Chart component to a *.tee file"), helpcontext(0x0000000a)]
        HRESULT SaveToFile([in] BSTR FileName);
        [id(0x00000005), helpstring("Stores the Chart to an image JPEG (JPG) file"), helpcontext(0x00000022)]
        HRESULT SaveToJPEGFile(
                        [in] BSTR FileName, 
                        [in] VARIANT_BOOL Gray, 
                        [in] EJPEGPerformance Performance, 
                        [in] long Quality, 
                        [in] long Width, 
                        [in] long Height);
        [id(0x00000006), helpstring("Stores the Chart to a metafile (WMF) file"), helpcontext(0x0000019e)]
        HRESULT SaveToMetafile([in] BSTR FileName);
        [id(0x00000007), helpstring("Stores the Chart to an enhaced 32bit metafile (EMF) file"), helpcontext(0x0000019f)]
        HRESULT SaveToMetafileEnh([in] BSTR FileName);
        [id(0x00000008), helpstring("Shows the TeeChart export dialog"), helpcontext(0x00000009)]
        HRESULT ShowExport();
        [id(0x00000009), helpstring("Show save Chart template dialog"), helpcontext(0x00000382)]
        HRESULT SaveChartDialog([out, retval] BSTR* Value);
        [id(0x0000000a), helpstring("Convert Tee template to text"), helpcontext(0x0000038a)]
        HRESULT ConvertTeeFileToText(
                        [in] BSTR InputFile, 
                        [in] BSTR OutputFile);
        [id(0x0000000c), helpstring("Output Chart as Stream "), helpcontext(0x000003fe)]
        HRESULT Stream(
                        [in, optional, defaultvalue(0)] EStreamType StreamType, 
                        [out, retval] VARIANT* Value);
        [id(0x0000000b), propget, helpstring("Accesses JPEG format Export attributes."), helpcontext(0x00000410)]
        HRESULT asJPEG([out, retval] IJPEGExport** Value);
        [id(0x0000000d), propget, helpstring("Accesses PNG format Export attributes."), helpcontext(0x00000411)]
        HRESULT asPNG([out, retval] IPNGExport** Value);
        [id(0x0000000e), propget, helpstring("Accesses GIF format Export attributes."), helpcontext(0x00000412)]
        HRESULT asGIF([out, retval] IGIFExport** Value);
        [id(0x0000000f), propget, helpstring("Accesses BMP format Export attributes."), helpcontext(0x00000413)]
        HRESULT asBMP([out, retval] IBMPExport** Value);
        [id(0x00000010), propget, helpstring("Accesses PCX format Export attribute"), helpcontext(0x00000414)]
        HRESULT asPCX([out, retval] IPCXExport** Value);
        [id(0x00000011), propget, helpstring("Accesses Metafile format Export attribute"), helpcontext(0x00000415)]
        HRESULT asMetafile([out, retval] IMetafileExport** Value);
        [id(0x00000012), propget, helpstring("Accesses Native format Export attribute"), helpcontext(0x0000062c)]
        HRESULT asNative([out, retval] INativeExport** Value);
        [id(0x00000013), propget, helpstring("Accesses XML format Export attribute"), helpcontext(0x0000062d)]
        HRESULT asXML([out, retval] IXMLExport** Value);
        [id(0x00000014), propget, helpstring("Accesses XLS format Export attribute"), helpcontext(0x0000062e)]
        HRESULT asXLS([out, retval] IXLSExport** Value);
        [id(0x00000015), propget, helpstring("Accesses HTML format Export attribute"), helpcontext(0x0000062f)]
        HRESULT asHTML([out, retval] IHTMLExport** Value);
        [id(0x00000016), propget, helpstring("Accesses Text format Export attribute"), helpcontext(0x00000630)]
        HRESULT asText([out, retval] ITextExport** Value);
        [id(0x00000017), helpstring("Attaches Chart to default Email"), helpcontext(0x00000631)]
        HRESULT EmailFile([in] BSTR FileName);
    };

    [
      odl,
      uuid(B6C10497-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Chart Import methods"),
      helpcontext(0x000001e8),
      dual,
      oleautomation
    ]
    interface IImport : IDispatch {
        [id(0x00000001), helpstring("Retrieves a *.tee TeeChart file"), helpcontext(0x00000008)]
        HRESULT LoadFromFile([in] BSTR FileName);
        [id(0x00000002), helpstring("Retrieves a *.tee TeeChart file from a www URL when in Internet Explorer"), helpcontext(0x00000007)]
        HRESULT LoadFromURL([in] BSTR URL);
        [id(0x00000003), helpstring("Retrieves Charts from a specified Stream"), helpcontext(0x00000632)]
        HRESULT LoadFromStream([in] VARIANT AStream);
    };

    [
      odl,
      uuid(B6C104A3-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Chart Scroll attributes"),
      helpcontext(0x00000166),
      dual,
      oleautomation
    ]
    interface IScroll : IDispatch {
        [id(0x00000001), propget, helpstring("Controls Right mouse button scrolling"), helpcontext(0x0000002b)]
        HRESULT Enable([out, retval] EChartScroll* Enable);
        [id(0x00000001), propput, helpstring("Controls Right mouse button scrolling"), helpcontext(0x0000002b)]
        HRESULT Enable([in] EChartScroll Enable);
        [id(0x00000002), propget, helpstring("Sets the mousebutton to use to enable the scroll action."), helpcontext(0x000006ff)]
        HRESULT MouseButton([out, retval] EMouseButton* Value);
        [id(0x00000002), propput, helpstring("Sets the mousebutton to use to enable the scroll action."), helpcontext(0x000006ff)]
        HRESULT MouseButton([in] EMouseButton Value);
    };

    [
      odl,
      uuid(B6C104A4-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Chart Zoom attributes"),
      helpcontext(0x0000015f),
      dual,
      oleautomation
    ]
    interface IZoom : IDispatch {
        [id(0x00000003), propget, helpstring("True to left mouse button zooming (dragging from top/left to bottom/right)"), helpcontext(0x0000002c)]
        HRESULT Enable([out, retval] VARIANT_BOOL* Enable);
        [id(0x00000003), propput, helpstring("True to left mouse button zooming (dragging from top/left to bottom/right)"), helpcontext(0x0000002c)]
        HRESULT Enable([in] VARIANT_BOOL Enable);
        [id(0x00000005), propget, helpstring("True for animated sequence on zoom"), helpcontext(0x00000030)]
        HRESULT Animated([out, retval] VARIANT_BOOL* Animated);
        [id(0x00000005), propput, helpstring("True for animated sequence on zoom"), helpcontext(0x00000030)]
        HRESULT Animated([in] VARIANT_BOOL Animated);
        [id(0x00000006), propget, helpstring("Number of steps of the animated zoom. Default 8."), helpcontext(0x00000031)]
        HRESULT AnimatedSteps([out, retval] long* AnimatedSteps);
        [id(0x00000006), propput, helpstring("Number of steps of the animated zoom. Default 8."), helpcontext(0x00000031)]
        HRESULT AnimatedSteps([in] long AnimatedSteps);
        [id(0x00000052), helpstring("Resets all Axes to Automatic scales (no zoom)."), helpcontext(0x00000294)]
        HRESULT Undo();
        [id(0x00000051), helpstring("Applies a Zoom on the given rectangle in pixels"), helpcontext(0x000002c6)]
        HRESULT ZoomRect(
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Right, 
                        [in] long Bottom);
        [id(0x00000001), propget, helpstring("Returns True if Chart is Zoomed"), helpcontext(0x000003df)]
        HRESULT Zoomed([out, retval] VARIANT_BOOL* Value);
        [id(0x00000002), propget, helpstring("Pen used to draw surrounding rectangle of zoom area as mouse is dragged."), helpcontext(0x000005ae)]
        HRESULT Pen([out, retval] IPen** Value);
        [id(0x00000004), propget, helpstring("Sets the minimum number of pixels before the zoom action is activated."), helpcontext(0x000005ac)]
        HRESULT MinimumPixels([out, retval] long* Value);
        [id(0x00000004), propput, helpstring("Sets the minimum number of pixels before the zoom action is activated."), helpcontext(0x000005ac)]
        HRESULT MinimumPixels([in] long Value);
        [id(0x00000007), propget, helpstring("Sets the mousebutton to use to enable the zoom action."), helpcontext(0x000005ad)]
        HRESULT MouseButton([out, retval] EMouseButton* Value);
        [id(0x00000007), propput, helpstring("Sets the mousebutton to use to enable the zoom action."), helpcontext(0x000005ad)]
        HRESULT MouseButton([in] EMouseButton Value);
        [id(0x00000008), propget, helpstring("Sets the direction applied to the Zoom when the mouse is dragged."), helpcontext(0x000005aa)]
        HRESULT Direction([out, retval] ETeeZoomDirection* Value);
        [id(0x00000008), propput, helpstring("Sets the direction applied to the Zoom when the mouse is dragged."), helpcontext(0x000005aa)]
        HRESULT Direction([in] ETeeZoomDirection Value);
        [id(0x00000009), propget, helpstring("Brush used to fill mousedragged zoom area."), helpcontext(0x000005a9)]
        HRESULT Brush([out, retval] IBrush** Value);
        [id(0x0000000a), helpstring("Applies the specified  Zoom In/Out to the current Axis scales."), helpcontext(0x00000416)]
        HRESULT ZoomPercent([in] double PercentZoom);
    };

    [
      odl,
      uuid(B6C104A5-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Chart Printing attributes and methods"),
      helpcontext(0x000001ee),
      dual,
      oleautomation
    ]
    interface IPrinter : IDispatch {
        [id(0x00000018), propget, helpstring("Screen pixel mapping to Printer pixels. 0=Wysiwyg, 100=highest detail"), helpcontext(0x00000190)]
        HRESULT Detail([out, retval] long* Value);
        [id(0x00000018), propput, helpstring("Screen pixel mapping to Printer pixels. 0=Wysiwyg, 100=highest detail"), helpcontext(0x00000190)]
        HRESULT Detail([in] long Value);
        [id(0x00000002), propget, helpstring("Printer paper bottom margin in % of total height"), helpcontext(0x0000018d)]
        HRESULT MarginBottom([out, retval] long* Value);
        [id(0x00000002), propput, helpstring("Printer paper bottom margin in % of total height"), helpcontext(0x0000018d)]
        HRESULT MarginBottom([in] long Value);
        [id(0x00000003), propget, helpstring("Printer paper left margin in % of total width"), helpcontext(0x0000018d)]
        HRESULT MarginLeft([out, retval] long* Value);
        [id(0x00000003), propput, helpstring("Printer paper left margin in % of total width"), helpcontext(0x0000018d)]
        HRESULT MarginLeft([in] long Value);
        [id(0x00000004), propget, helpstring("Printer paper top margin in % of total height"), helpcontext(0x0000018d)]
        HRESULT MarginTop([out, retval] long* Value);
        [id(0x00000004), propput, helpstring("Printer paper top margin in % of total height"), helpcontext(0x0000018d)]
        HRESULT MarginTop([in] long Value);
        [id(0x00000005), propget, helpstring("Printer paper right margin in % of total width"), helpcontext(0x0000018d)]
        HRESULT MarginRight([out, retval] long* Value);
        [id(0x00000005), propput, helpstring("Printer paper right margin in % of total width"), helpcontext(0x0000018d)]
        HRESULT MarginRight([in] long Value);
        [id(0x00000001), propget, helpstring("Changes paper orientation (portrait or landscape)"), helpcontext(0x0000018e)]
        HRESULT Orientation([out, retval] EPrinterOrientation* Value);
        [id(0x00000001), propput, helpstring("Changes paper orientation (portrait or landscape)"), helpcontext(0x0000018e)]
        HRESULT Orientation([in] EPrinterOrientation Value);
        [id(0x00000040), helpstring("Prints the Chart"), helpcontext(0x0000018b)]
        HRESULT Print();
        [id(0x00000041), helpstring("Prints the Chart in landscape paper orientation"), helpcontext(0x0000018c)]
        HRESULT PrintLandscape();
        [id(0x00000043), helpstring("Prints the Chart in portrait paper orientation"), helpcontext(0x0000018f)]
        HRESULT PrintPortrait();
        [id(0x0000001c), helpstring("Shows the Print Preview Dialog"), helpcontext(0x0000018a)]
        HRESULT ShowPreview();
        [id(0x00000006), helpstring("Prints Chart at location co-ords. No form feed"), helpcontext(0x000002fc)]
        HRESULT PrintPartial(
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Right, 
                        [in] long Bottom);
        [id(0x00000007), helpstring("Opens Printer file"), helpcontext(0x000002fa)]
        HRESULT BeginDoc();
        [id(0x00000008), helpstring("Closes Printer file"), helpcontext(0x000002fb)]
        HRESULT EndDoc();
        [id(0x00000009), propget, helpstring("Selects Indexed Printer as Chart Printer"), helpcontext(0x000002fd)]
        HRESULT PrinterIndex([out, retval] long* Value);
        [id(0x00000009), propput, helpstring("Selects Indexed Printer as Chart Printer"), helpcontext(0x000002fd)]
        HRESULT PrinterIndex([in] long Value);
        [id(0x0000000a), propget, helpstring("Number of installed printers"), helpcontext(0x000002fe)]
        HRESULT PrinterCount([out, retval] long* Value);
        [id(0x0000000b), propget, helpstring("Windows Printer description"), helpcontext(0x000002ff)]
        HRESULT PrinterDescription(
                        [in] long Index, 
                        [out, retval] BSTR* Value);
        [id(0x0000000c), helpstring("Print Chart with page formfeed"), helpcontext(0x00000300)]
        HRESULT PrintChart();
        [id(0x0000000d), propget, helpstring("Height of printed page adjusted for printer resolution"), helpcontext(0x00000301)]
        HRESULT PageHeight([out, retval] long* Value);
        [id(0x0000000e), propget, helpstring("Width of printed page adjusted for printer resolution"), helpcontext(0x00000302)]
        HRESULT PageWidth([out, retval] long* Value);
        [id(0x0000000f), propget, helpstring("Print job title for network jobs"), helpcontext(0x00000304)]
        HRESULT JobTitle([out, retval] BSTR* Value);
        [id(0x0000000f), propput, helpstring("Print job title for network jobs"), helpcontext(0x00000304)]
        HRESULT JobTitle([in] BSTR Value);
        [id(0x00000011), propget, helpstring("Enable Printed Chart proportional to Chart dimensions"), helpcontext(0x00000379)]
        HRESULT PrintProportional([out, retval] VARIANT_BOOL* Value);
        [id(0x00000011), propput, helpstring("Enable Printed Chart proportional to Chart dimensions"), helpcontext(0x00000379)]
        HRESULT PrintProportional([in] VARIANT_BOOL Value);
        [id(0x00000012), helpstring("Print Chart to Printer DC with onpage co-ordinates"), helpcontext(0x0000037a)]
        HRESULT PrintPartialHandle(
                        [in] VARIANT DC, 
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Right, 
                        [in] long Bottom);
        [id(0x00000010), helpstring("Use PrintPages procedure to print multiple pages."), helpcontext(0x00000417)]
        HRESULT PrintPages(
                        [in, defaultvalue(1)] long FromPage, 
                        [in, defaultvalue(0)] long ToPage);
    };

    [
      odl,
      uuid(B6C104A6-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Chart Left and Bottom wall attributes"),
      helpcontext(0x00000214),
      dual,
      oleautomation
    ]
    interface IWall : IDispatch {
        [id(0x00000001), propget, helpstring("The brush used to fill the Chart wall"), helpcontext(0x00000074)]
        HRESULT Brush([out, retval] IBrush** Brush);
        [id(0x00000002), propget, helpstring("The color used to fill the chart wall"), helpcontext(0x000000a2)]
        HRESULT Color([out, retval] OLE_COLOR* Color);
        [id(0x00000002), propput, helpstring("The color used to fill the chart wall"), helpcontext(0x000000a2)]
        HRESULT Color([in] OLE_COLOR Color);
        [id(0x00000003), propget, helpstring("The pen used to draw a border around the Chart wall"), helpcontext(0x00000179)]
        HRESULT Pen([out, retval] IPen** Pen);
        [id(0x00000004), propget, helpstring("The wall depth in screen pixels"), helpcontext(0x00000073)]
        HRESULT Size([out, retval] long* Size);
        [id(0x00000004), propput, helpstring("The wall depth in screen pixels"), helpcontext(0x00000073)]
        HRESULT Size([in] long Size);
        [id(0x00000005), propget, helpstring("Make Wall transparent"), helpcontext(0x0000030b)]
        HRESULT Transparent([out, retval] VARIANT_BOOL* Value);
        [id(0x00000005), propput, helpstring("Make Wall transparent"), helpcontext(0x0000030b)]
        HRESULT Transparent([in] VARIANT_BOOL Value);
        [id(0x00000049), propget, helpstring("Enable Series Dark shading"), helpcontext(0x00000353)]
        HRESULT Dark3D([out, retval] VARIANT_BOOL* Value);
        [id(0x00000049), propput, helpstring("Enable Series Dark shading"), helpcontext(0x00000353)]
        HRESULT Dark3D([in] VARIANT_BOOL Value);
        [id(0x00000006), propget, helpstring("Call Gradient characteristics for the specified Wall."), helpcontext(0x00000418)]
        HRESULT Gradient([out, retval] IGradient** Value);
        [id(0x00000007), propget, helpstring("Enables/Disables display of specified Wall."), helpcontext(0x00000419)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Value);
        [id(0x00000007), propput, helpstring("Enables/Disables display of specified Wall."), helpcontext(0x00000419)]
        HRESULT Visible([in] VARIANT_BOOL Value);
        [id(0x00000008), propget, helpstring("Value between 0 and 100 which sets the transparency percentage with respect foreground to background."), helpcontext(0x0000041a)]
        HRESULT Transparency([out, retval] long* Value);
        [id(0x00000008), propput, helpstring("Value between 0 and 100 which sets the transparency percentage with respect foreground to background."), helpcontext(0x0000041a)]
        HRESULT Transparency([in] long Value);
    };

    [
      odl,
      uuid(B6C104A7-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Attributes for Chart Left, Bottom and Back walls"),
      helpcontext(0x0000015b),
      dual,
      oleautomation
    ]
    interface IWalls : IDispatch {
        [id(0x00000001), propget, helpstring("Pen and Brush fill of the Chart Bottom wall"), helpcontext(0x0000006b)]
        HRESULT Bottom([out, retval] IWall** Bottom);
        [id(0x00000002), propget, helpstring("Pen and Brush fill of the Chart Left wall"), helpcontext(0x0000010f)]
        HRESULT Left([out, retval] IWall** Left);
        [id(0x00000003), propget, helpstring("View Chart Walls in 3D"), helpcontext(0x000002a4)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x00000003), propput, helpstring("View Chart Walls in 3D"), helpcontext(0x000002a4)]
        HRESULT Visible([in] VARIANT_BOOL Visible);
        [id(0x00000004), propget, helpstring("Colour of back area within Chart Frame"), helpcontext(0x00000056)]
        HRESULT BackColor([out, retval] OLE_COLOR* BackColor);
        [id(0x00000004), propput, helpstring("Colour of back area within Chart Frame"), helpcontext(0x00000056)]
        HRESULT BackColor([in] OLE_COLOR BackColor);
        [id(0x00000005), propget, helpstring("Pen and Brush fill of the Chart Back Wall"), helpcontext(0x0000032c)]
        HRESULT Back([out, retval] IWall** Value);
        [id(0x00000006), propget, helpstring("Pen and Brush fill of the Chart Right Wall"), helpcontext(0x0000041b)]
        HRESULT Right([out, retval] IWall** Value);
    };

    [
      odl,
      uuid(E517CB2C-1C48-11D5-9400-006008A7EED4),
      version(1.0),
      helpstring("TeeShape Position attributes"),
      helpcontext(0x00000633),
      dual,
      oleautomation
    ]
    interface ITeeShapePosition : ITeeCustomShape {
        [id(0x000000db), propget, helpstring("Set to True to permit custom positioning of Shape."), helpcontext(0x0000049a)]
        HRESULT CustomPosition([out, retval] VARIANT_BOOL* Value);
        [id(0x000000db), propput, helpstring("Set to True to permit custom positioning of Shape."), helpcontext(0x0000049a)]
        HRESULT CustomPosition([in] VARIANT_BOOL Value);
        [id(0x000000d2), propget, helpstring("Left position in pixels."), helpcontext(0x0000049b)]
        HRESULT Left([out, retval] long* Value);
        [id(0x000000d2), propput, helpstring("Left position in pixels."), helpcontext(0x0000049b)]
        HRESULT Left([in] long Value);
        [id(0x000000d3), propget, helpstring("Top position in pixels."), helpcontext(0x0000049c)]
        HRESULT Top([out, retval] long* Value);
        [id(0x000000d3), propput, helpstring("Top position in pixels."), helpcontext(0x0000049c)]
        HRESULT Top([in] long Value);
    };

    [
      odl,
      uuid(B6C104A9-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Chart Panel background filling attributes"),
      helpcontext(0x000001fc),
      dual,
      oleautomation
    ]
    interface IGradient : IDispatch {
        [id(0x00000001), propget, helpstring("The direction of the gradient effect (top to bottom, left to right, etc)"), helpcontext(0x000000b8)]
        HRESULT Direction([out, retval] EGradientDirection* Direction);
        [id(0x00000001), propput, helpstring("The direction of the gradient effect (top to bottom, left to right, etc)"), helpcontext(0x000000b8)]
        HRESULT Direction([in] EGradientDirection Direction);
        [id(0x00000002), propget, helpstring("The starting color of the gradient effect"), helpcontext(0x000001b7)]
        HRESULT StartColor([out, retval] OLE_COLOR* StartColor);
        [id(0x00000002), propput, helpstring("The starting color of the gradient effect"), helpcontext(0x000001b7)]
        HRESULT StartColor([in] OLE_COLOR StartColor);
        [id(0x00000003), propget, helpstring("The ending color of the gradient effect"), helpcontext(0x000000c2)]
        HRESULT EndColor([out, retval] OLE_COLOR* EndColor);
        [id(0x00000003), propput, helpstring("The ending color of the gradient effect"), helpcontext(0x000000c2)]
        HRESULT EndColor([in] OLE_COLOR EndColor);
        [id(0x00000004), propget, helpstring("Shows / hides the Chart gradient background filling"), helpcontext(0x000002a6)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x00000004), propput, helpstring("Shows / hides the Chart gradient background filling"), helpcontext(0x000002a6)]
        HRESULT Visible([in] VARIANT_BOOL Visible);
        [id(0x00000005), propget, helpstring("The middle color of the gradient effect."), helpcontext(0x00000556)]
        HRESULT MidColor([out, retval] OLE_COLOR* Value);
        [id(0x00000005), propput, helpstring("The middle color of the gradient effect."), helpcontext(0x00000556)]
        HRESULT MidColor([in] OLE_COLOR Value);
    };

    [
      odl,
      uuid(B6C104AA-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Automatic Chart Multi-paging attributes"),
      helpcontext(0x0000016c),
      dual,
      oleautomation
    ]
    interface IPage : IDispatch {
        [id(0x00000005), helpstring("Move to next page"), helpcontext(0x0000012e)]
        HRESULT Next();
        [id(0x00000006), helpstring("Move to previous page"), helpcontext(0x00000189)]
        HRESULT Previous();
        [id(0x00000036), propget, helpstring("Maximum number of points per page"), helpcontext(0x0000011b)]
        HRESULT MaxPointsPerPage([out, retval] long* MaxPointsPerPage);
        [id(0x00000036), propput, helpstring("Maximum number of points per page"), helpcontext(0x0000011b)]
        HRESULT MaxPointsPerPage([in] long MaxPointsPerPage);
        [id(0x00000038), propget, helpstring("The current page number"), helpcontext(0x00000158)]
        HRESULT Current([out, retval] long* Current);
        [id(0x00000038), propput, helpstring("The current page number"), helpcontext(0x00000158)]
        HRESULT Current([in] long Current);
        [id(0x00000039), propget, helpstring("If False, last Chart page scale adjusted for visible points on last page"), helpcontext(0x000001a0)]
        HRESULT ScaleLastPage([out, retval] VARIANT_BOOL* ScaleLastPage);
        [id(0x00000039), propput, helpstring("If False, last Chart page scale adjusted for visible points on last page"), helpcontext(0x000001a0)]
        HRESULT ScaleLastPage([in] VARIANT_BOOL ScaleLastPage);
        [id(0x00000001), propget, helpstring("Returns the number of pages"), helpcontext(0x00000130)]
        HRESULT Count([out, retval] long* Count);
    };

    [
      odl,
      uuid(B6C104AB-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Chart Background and margin attributes"),
      helpcontext(0x00000173),
      dual,
      oleautomation
    ]
    interface IPanel : IDispatch {
        [id(0x00000002), propget, helpstring("Confine Image to within Chart frame"), helpcontext(0x0000005a)]
        HRESULT BackImageInside([out, retval] VARIANT_BOOL* BackImageInside);
        [id(0x00000002), propput, helpstring("Confine Image to within Chart frame"), helpcontext(0x0000005a)]
        HRESULT BackImageInside([in] VARIANT_BOOL BackImageInside);
        [id(0x00000003), propget, helpstring("Stretch, Tile or Center image"), helpcontext(0x0000005b)]
        HRESULT BackImageMode([out, retval] EBackImageMode* BackImageMode);
        [id(0x00000003), propput, helpstring("Stretch, Tile or Center image"), helpcontext(0x0000005b)]
        HRESULT BackImageMode([in] EBackImageMode BackImageMode);
        [id(0x00000005), propget, helpstring("Inner bevel of Chart Panel"), helpcontext(0x00000065)]
        HRESULT BevelInner([out, retval] EPanelBevel* BevelInner);
        [id(0x00000005), propput, helpstring("Inner bevel of Chart Panel"), helpcontext(0x00000065)]
        HRESULT BevelInner([in] EPanelBevel BevelInner);
        [id(0x00000006), propget, helpstring("Outer bevel of Chart Panel"), helpcontext(0x00000066)]
        HRESULT BevelOuter([out, retval] EPanelBevel* BevelOuter);
        [id(0x00000006), propput, helpstring("Outer bevel of Chart Panel"), helpcontext(0x00000066)]
        HRESULT BevelOuter([in] EPanelBevel BevelOuter);
        [id(0x00000007), propget, helpstring("BevelInner and BevelOuter widths"), helpcontext(0x00000067)]
        HRESULT BevelWidth([out, retval] long* BevelWidth);
        [id(0x00000007), propput, helpstring("BevelInner and BevelOuter widths"), helpcontext(0x00000067)]
        HRESULT BevelWidth([in] long BevelWidth);
        [id(0x00000008), propget, helpstring("Distance between BevelInner and BevelOuter"), helpcontext(0x00000069)]
        HRESULT BevelOffset([out, retval] long* BevelOffset);
        [id(0x00000008), propput, helpstring("Distance between BevelInner and BevelOuter"), helpcontext(0x00000069)]
        HRESULT BevelOffset([in] long BevelOffset);
        [id(0x00000009), propget, helpstring("Controls if panel draws a border or not."), helpcontext(0x00000068)]
        HRESULT BorderStyle([out, retval] EBorderStyle* BorderStyle);
        [id(0x00000009), propput, helpstring("Controls if panel draws a border or not."), helpcontext(0x00000068)]
        HRESULT BorderStyle([in] EBorderStyle BorderStyle);
        [id(0x0000000f), propget, helpstring("Define single colour for Chart panel background"), helpcontext(0x0000009f)]
        HRESULT Color([out, retval] OLE_COLOR* Color);
        [id(0x0000000f), propput, helpstring("Define single colour for Chart panel background"), helpcontext(0x0000009f)]
        HRESULT Color([in] OLE_COLOR Color);
        [id(0x0000000a), propget, helpstring("Paint colour gradient on Chart panel"), helpcontext(0x000000ee)]
        HRESULT Gradient([out, retval] IGradient** Gradient);
        [id(0x0000000b), propget, helpstring("Margin as % of Chart panel width"), helpcontext(0x00000117)]
        HRESULT MarginLeft([out, retval] long* MarginLeft);
        [id(0x0000000b), propput, helpstring("Margin as % of Chart panel width"), helpcontext(0x00000117)]
        HRESULT MarginLeft([in] long MarginLeft);
        [id(0x0000000c), propget, helpstring("Margin as % of Chart panel height"), helpcontext(0x00000117)]
        HRESULT MarginTop([out, retval] long* MarginTop);
        [id(0x0000000c), propput, helpstring("Margin as % of Chart panel height"), helpcontext(0x00000117)]
        HRESULT MarginTop([in] long MarginTop);
        [id(0x0000000d), propget, helpstring("Margin as % of Chart panel width"), helpcontext(0x00000117)]
        HRESULT MarginRight([out, retval] long* MarginRight);
        [id(0x0000000d), propput, helpstring("Margin as % of Chart panel width"), helpcontext(0x00000117)]
        HRESULT MarginRight([in] long MarginRight);
        [id(0x0000000e), propget, helpstring("Margin as % of Chart panel height"), helpcontext(0x00000117)]
        HRESULT MarginBottom([out, retval] long* MarginBottom);
        [id(0x0000000e), propput, helpstring("Margin as % of Chart panel height"), helpcontext(0x00000117)]
        HRESULT MarginBottom([in] long MarginBottom);
        [id(0x00000004), helpstring("Clears Chart Panel BackImage picture"), helpcontext(0x00000058)]
        HRESULT BackImageClear();
        [id(0x00000010), helpstring("Loads a picture file to fill Chart background"), helpcontext(0x000002d7)]
        HRESULT BackImageLoad([in] BSTR FileName);
    };

    [
      odl,
      uuid(B6C104AC-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Base interface for all common Series properties and methods"),
      helpcontext(0x00000204),
      dual,
      oleautomation
    ]
    interface ISeries : IDispatch {
        [id(0x00000001), propget, helpstring("Show / hide the Series"), helpcontext(0x00000005)]
        HRESULT Active([out, retval] VARIANT_BOOL* Active);
        [id(0x00000001), propput, helpstring("Show / hide the Series"), helpcontext(0x00000005)]
        HRESULT Active([in] VARIANT_BOOL Active);
        [id(0x00000002), propget, helpstring("Accesses the Series Area properties and methods"), helpcontext(0x00000045)]
        HRESULT asArea([out, retval] IAreaSeries** asArea);
        [id(0x00000003), propget, helpstring("Accesses the Series Arrow properties and methods"), helpcontext(0x0000004c)]
        HRESULT asArrow([out, retval] IArrowSeries** asArrow);
        [id(0x00000004), propget, helpstring("Accesses the Series Bar properties and methods"), helpcontext(0x00000044)]
        HRESULT asBar([out, retval] IBarSeries** asBar);
        [id(0x00000005), propget, helpstring("Accesses the Series Bubble properties and methods"), helpcontext(0x0000004b)]
        HRESULT asBubble([out, retval] IBubbleSeries** asBubble);
        [id(0x00000006), propget, helpstring("Accesses the Series Candle properties and methods"), helpcontext(0x00000043)]
        HRESULT asCandle([out, retval] ICandleSeries** asCandle);
        [id(0x00000009), propget, helpstring("Accesses the Series ErrorBar properties and methods"), helpcontext(0x00000042)]
        HRESULT asErrorBar([out, retval] IErrorBarSeries** asErrorBar);
        [id(0x0000000a), propget, helpstring("Accesses the Series FastLine properties and methods"), helpcontext(0x00000049)]
        HRESULT asFastLine([out, retval] IFastLineSeries** asFastLine);
        [id(0x0000000b), propget, helpstring("Accesses the Series Gantt properties and methods"), helpcontext(0x0000004a)]
        HRESULT asGantt([out, retval] IGanttSeries** asGantt);
        [id(0x0000000c), propget, helpstring("Accesses the Series HorizBar properties and methods"), helpcontext(0x00000048)]
        HRESULT asHorizBar([out, retval] IHorizBarSeries** asHorizBar);
        [id(0x0000000d), propget, helpstring("Accesses the Series Line properties and methods"), helpcontext(0x00000047)]
        HRESULT asLine([out, retval] ILineSeries** asLine);
        [id(0x0000000e), propget, helpstring("Accesses the Series Pie properties and methods"), helpcontext(0x0000003e)]
        HRESULT asPie([out, retval] IPieSeries** asPie);
        [id(0x0000000f), propget, helpstring("Accesses the Series Point properties and methods"), helpcontext(0x00000046)]
        HRESULT asPoint([out, retval] IPointSeries** asPoint);
        [id(0x00000010), propget, helpstring("Accesses the Series Polar properties and methods"), helpcontext(0x0000003f)]
        HRESULT asPolar([out, retval] IPolarSeries** asPolar);
        [id(0x00000011), propget, helpstring("Accesses the Series Shape properties and methods"), helpcontext(0x0000004d)]
        HRESULT asShape([out, retval] IShapeSeries** asShape);
        [id(0x00000012), propget, helpstring("Accesses the Series Surface properties and methods"), helpcontext(0x00000040)]
        HRESULT asSurface([out, retval] ISurfaceSeries** asSurface);
        [id(0x00000013), propget, helpstring("Accesses the Series Volume properties and methods"), helpcontext(0x00000041)]
        HRESULT asVolume([out, retval] IVolumeSeries** asVolume);
        [id(0x00000014), propget, helpstring("The default color for all Series points"), helpcontext(0x000001a5)]
        HRESULT Color([out, retval] OLE_COLOR* Color);
        [id(0x00000014), propput, helpstring("The default color for all Series points"), helpcontext(0x000001a5)]
        HRESULT Color([in] OLE_COLOR Color);
        [id(0x00000015), propget, helpstring("When True, each Series point is assigned a different color"), helpcontext(0x000000a4)]
        HRESULT ColorEachPoint([out, retval] VARIANT_BOOL* ColorEachPoint);
        [id(0x00000015), propput, helpstring("When True, each Series point is assigned a different color"), helpcontext(0x000000a4)]
        HRESULT ColorEachPoint([in] VARIANT_BOOL ColorEachPoint);
        [id(0x00000016), propget, helpstring("Returns the number of points in Series"), helpcontext(0x000000aa)]
        HRESULT Count([out, retval] long* Count);
        [id(0x00000017), propget, helpstring("The mouse cursor used when mouse passes over Series points"), helpcontext(0x000000ad)]
        HRESULT Cursor([out, retval] short* Cursor);
        [id(0x00000017), propput, helpstring("The mouse cursor used when mouse passes over Series points"), helpcontext(0x000000ad)]
        HRESULT Cursor([in] short Cursor);
        [id(0x00000018), propget, helpstring("The database DSN string for the Series, or another Series name if FunctionType is used"), helpcontext(0x000000b2)]
        HRESULT DataSource([out, retval] VARIANT* DataSource);
        [id(0x00000018), propput, helpstring("The database DSN string for the Series, or another Series name if FunctionType is used"), helpcontext(0x000000b2)]
        HRESULT DataSource([in] VARIANT DataSource);
        [id(0x00000019), propget, helpstring("The index of the first displayed Series point"), helpcontext(0x000000d2)]
        HRESULT FirstValueIndex([out, retval] long* FirstValueIndex);
        [id(0x0000001a), propget, helpstring("The associated Series function used to generate the Series points. Use SetFunction to change."), helpcontext(0x000000e0)]
        HRESULT FunctionType([out, retval] ITeeFunction** FunctionType);
        [id(0x0000001b), propget, helpstring("The associated horizontal axis ( Top axis or Bottom axis )"), helpcontext(0x000000f3)]
        HRESULT HorizontalAxis([out, retval] EHorizontalAxis* HorizontalAxis);
        [id(0x0000001b), propput, helpstring("The associated horizontal axis ( Top axis or Bottom axis )"), helpcontext(0x000000f3)]
        HRESULT HorizontalAxis([in] EHorizontalAxis HorizontalAxis);
        [id(0x0000001c), propget, helpstring("Defines the ODBC field used for Series labels"), helpcontext(0x000002b8)]
        HRESULT LabelsSource([out, retval] BSTR* LabelsSource);
        [id(0x0000001c), propput, helpstring("Defines the ODBC field used for Series labels"), helpcontext(0x000002b8)]
        HRESULT LabelsSource([in] BSTR LabelsSource);
        [id(0x0000001d), propget, helpstring("The index of the last displayed Series point"), helpcontext(0x0000010d)]
        HRESULT LastValueIndex([out, retval] long* LastValueIndex);
        [id(0x0000001e), propget, helpstring("The Series Marks attributes"), helpcontext(0x00000119)]
        HRESULT Marks([out, retval] IMarks** Marks);
        [id(0x0000001f), propget, helpstring("The internal Series name (must not contain spaces or symbols)"), helpcontext(0x0000029c)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x0000001f), propput, helpstring("The internal Series name (must not contain spaces or symbols)"), helpcontext(0x0000029c)]
        HRESULT Name([in] BSTR Name);
        [id(0x00000021), propget, helpstring("The formatting mask used to display Series values as percents"), helpcontext(0x0000017d)]
        HRESULT PercentFormat([out, retval] BSTR* PercentFormat);
        [id(0x00000021), propput, helpstring("The formatting mask used to display Series values as percents"), helpcontext(0x0000017d)]
        HRESULT PercentFormat([in] BSTR PercentFormat);
        [id(0x00000022), propget, helpstring("The color for Index Series point"), helpcontext(0x0000029b)]
        HRESULT PointColor(
                        [in] long Index, 
                        [out, retval] OLE_COLOR* Value);
        [id(0x00000022), propput, helpstring("The color for Index Series point"), helpcontext(0x0000029b)]
        HRESULT PointColor(
                        [in] long Index, 
                        [in] OLE_COLOR Value);
        [id(0x00000023), propget, helpstring("The text label for Index Series point"), helpcontext(0x000002b6)]
        HRESULT PointLabel(
                        [in] long Index, 
                        [out, retval] BSTR* Value);
        [id(0x00000023), propput, helpstring("The text label for Index Series point"), helpcontext(0x000002b6)]
        HRESULT PointLabel(
                        [in] long Index, 
                        [in] BSTR Value);
        [id(0x00000024), propget, helpstring("The value for Index Series point"), helpcontext(0x00000187)]
        HRESULT PointValue(
                        [in] long Index, 
                        [out, retval] double* Value);
        [id(0x00000024), propput, helpstring("The value for Index Series point"), helpcontext(0x00000187)]
        HRESULT PointValue(
                        [in] long Index, 
                        [in] double Value);
        [id(0x00000025), propget, helpstring("The Series class. Use Chart.ChangeSeriesType to change"), helpcontext(0x00000186)]
        HRESULT SeriesType([out, retval] ESeriesClass* SeriesType);
        [id(0x00000026), propget, helpstring("Show / hides Series in Chart Legend"), helpcontext(0x000001b1)]
        HRESULT ShowInLegend([out, retval] VARIANT_BOOL* ShowInLegend);
        [id(0x00000026), propput, helpstring("Show / hides Series in Chart Legend"), helpcontext(0x000001b1)]
        HRESULT ShowInLegend([in] VARIANT_BOOL ShowInLegend);
        [id(0x00000027), propget, helpstring("The Series text title used in Chart Legend"), helpcontext(0x0000028b)]
        HRESULT Title([out, retval] BSTR* Title);
        [id(0x00000027), propput, helpstring("The Series text title used in Chart Legend"), helpcontext(0x0000028b)]
        HRESULT Title([in] BSTR Title);
        [id(0x00000028), propget, helpstring("The formatting mask used to display Series values in Legend or Marks"), helpcontext(0x00000054)]
        HRESULT ValueFormat([out, retval] BSTR* ValueFormat);
        [id(0x00000028), propput, helpstring("The formatting mask used to display Series values in Legend or Marks"), helpcontext(0x00000054)]
        HRESULT ValueFormat([in] BSTR ValueFormat);
        [id(0x00000029), propget, helpstring("Returns the Mark text for Series point Index"), helpcontext(0x0000029d)]
        HRESULT ValueMarkText(
                        [in] long ValueIndex, 
                        [out, retval] BSTR* Index);
        [id(0x0000002a), propget, helpstring("The associated vertical axis ( Top, Bottom,  Both or Custom axis )"), helpcontext(0x000002a0)]
        HRESULT VerticalAxis([out, retval] EVerticalAxis* VerticalAxis);
        [id(0x0000002a), propput, helpstring("The associated vertical axis ( Top, Bottom,  Both or Custom axis )"), helpcontext(0x000002a0)]
        HRESULT VerticalAxis([in] EVerticalAxis VerticalAxis);
        [id(0x0000002b), propget, helpstring("The list of Series X values"), helpcontext(0x000002bb)]
        HRESULT XValues([out, retval] IValueList** XValues);
        [id(0x0000002c), propget, helpstring("The list of Series Y values"), helpcontext(0x000002c1)]
        HRESULT YValues([out, retval] IValueList** YValues);
        [id(0x0000002d), propget, helpstring("Returns the Z position order for the Series"), helpcontext(0x000002c2)]
        HRESULT ZOrder([out, retval] long* ZOrder);
        [id(0x0000002e), helpstring("Adds a new point to the Series"), helpcontext(0x00000016)]
        HRESULT Add(
                        [in] double AValue, 
                        [in] BSTR ALabel, 
                        [in] OLE_COLOR Value, 
                        [out, retval] long* AColor);
        [id(0x0000002f), helpstring("Adds a new null point to the Series"), helpcontext(0x00000010)]
        HRESULT AddNull(
                        [in] BSTR SomeLabel, 
                        [out, retval] long* ALabel);
        [id(0x00000030), helpstring("Adds a new point with X and Y coordinates"), helpcontext(0x00000023)]
        HRESULT AddXY(
                        [in] double AX, 
                        [in] double AY, 
                        [in] BSTR ALabel, 
                        [in] OLE_COLOR Value, 
                        [out, retval] long* AColor);
        [id(0x00000031), helpstring("Returns the horizontal screen position (in pixels) of ValueIndexth Series point"), helpcontext(0x0000007a)]
        HRESULT CalcXPos(
                        [in] long SomeValueIndex, 
                        [out, retval] long* ValueIndex);
        [id(0x00000032), helpstring("Returns the horizontal screen position (in pixels) of Value"), helpcontext(0x0000007c)]
        HRESULT CalcXPosValue(
                        [in] double SomeValue, 
                        [out, retval] long* Value);
        [id(0x00000033), helpstring("Returns the horizontal size in pixels of Value in axis scales"), helpcontext(0x0000007e)]
        HRESULT CalcXSizeValue(
                        [in] double SomeValue, 
                        [out, retval] long* Value);
        [id(0x00000034), helpstring("Returns the vertical screen position (in pixels) of ValueIndexth Series point"), helpcontext(0x0000007f)]
        HRESULT CalcYPos(
                        [in] long SomeValueIndex, 
                        [out, retval] long* ValueIndex);
        [id(0x00000035), helpstring("Returns the vertical screen position (in pixels) of Value"), helpcontext(0x00000081)]
        HRESULT CalcYPosValue(
                        [in] double SomeValue, 
                        [out, retval] long* Value);
        [id(0x00000036), helpstring("Returns the vertical size in pixels of Value in axis scales"), helpcontext(0x00000083)]
        HRESULT CalcYSizeValue(
                        [in] double SomeValue, 
                        [out, retval] long* Value);
        [id(0x00000037), helpstring("Refreshes function type or ODBC datasource"), helpcontext(0x00000090)]
        HRESULT CheckDataSource();
        [id(0x00000038), helpstring("Removes all points from the Series"), helpcontext(0x00000095)]
        HRESULT Clear();
        [id(0x00000039), helpstring("Returns the Index of the Series point where the mouse is over. Returns -1 if none."), helpcontext(0x00000098)]
        HRESULT Clicked(
                        [in] long XCoord, 
                        [in] long YCoord, 
                        [out, retval] long* Y);
        [id(0x0000003a), helpstring("Removes the Index point from the Series"), helpcontext(0x000000b6)]
        HRESULT Delete([in] long Index);
        [id(0x0000003b), helpstring("Adds random sample data to the Series"), helpcontext(0x000000ce)]
        HRESULT FillSampleValues([in] long NumValues);
        [id(0x0000003c), helpstring("Returns the Series point index where the mouse cursor is over. Returns -1 if none."), helpcontext(0x000000e1)]
        HRESULT GetMousePoint([out, retval] long* GetMousePoint);
        [id(0x0000003d), helpstring("Returns True is Index Series point has been added with AddNull"), helpcontext(0x000000eb)]
        HRESULT IsNull(
                        [in] long ValueIndex, 
                        [out, retval] VARIANT_BOOL* Index);
        [id(0x0000003e), helpstring("Refresh dependent Series to force recalculation"), helpcontext(0x00000193)]
        HRESULT RefreshSeries();
        [id(0x0000003f), helpstring("Associates a function to calculate the Series points. Also needs DataSource to be filled"), helpcontext(0x000001c3)]
        HRESULT SetFunction([in] EFunctionType AFunction);
        [id(0x00000040), helpstring("Exchanges two Series points."), helpcontext(0x000001c1)]
        HRESULT SwapValues(
                        [in] long a, 
                        [in] long b);
        [id(0x00000041), helpstring("Converts from horizontal screen pixel coordinate to Series values"), helpcontext(0x00000078)]
        HRESULT XScreenToValue(
                        [in] long ScreenCoord, 
                        [out, retval] double* ScreenPos);
        [id(0x00000042), helpstring("Returns the string text representation of horizontal Value, according to ValueFormat mask."), helpcontext(0x000002ba)]
        HRESULT XValueToText(
                        [in] double SomeValue, 
                        [out, retval] BSTR* Value);
        [id(0x00000043), helpstring("Converts from vertical screen pixel coordinate to Series values"), helpcontext(0x00000077)]
        HRESULT YScreenToValue(
                        [in] long ScreenCoord, 
                        [out, retval] double* ScreenPos);
        [id(0x00000044), helpstring("Returns the string text representation of vertical Value, according to ValueFormat mask."), helpcontext(0x000002c0)]
        HRESULT YValueToText(
                        [in] double SomeValue, 
                        [out, retval] BSTR* Value);
        [id(0x00000007), propget, helpstring("Access to Bezier Series specific properties and methods"), helpcontext(0x00000334)]
        HRESULT asBezier([out, retval] IBezierSeries** Value);
        [id(0x00000008), propget, helpstring("Access to Contour Series specific properties and methods"), helpcontext(0x00000335)]
        HRESULT asContour([out, retval] IContourSeries** Value);
        [id(0x00000045), propget, helpstring("Access to Error Series specific properties and methods"), helpcontext(0x00000336)]
        HRESULT asError([out, retval] IErrorSeries** Value);
        [id(0x00000046), propget, helpstring("Access to Point3D Series specific properties and methods"), helpcontext(0x00000337)]
        HRESULT asPoint3D([out, retval] IPoint3DSeries** Value);
        [id(0x00000047), propget, helpstring("Access to Radar Series specific properties and methods"), helpcontext(0x00000338)]
        HRESULT asRadar([out, retval] IRadarSeries** Value);
        [id(0x00000048), helpstring("Add Null to XY point range"), helpcontext(0x00000350)]
        HRESULT AddNullXY(
                        [in] double X, 
                        [in] double Y, 
                        [in] BSTR ALabel, 
                        [out, retval] long* Value);
        [id(0x00000049), helpstring("Returns string of LegendIndexth value"), helpcontext(0x00000371)]
        HRESULT LegendString(
                        [in] long LegendIndex, 
                        [in] ELegendTextStyle LegendTextStyle, 
                        [out, retval] BSTR* Value);
        [id(0x0000004a), helpstring("Returns colour of LegendIndexth value"), helpcontext(0x00000372)]
        HRESULT LegendItemColor(
                        [in] long LegendIndex, 
                        [out, retval] OLE_COLOR* Value);
        [id(0x0000004b), helpstring("Number of possible items in Legend"), helpcontext(0x00000373)]
        HRESULT CountLegendItems([out, retval] long* Value);
        [id(0x0000004c), helpstring("Returns Series Point index of LegendIndexth value"), helpcontext(0x00000374)]
        HRESULT LegendToValueIndex(
                        [in] long LegendIndex, 
                        [out, retval] long* Value);
        [id(0x0000004d), helpstring("Returns number of Series' points onscreen"), helpcontext(0x00000378)]
        HRESULT VisibleCount([out, retval] long* Value);
        [id(0x0000004f), helpstring("Assign point values from another, Indexed Series"), helpcontext(0x00000389)]
        HRESULT AssignValues([in] long SeriesIndex);
        [id(0x00000020), propget, helpstring("Associate the Series to a horizontal Custom Axis"), helpcontext(0x00000392)]
        HRESULT HorizontalAxisCustom([out, retval] long* Value);
        [id(0x00000020), propput, helpstring("Associate the Series to a horizontal Custom Axis"), helpcontext(0x00000392)]
        HRESULT HorizontalAxisCustom([in] long Value);
        [id(0x0000004e), propget, helpstring("Associate the Series to a vertical Custom Axis"), helpcontext(0x00000393)]
        HRESULT VerticalAxisCustom([out, retval] long* Value);
        [id(0x0000004e), propput, helpstring("Associate the Series to a vertical Custom Axis"), helpcontext(0x00000393)]
        HRESULT VerticalAxisCustom([in] long Value);
        [id(0x00000050), propget, helpstring("Access to Clock series specific properties"), helpcontext(0x000003e7)]
        HRESULT asClock([out, retval] IClockSeries** Value);
        [id(0x00000051), propget, helpstring("Access to Wind Rose series specific properties"), helpcontext(0x000003e8)]
        HRESULT asWindRose([out, retval] IWindRoseSeries** Value);
        [id(0x00000052), propget, helpstring("Access to Bar3D series specific properties"), helpcontext(0x000003f0)]
        HRESULT asBar3D([out, retval] IBar3DSeries** Value);
        [id(0x00000053), propget, helpstring("Access to ImageBar series specific properties"), helpcontext(0x000003f1)]
        HRESULT asImageBar([out, retval] IImageBarSeries** Value);
        [id(0x00000054), helpstring("Disconnects the Series from its Custom Axes."), helpcontext(0x000003fa)]
        HRESULT DisconnectAxisCustom([in] VARIANT_BOOL IsHorizontal);
        [id(0x00000056), propget, helpstring("Returns the X and Y values under the mouse cursor using the series axes scales."), helpcontext(0x000003f5)]
        HRESULT MouseValues([out, retval] ITeePoint2D** Value);
        [id(0x00000055), helpstring("Adds an array of data directly to the Series."), helpcontext(0x00000426)]
        HRESULT AddArray(
                        [in] long ArraySize, 
                        [in] VARIANT YArray, 
                        [in, optional] VARIANT XArray);
        [id(0x00000057), propget, helpstring("Sets the Depth of the series points or interconnection lines."), helpcontext(0x00000541)]
        HRESULT Depth([out, retval] long* Value);
        [id(0x00000057), propput, helpstring("Sets the Depth of the series points or interconnection lines."), helpcontext(0x00000541)]
        HRESULT Depth([in] long Value);
        [id(0x00000059), propget, helpstring("Access to Donut series specific properties"), helpcontext(0x00000427)]
        HRESULT asDonut([out, retval] IDonutSeries** Value);
        [id(0x0000005a), propget, helpstring("Access to TriSurface series specific properties"), helpcontext(0x00000428)]
        HRESULT asTriSurface([out, retval] ITriSurfaceSeries** Value);
        [id(0x0000005b), propget, helpstring("Access to BoxPlot series specific properties"), helpcontext(0x00000429)]
        HRESULT asBoxPlot([out, retval] IBoxPlotSeries** Value);
        [id(0x0000005c), propget, helpstring("Access to Horizontal BoxPlot series specific properties"), helpcontext(0x0000042a)]
        HRESULT asHorizBoxPlot([out, retval] IHorizBoxPlotSeries** Value);
        [id(0x0000005d), propget, helpstring("Access to Histogram series specific properties"), helpcontext(0x0000042b)]
        HRESULT asHistogram([out, retval] IHistogramSeries** Value);
        [id(0x0000005e), propget, helpstring("Access to ColorGrid series specific properties"), helpcontext(0x0000042c)]
        HRESULT asColorGrid([out, retval] IColorGridSeries** Value);
        [id(0x0000005f), propget, helpstring("Access to Horizontal Line series specific properties"), helpcontext(0x0000042d)]
        HRESULT asHorizLine([out, retval] IHorizLineSeries** Value);
        [id(0x00000060), propget, helpstring("Access to BarJoin series specific properties"), helpcontext(0x0000042e)]
        HRESULT asBarJoin([out, retval] IBarJoinSeries** Value);
        [id(0x00000061), propget, helpstring("Access to HighLow series specific properties"), helpcontext(0x0000042f)]
        HRESULT asHighLow([out, retval] IHighLowSeries** Value);
        [id(0x00000062), propget, helpstring("Access to WaterFall series specific properties"), helpcontext(0x00000430)]
        HRESULT asWaterfall([out, retval] IWaterfallSeries** Value);
        [id(0x00000063), propget, helpstring("Access to Smith series specific properties"), helpcontext(0x00000634)]
        HRESULT asSmith([out, retval] ISmithSeries** Value);
        [id(0x00000064), propget, helpstring("Access to Pyramid series specific properties"), helpcontext(0x00000432)]
        HRESULT asPyramid([out, retval] IPyramidSeries** Value);
        [id(0x00000065), propget, helpstring("Access to Map series specific properties"), helpcontext(0x00000433)]
        HRESULT asMap([out, retval] IMapSeries** Value);
        [id(0x00000058), propget, helpstring("Access to Funnel series specific properties"), helpcontext(0x00000635)]
        HRESULT asFunnel([out, retval] IFunnelSeries** Value);
        [id(0x00000066), propget, helpstring("Access to Calender series specific properties"), helpcontext(0x00000636)]
        HRESULT asCalendar([out, retval] ICalendarSeries** Value);
        [id(0x00000067), helpstring("Frees the Series DataSource"), helpcontext(0x00000637)]
        HRESULT FreeDatasource([in] VARIANT_BOOL SurePrompt);
        [id(0x00000068), propget, hidden, helpstring("Internally links Series to Chart Tools"), helpcontext(0x00000638)]
        HRESULT SeriesLink([out, retval] long* Value);
        [id(0x00000069), propget, helpstring("Set dstSingleRecord when Single Record Charting"), helpcontext(0x000006b7)]
        HRESULT DatasourceType([out, retval] EDatasourceType* Value);
        [id(0x00000069), propput, helpstring("Set dstSingleRecord when Single Record Charting"), helpcontext(0x000006b7)]
        HRESULT DatasourceType([in] EDatasourceType Value);
        [id(0x0000006a), propget, helpstring("Series data lists"), helpcontext(0x000006bd)]
        HRESULT ValueLists([out, retval] IValueLists** Value);
        [id(0x0000006b), helpstring("True if value is Nan or Infinite"), helpcontext(0x000006e1)]
        HRESULT IsNan(
                        [in] double Value, 
                        [out, retval] VARIANT_BOOL* retval);
        [id(0x0000006c), helpstring("Deletes range of points from a startpoint in Series"), helpcontext(0x000006fe)]
        HRESULT DeleteRange(
                        [in] long Start, 
                        [in] long Quantity);
    };

    [
      odl,
      uuid(B6C104AD-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Common properties for Function calculations."),
      helpcontext(0x0000026b),
      dual,
      oleautomation
    ]
    interface ITeeFunction : IDispatch {
        [id(0x00000001), propget, helpstring("The number of points to consider for each function calculation"), helpcontext(0x0000017e)]
        HRESULT Period([out, retval] double* Period);
        [id(0x00000001), propput, helpstring("The number of points to consider for each function calculation"), helpcontext(0x0000017e)]
        HRESULT Period([in] double Period);
        [id(0x00000002), propget, helpstring("Accesses the function as a CurveFittingFunction object"), helpcontext(0x0000003d)]
        HRESULT asCurveFit([out, retval] ICurveFittingFunction** asCurveFit);
        [id(0x00000003), propget, helpstring("Accesses the function as a ExpAverageFunction object"), helpcontext(0x0000003c)]
        HRESULT asExpAvg([out, retval] IExpAvgFunction** asExpAvg);
        [id(0x00000004), propget, helpstring("Accesses the function as a MovingAverageFunction object"), helpcontext(0x0000003b)]
        HRESULT asMovAvg([out, retval] IMovingAvgFunction** asMovAvg);
        [id(0x00000005), propget, helpstring("Applies Period to Axis range or points"), helpcontext(0x00000369)]
        HRESULT PeriodStyle([out, retval] EFunctionPeriodStyle* Value);
        [id(0x00000005), propput, helpstring("Applies Period to Axis range or points"), helpcontext(0x00000369)]
        HRESULT PeriodStyle([in] EFunctionPeriodStyle Value);
        [id(0x00000006), propget, helpstring("Where in range Period is applied"), helpcontext(0x00000368)]
        HRESULT PeriodAlign([out, retval] EFunctionPeriodAlign* Value);
        [id(0x00000006), propput, helpstring("Where in range Period is applied"), helpcontext(0x00000368)]
        HRESULT PeriodAlign([in] EFunctionPeriodAlign Value);
        [id(0x00000007), propget, helpstring("Accesses Standard Deviation specific properties"), helpcontext(0x00000370)]
        HRESULT asStdDeviation([out, retval] IStdDeviationFunction** Value);
        [id(0x00000008), helpstring("Stop Function recalc until EndUpdate"), helpcontext(0x000003bb)]
        HRESULT BeginUpdate();
        [id(0x00000009), helpstring("Recalculate function for changes after BeginUpdate"), helpcontext(0x000003bc)]
        HRESULT EndUpdate();
        [id(0x0000000a), propget, helpstring("Accesses RSI specific properties"), helpcontext(0x00000434)]
        HRESULT asRSI([out, retval] IRSIFunction** Value);
        [id(0x0000000b), propget, helpstring("Accesses Bollinger specific properties"), helpcontext(0x00000435)]
        HRESULT asBollinger([out, retval] IBollingerFunction** Value);
        [id(0x0000000c), propget, helpstring("Accesses ADX specific properties"), helpcontext(0x00000436)]
        HRESULT asADX([out, retval] IADXFunction** Value);
        [id(0x0000000d), propget, helpstring("Accesses MACD specific properties"), helpcontext(0x00000437)]
        HRESULT asMACD([out, retval] IMACDFunction** Value);
        [id(0x0000000e), propget, helpstring("Accesses RMS specific properties"), helpcontext(0x00000438)]
        HRESULT asRMS([out, retval] IRMSFunction** Value);
        [id(0x0000000f), propget, helpstring("Accesses Average specific properties"), helpcontext(0x00000639)]
        HRESULT asAverage([out, retval] IAverageFunction** Value);
    };

    [
      odl,
      uuid(B6C104AE-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Attributes for all Series.Marks properties"),
      helpcontext(0x00000250),
      dual,
      oleautomation
    ]
    interface IMarks : ITeeCustomShape {
        [id(0x00000003), propget, helpstring("The pen used to draw a line between the Mark and the Series point"), helpcontext(0x00000036)]
        HRESULT Arrow([out, retval] IPen** Arrow);
        [id(0x00000004), propget, helpstring("The length in pixels from the Mark to the Series point"), helpcontext(0x00000038)]
        HRESULT ArrowLength([out, retval] long* ArrowLength);
        [id(0x00000004), propput, helpstring("The length in pixels from the Mark to the Series point"), helpcontext(0x00000038)]
        HRESULT ArrowLength([in] long ArrowLength);
        [id(0x00000005), propget, helpstring("The color used to fill the Series Marks background"), helpcontext(0x00000057)]
        HRESULT BackColor([out, retval] OLE_COLOR* BackColor);
        [id(0x00000005), propput, helpstring("The color used to fill the Series Marks background"), helpcontext(0x00000057)]
        HRESULT BackColor([in] OLE_COLOR BackColor);
        [id(0x00000006), propget, helpstring("When True, Marks are constrained to chart axis boundaries"), helpcontext(0x0000009a)]
        HRESULT Clip([out, retval] VARIANT_BOOL* Clip);
        [id(0x00000006), propput, helpstring("When True, Marks are constrained to chart axis boundaries"), helpcontext(0x0000009a)]
        HRESULT Clip([in] VARIANT_BOOL Clip);
        [id(0x00000008), propget, helpstring("The pen used to draw the Marks border"), helpcontext(0x000000df)]
        HRESULT Frame([out, retval] IPen** Frame);
        [id(0x00000002), propget, helpstring("The Series Mark style ( values, percents, text, etc )"), helpcontext(0x000001bf)]
        HRESULT Style([out, retval] EMarkStyle* Style);
        [id(0x00000002), propput, helpstring("The Series Mark style ( values, percents, text, etc )"), helpcontext(0x000001bf)]
        HRESULT Style([in] EMarkStyle Style);
        [id(0x00000001), propget, helpstring("Show / hide the Series Marks"), helpcontext(0x000002aa)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x00000001), propput, helpstring("Show / hide the Series Marks"), helpcontext(0x000002aa)]
        HRESULT Visible([in] VARIANT_BOOL Visible);
        [id(0x0000000a), propget, helpstring("Custom Mark positioning"), helpcontext(0x00000342)]
        HRESULT Positions([out, retval] ISeriesMarksPositions** Value);
        [id(0x0000000b), helpstring("Clicked Mark"), helpcontext(0x0000034f)]
        HRESULT Clicked(
                        [in] long X, 
                        [in] long Y, 
                        [out, retval] long* Value);
        [id(0x00000070), propget, helpstring("Depth (Z) position of Mark"), helpcontext(0x00000351)]
        HRESULT ZPosition([out, retval] long* Value);
        [id(0x00000070), propput, helpstring("Depth (Z) position of Mark"), helpcontext(0x00000351)]
        HRESULT ZPosition([in] long Value);
        [id(0x00000007), propget, helpstring("Sets the rotation degree applied to each Point Mark."), helpcontext(0x000005c0)]
        HRESULT Angle([out, retval] long* Value);
        [id(0x00000007), propput, helpstring("Sets the rotation degree applied to each Point Mark."), helpcontext(0x000005c0)]
        HRESULT Angle([in] long Value);
        [id(0x00000009), propget, helpstring("Sets the number of Marks to be drawn."), helpcontext(0x00000518)]
        HRESULT DrawEvery([out, retval] long* Value);
        [id(0x00000009), propput, helpstring("Sets the number of Marks to be drawn."), helpcontext(0x00000518)]
        HRESULT DrawEvery([in] long Value);
        [id(0x0000000d), propget, helpstring("Enables/disables multiline Marks."), helpcontext(0x0000043c)]
        HRESULT Multiline([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000d), propput, helpstring("Enables/disables multiline Marks."), helpcontext(0x0000043c)]
        HRESULT Multiline([in] VARIANT_BOOL Value);
        [id(0x0000000e), helpstring("Resets Marks to their default positions."), helpcontext(0x0000043d)]
        HRESULT ResetPositions();
    };

    [
      odl,
      uuid(B6C104AF-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Linked list of Series values"),
      helpcontext(0x00000211),
      dual,
      oleautomation
    ]
    interface IValueList : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the number of values in the list"), helpcontext(0x000000ab)]
        HRESULT Count([out, retval] long* Count);
        [id(0x00000002), propget, helpstring("Controls if list values are date-time values or simple doubles"), helpcontext(0x000000b3)]
        HRESULT DateTime([out, retval] VARIANT_BOOL* DateTime);
        [id(0x00000002), propput, helpstring("Controls if list values are date-time values or simple doubles"), helpcontext(0x000000b3)]
        HRESULT DateTime([in] VARIANT_BOOL DateTime);
        [id(0x00000003), propget, helpstring("Returns the first value in the list"), helpcontext(0x000000cf)]
        HRESULT First([out, retval] double* First);
        [id(0x00000004), propget, helpstring("Returns the last value in the list"), helpcontext(0x0000010b)]
        HRESULT Last([out, retval] double* Last);
        [id(0x00000005), propget, helpstring("The maximum of the list values"), helpcontext(0x0000011d)]
        HRESULT Maximum([out, retval] double* Maximum);
        [id(0x00000006), propget, helpstring("The minimum of the list values"), helpcontext(0x00000121)]
        HRESULT Minimum([out, retval] double* Minimum);
        [id(0x00000007), propget, helpstring("Controls how list values are sorted when adding them"), helpcontext(0x00000157)]
        HRESULT Order([out, retval] EValueListOrder* Order);
        [id(0x00000007), propput, helpstring("Controls how list values are sorted when adding them"), helpcontext(0x00000157)]
        HRESULT Order([in] EValueListOrder Order);
        [id(0x00000008), propget, helpstring("The sum of all list values"), helpcontext(0x00000246)]
        HRESULT Total([out, retval] double* Total);
        [id(0x00000009), propget, helpstring("The absolute sum of all list values"), helpcontext(0x0000028f)]
        HRESULT TotalABS([out, retval] double* TotalABS);
        [id(0x0000000a), propget, helpstring("Sets / returns the list value for the Index item"), helpcontext(0x0000029a)]
        HRESULT Value(
                        [in] long Index, 
                        [out, retval] double* Value);
        [id(0x0000000a), propput, helpstring("Sets / returns the list value for the Index item"), helpcontext(0x0000029a)]
        HRESULT Value(
                        [in] long Index, 
                        [in] double Value);
        [id(0x0000000b), propget, helpstring("Defines the database field name associated to the list"), helpcontext(0x0000029e)]
        HRESULT ValueSource([out, retval] BSTR* ValueSource);
        [id(0x0000000b), propput, helpstring("Defines the database field name associated to the list"), helpcontext(0x0000029e)]
        HRESULT ValueSource([in] BSTR ValueSource);
        [id(0x0000000c), helpstring("Removes a list item"), helpcontext(0x000000b7)]
        HRESULT Delete([in] long Index);
        [id(0x0000000d), helpstring("Replaces all list values with a sequence, starting from zero"), helpcontext(0x0000012a)]
        HRESULT FillSequence();
        [id(0x0000000e), helpstring("If found, returns the value index of Value parameter. Returns -1 if not found"), helpcontext(0x00000114)]
        HRESULT Locate(
                        [in] double SomeValue, 
                        [out, retval] long* Value);
        [id(0x0000000f), helpstring("Orders the list values according to Order property"), helpcontext(0x000001b4)]
        HRESULT Sort();
        [id(0x00000010), propget, helpstring("Read to check if ValueList modified, set to True to recalculate Max and Min values"), helpcontext(0x0000063a)]
        HRESULT Modified([out, retval] VARIANT_BOOL* Value);
        [id(0x00000010), propput, helpstring("Read to check if ValueList modified, set to True to recalculate Max and Min values"), helpcontext(0x0000063a)]
        HRESULT Modified([in] VARIANT_BOOL Value);
        [id(0x00000011), propget, helpstring("TempValue can be modified in OnBeforeAdd event"), helpcontext(0x000006b8)]
        HRESULT TempValue([out, retval] double* Value);
        [id(0x00000011), propput, helpstring("TempValue can be modified in OnBeforeAdd event"), helpcontext(0x000006b8)]
        HRESULT TempValue([in] double Value);
        [id(0x00000012), propget, helpstring("Returns name of ValueList"), helpcontext(0x000006bc)]
        HRESULT Name([out, retval] BSTR* Value);
    };

    [
      odl,
      uuid(B6C104BD-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Marker properties for Line,Area,Point,Gantt,Bubble,Arrow and Candle Series"),
      helpcontext(0x00000255),
      dual,
      oleautomation
    ]
    interface IPointer : IDispatch {
        [id(0x00000001), propget, helpstring("The brush used to fill point markers"), helpcontext(0x00000075)]
        HRESULT Brush([out, retval] IBrush** Brush);
        [id(0x00000002), propget, helpstring("When True, and Style is rectangle, point markers draw a cube"), helpcontext(0x000000be)]
        HRESULT Draw3D([out, retval] VARIANT_BOOL* Draw3D);
        [id(0x00000002), propput, helpstring("When True, and Style is rectangle, point markers draw a cube"), helpcontext(0x000000be)]
        HRESULT Draw3D([in] VARIANT_BOOL Draw3D);
        [id(0x00000003), propget, helpstring("The horizontal size in pixels of each point marker"), helpcontext(0x000000f5)]
        HRESULT HorizontalSize([out, retval] long* HorizontalSize);
        [id(0x00000003), propput, helpstring("The horizontal size in pixels of each point marker"), helpcontext(0x000000f5)]
        HRESULT HorizontalSize([in] long HorizontalSize);
        [id(0x00000004), propget, helpstring("The vertical size in pixels of each point marker"), helpcontext(0x000002a2)]
        HRESULT VerticalSize([out, retval] long* VerticalSize);
        [id(0x00000004), propput, helpstring("The vertical size in pixels of each point marker"), helpcontext(0x000002a2)]
        HRESULT VerticalSize([in] long VerticalSize);
        [id(0x00000005), propget, helpstring("When True, axis are expanded to leave space for point markers"), helpcontext(0x000000f9)]
        HRESULT InflateMargins([out, retval] VARIANT_BOOL* InflateMargins);
        [id(0x00000005), propput, helpstring("When True, axis are expanded to leave space for point markers"), helpcontext(0x000000f9)]
        HRESULT InflateMargins([in] VARIANT_BOOL InflateMargins);
        [id(0x00000006), propget, helpstring("The pen used to draw the point marker borders"), helpcontext(0x0000017b)]
        HRESULT Pen([out, retval] IPen** Pen);
        [id(0x00000007), propget, helpstring("The point markers style (rectangle, triangle, etc)"), helpcontext(0x000001c0)]
        HRESULT Style([out, retval] EPointerStyle* Style);
        [id(0x00000007), propput, helpstring("The point markers style (rectangle, triangle, etc)"), helpcontext(0x000001c0)]
        HRESULT Style([in] EPointerStyle Style);
        [id(0x00000008), propget, helpstring("Shows / hides the point markers"), helpcontext(0x000002ab)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x00000008), propput, helpstring("Shows / hides the point markers"), helpcontext(0x000002ab)]
        HRESULT Visible([in] VARIANT_BOOL Visible);
        [id(0x00000049), propget, helpstring("Enable Series Dark shading"), helpcontext(0x00000353)]
        HRESULT Dark3D([out, retval] VARIANT_BOOL* Value);
        [id(0x00000049), propput, helpstring("Enable Series Dark shading"), helpcontext(0x00000353)]
        HRESULT Dark3D([in] VARIANT_BOOL Value);
        [id(0x00000009), helpstring("Displays a pointer at the specified position and size"), helpcontext(0x0000043e)]
        HRESULT DrawPointer(
                        [in] long DC, 
                        [in] VARIANT_BOOL Is3D, 
                        [in] long px, 
                        [in] long py, 
                        [in] long tmpHoriz, 
                        [in] long tmpVert, 
                        [in] OLE_COLOR AColor, 
                        [in] EPointerStyle AStyle);
    };

    [
      odl,
      uuid(B6C104BE-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Common properties for LineSeries and AreaSeries"),
      helpcontext(0x0000021e),
      dual,
      oleautomation
    ]
    interface ICustomSeries : IDispatch {
        [id(0x00000001), propget, helpstring("The attributes of the line pointer (point markers)"), helpcontext(0x00000184)]
        HRESULT Pointer([out, retval] IPointer** Pointer);
        [id(0x00000002), propget, helpstring("Draw the line in steps mode"), helpcontext(0x000001b6)]
        HRESULT Stairs([out, retval] VARIANT_BOOL* Stairs);
        [id(0x00000002), propput, helpstring("Draw the line in steps mode"), helpcontext(0x000001b6)]
        HRESULT Stairs([in] VARIANT_BOOL Stairs);
        [id(0x00000003), propget, helpstring("When Stair is True, controls if steps will be drawn inverted"), helpcontext(0x000000fc)]
        HRESULT InvertedStairs([out, retval] VARIANT_BOOL* InvertedStairs);
        [id(0x00000003), propput, helpstring("When Stair is True, controls if steps will be drawn inverted"), helpcontext(0x000000fc)]
        HRESULT InvertedStairs([in] VARIANT_BOOL InvertedStairs);
        [id(0x00000004), propget, helpstring("The pen used to draw the line"), helpcontext(0x00000113)]
        HRESULT LinePen([out, retval] IPen** LinePen);
        [id(0x00000005), propget, helpstring("The brush used to fill the Line points in 3D mode"), helpcontext(0x00000112)]
        HRESULT LineBrush([out, retval] EBrushStyle* LineBrush);
        [id(0x00000005), propput, helpstring("The brush used to fill the Line points in 3D mode"), helpcontext(0x00000112)]
        HRESULT LineBrush([in] EBrushStyle LineBrush);
        [id(0x00000006), propget, helpstring("Controls if OnClickSeries event happens when clicking over the line"), helpcontext(0x00000097)]
        HRESULT ClickableLine([out, retval] VARIANT_BOOL* ClickableLine);
        [id(0x00000006), propput, helpstring("Controls if OnClickSeries event happens when clicking over the line"), helpcontext(0x00000097)]
        HRESULT ClickableLine([in] VARIANT_BOOL ClickableLine);
        [id(0x0000004c), propget, helpstring("Sets height of Series Line when 3D"), helpcontext(0x00000358)]
        HRESULT LineHeight([out, retval] long* Value);
        [id(0x0000004c), propput, helpstring("Sets height of Series Line when 3D"), helpcontext(0x00000358)]
        HRESULT LineHeight([in] long Value);
        [id(0x00000049), propget, helpstring("Enable Series Dark shading"), helpcontext(0x00000353)]
        HRESULT Dark3D([out, retval] VARIANT_BOOL* Value);
        [id(0x00000049), propput, helpstring("Enable Series Dark shading"), helpcontext(0x00000353)]
        HRESULT Dark3D([in] VARIANT_BOOL Value);
        [id(0x00000009), propget, helpstring("Accesses Brush attributes including images"), helpcontext(0x0000043f)]
        HRESULT Brush([out, retval] IBrush** Value);
        [id(0x00000051), propget, helpstring("Enables/Disables the coloring of each connecting line of a series. "), helpcontext(0x00000440)]
        HRESULT ColorEachLine([out, retval] VARIANT_BOOL* Value);
        [id(0x00000051), propput, helpstring("Enables/Disables the coloring of each connecting line of a series. "), helpcontext(0x00000440)]
        HRESULT ColorEachLine([in] VARIANT_BOOL Value);
        [id(0x00000007), propget, helpstring("Outline border of Line"), helpcontext(0x000006cc)]
        HRESULT Outline([out, retval] IPen** Value);
        [id(0x00000052), propget, helpstring("Fill transparency 0..100"), helpcontext(0x000006cd)]
        HRESULT Transparency([out, retval] long* Value);
        [id(0x00000052), propput, helpstring("Fill transparency 0..100"), helpcontext(0x000006cd)]
        HRESULT Transparency([in] long Value);
    };

    [
      odl,
      uuid(B6C104BF-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Areas with optional Pointer properties (markers)"),
      helpcontext(0x000001c4),
      dual,
      oleautomation
    ]
    interface IAreaSeries : ICustomSeries {
        [id(0x00000014), propget, helpstring("The brush used to fill the area points"), helpcontext(0x00000034)]
        HRESULT AreaBrush([out, retval] EBrushStyle* AreaBrush);
        [id(0x00000014), propput, helpstring("The brush used to fill the area points"), helpcontext(0x00000034)]
        HRESULT AreaBrush([in] EBrushStyle AreaBrush);
        [id(0x00000015), propget, helpstring("The pen used to draw the area lines"), helpcontext(0x00000035)]
        HRESULT AreaPen([out, retval] IPen** AreaPen);
        [id(0x00000016), propget, helpstring("Determines who multiple areas will be displayed"), helpcontext(0x0000012b)]
        HRESULT MultiArea([out, retval] EMultiArea* MultiArea);
        [id(0x00000016), propput, helpstring("Determines who multiple areas will be displayed"), helpcontext(0x0000012b)]
        HRESULT MultiArea([in] EMultiArea MultiArea);
        [id(0x00000017), helpstring("Returns the pixels coordinate of the origin ValueIndexth area point"), helpcontext(0x000000e7)]
        HRESULT GetOriginPos(
                        [in] long AValueIndex, 
                        [out, retval] long* ValueIndex);
        [id(0x00000008), propget, helpstring("Default True: Bars will be bottom aligned to the YOrigin property value."), helpcontext(0x0000054e)]
        HRESULT UseYOrigin([out, retval] VARIANT_BOOL* Value);
        [id(0x00000008), propput, helpstring("Default True: Bars will be bottom aligned to the YOrigin property value."), helpcontext(0x0000054e)]
        HRESULT UseYOrigin([in] VARIANT_BOOL Value);
        [id(0x0000000a), propget, helpstring("Defines the bottom position of the Area points."), helpcontext(0x0000054f)]
        HRESULT YOrigin([out, retval] double* Value);
        [id(0x0000000a), propput, helpstring("Defines the bottom position of the Area points."), helpcontext(0x0000054f)]
        HRESULT YOrigin([in] double Value);
    };

    [
      odl,
      uuid(B6C104C0-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("XY Point (scatter) with point markers"),
      helpcontext(0x00000249),
      dual,
      oleautomation
    ]
    interface IPointSeries : IDispatch {
        [id(0x00000001), propget, helpstring("The attributes of the line pointer (point markers)"), helpcontext(0x00000184)]
        HRESULT Pointer([out, retval] IPointer** Pointer);
        [id(0x00000002), propget, helpstring("Dark shading"), helpcontext(0x00000353)]
        HRESULT Dark3D([out, retval] VARIANT_BOOL* Value);
        [id(0x00000002), propput, helpstring("Dark shading"), helpcontext(0x00000353)]
        HRESULT Dark3D([in] VARIANT_BOOL Value);
    };

    [
      odl,
      uuid(B6C104C1-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Line/Strip Series with optional Pointer (markers) properties"),
      helpcontext(0x00000237),
      dual,
      oleautomation
    ]
    interface ILineSeries : ICustomSeries {
        [id(0x00000008), propget, helpstring("Controls how Line Series are stacked."), helpcontext(0x000005be)]
        HRESULT Stacked([out, retval] ECustomSeriesStack* Value);
        [id(0x00000008), propput, helpstring("Controls how Line Series are stacked."), helpcontext(0x000005be)]
        HRESULT Stacked([in] ECustomSeriesStack Value);
    };

    [
      odl,
      uuid(B6C104C2-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Simple Fast Line Series in 2D"),
      helpcontext(0x0000022b),
      dual,
      oleautomation
    ]
    interface IFastLineSeries : IDispatch {
        [id(0x00000001), propget, helpstring("The pen used to draw the line"), helpcontext(0x00000113)]
        HRESULT LinePen([out, retval] IPen** LinePen);
        [id(0x00000002), helpstring("Adds a new point to the FastLine Series and draws only this point"), helpcontext(0x000002e8)]
        HRESULT AddRealTime(
                        [in] double X, 
                        [in] double Y, 
                        [optional, defaultvalue("")] BSTR SomeLabel, 
                        [optional, defaultvalue(536870912)] OLE_COLOR SomeColor, 
                        [out, retval] long* AColor);
        [id(0x00000003), propget, helpstring("When True draw only first of duplicated x values"), helpcontext(0x000006ce)]
        HRESULT DrawAllPoints([out, retval] VARIANT_BOOL* Value);
        [id(0x00000003), propput, helpstring("When True draw only first of duplicated x values"), helpcontext(0x000006ce)]
        HRESULT DrawAllPoints([in] VARIANT_BOOL Value);
    };

    [
      odl,
      uuid(B6C104C3-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Common properties for PieSeries and Polar/Radar Series"),
      helpcontext(0x00000216),
      dual,
      oleautomation
    ]
    interface ICircledSeries : IDispatch {
        [id(0x00000001), propget, helpstring("The horizontal radius in pixels"), helpcontext(0x000002b9)]
        HRESULT XRadius([out, retval] long* XRadius);
        [id(0x00000001), propput, helpstring("The horizontal radius in pixels"), helpcontext(0x000002b9)]
        HRESULT XRadius([in] long XRadius);
        [id(0x00000002), propget, helpstring("The vertical radius in pixels"), helpcontext(0x000002bf)]
        HRESULT YRadius([out, retval] long* YRadius);
        [id(0x00000002), propput, helpstring("The vertical radius in pixels"), helpcontext(0x000002bf)]
        HRESULT YRadius([in] long YRadius);
        [id(0x00000004), propget, helpstring("The circle central horizontal position in pixels"), helpcontext(0x00000092)]
        HRESULT XCenter([out, retval] long* XCenter);
        [id(0x00000005), propget, helpstring("The circle central vertical position in pixels"), helpcontext(0x00000093)]
        HRESULT YCenter([out, retval] long* YCenter);
        [id(0x00000006), propget, helpstring("The circle width in pixels"), helpcontext(0x0000017f)]
        HRESULT CircleWidth([out, retval] long* CircleWidth);
        [id(0x00000007), propget, helpstring("The circle height in pixels"), helpcontext(0x00000180)]
        HRESULT CircleHeight([out, retval] long* CircleHeight);
        [id(0x00000008), propget, helpstring("The color used to fill the circle (for Polar series)"), helpcontext(0x00000091)]
        HRESULT CircleBackColor([out, retval] OLE_COLOR* CircleBackColor);
        [id(0x00000008), propput, helpstring("The color used to fill the circle (for Polar series)"), helpcontext(0x00000091)]
        HRESULT CircleBackColor([in] OLE_COLOR CircleBackColor);
        [id(0x00000009), propget, helpstring("Controls if drawing an ellipse or a circle"), helpcontext(0x00000094)]
        HRESULT Circled([out, retval] VARIANT_BOOL* Circled);
        [id(0x00000009), propput, helpstring("Controls if drawing an ellipse or a circle"), helpcontext(0x00000094)]
        HRESULT Circled([in] VARIANT_BOOL Circled);
        [id(0x0000000a), propget, helpstring("From 0 to 360 degree, the circle rotation"), helpcontext(0x0000019a)]
        HRESULT RotationAngle([out, retval] long* RotationAngle);
        [id(0x0000000a), propput, helpstring("From 0 to 360 degree, the circle rotation"), helpcontext(0x0000019a)]
        HRESULT RotationAngle([in] long RotationAngle);
        [id(0x0000000b), helpstring("Converts an angle/radius to XY pixels coordinates"), helpcontext(0x0000002f)]
        HRESULT AngleToPoint(
                        [in] double Angle, 
                        [in] double AXRadius, 
                        [in] double AYRadius, 
                        [out, retval] TeePoint2D* Value);
        [id(0x0000000c), helpstring("Converts an XY pair of coordinates to an angle"), helpcontext(0x00000183)]
        HRESULT PointToAngle(
                        [in] long XCoord, 
                        [in] long YCoord, 
                        [out, retval] double* Y);
    };

    [
      odl,
      uuid(B6C104C4-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Circular Pie Series drawing pie slices of Values"),
      helpcontext(0x00000247),
      dual,
      oleautomation
    ]
    interface IPieSeries : ICircledSeries {
        [id(0x00000016), propget, helpstring("Draw Pie slices using brush patterns"), helpcontext(0x00000298)]
        HRESULT UsePatterns([out, retval] VARIANT_BOOL* UsePatterns);
        [id(0x00000016), propput, helpstring("Draw Pie slices using brush patterns"), helpcontext(0x00000298)]
        HRESULT UsePatterns([in] VARIANT_BOOL UsePatterns);
        [id(0x00000017), propget, helpstring("The list of pie values"), helpcontext(0x00000182)]
        HRESULT PieValues([out, retval] IValueList** PieValues);
        [id(0x00000018), propget, helpstring("Controls if 3D Pie areas will be drawn with dark colors"), helpcontext(0x000000b0)]
        HRESULT Dark3D([out, retval] VARIANT_BOOL* Dark3D);
        [id(0x00000018), propput, helpstring("Controls if 3D Pie areas will be drawn with dark colors"), helpcontext(0x000000b0)]
        HRESULT Dark3D([in] VARIANT_BOOL Dark3D);
        [id(0x00000019), propget, helpstring("Explode biggest slice by value"), helpcontext(0x000002f4)]
        HRESULT ExplodeBiggest([out, retval] long* Value);
        [id(0x00000019), propput, helpstring("Explode biggest slice by value"), helpcontext(0x000002f4)]
        HRESULT ExplodeBiggest([in] long Value);
        [id(0x0000001a), propget, helpstring("Enables slice grouping"), helpcontext(0x000002f5)]
        HRESULT OtherSlice([out, retval] IPieOtherSlice** Value);
        [id(0x0000001b), propget, helpstring("Explode any slice"), helpcontext(0x0000032f)]
        HRESULT ExplodedSlice([out, retval] IExplodedSlices** Value);
        [id(0x0000001c), propget, helpstring("Pie line pen"), helpcontext(0x00000352)]
        HRESULT PiePen([out, retval] IPen** Value);
        [id(0x00000003), propget, helpstring("Sets the characteristics of the Pie Shadow."), helpcontext(0x00000441)]
        HRESULT Shadow([out, retval] ITeeShadow** Value);
        [id(0x0000000d), propget, helpstring("Determines the internal angle of the Pie slice displayed."), helpcontext(0x00000442)]
        HRESULT AngleSize([out, retval] long* Value);
        [id(0x0000000d), propput, helpstring("Determines the internal angle of the Pie slice displayed."), helpcontext(0x00000442)]
        HRESULT AngleSize([in] long Value);
    };

    [
      odl,
      uuid(B6C104C5-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Draws circles or shapes at XY positions with specific Radius"),
      helpcontext(0x000001d3),
      dual,
      oleautomation
    ]
    interface IBubbleSeries : IPointSeries {
        [id(0x0000001e), propget, helpstring("The list of bubble radius values"), helpcontext(0x00000192)]
        HRESULT RadiusValues([out, retval] IValueList** RadiusValues);
        [id(0x0000001f), propget, helpstring("Draw bubbles adjusting XY radius to feel squared"), helpcontext(0x000001b5)]
        HRESULT Squared([out, retval] VARIANT_BOOL* Squared);
        [id(0x0000001f), propput, helpstring("Draw bubbles adjusting XY radius to feel squared"), helpcontext(0x000001b5)]
        HRESULT Squared([in] VARIANT_BOOL Squared);
        [id(0x00000020), helpstring("Adds a new bubble point to the Series"), helpcontext(0x00000018)]
        HRESULT AddBubble(
                        [in] double AX, 
                        [in] double AY, 
                        [in] double ARadius, 
                        [in] BSTR AXLabel, 
                        [in] OLE_COLOR Value, 
                        [out, retval] long* AColor);
    };

    [
      odl,
      uuid(B6C104C7-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Scheduling horizontal bars with connecting lines"),
      helpcontext(0x0000022d),
      dual,
      oleautomation
    ]
    interface IGanttSeries : IPointSeries {
        [id(0x0000001e), propget, helpstring("The pen used to draw the lines connecting gantt bars"), helpcontext(0x000000a7)]
        HRESULT ConnectingPen([out, retval] IPen** ConnectingPen);
        [id(0x0000001f), propget, helpstring("The list of End values for each gantt bar"), helpcontext(0x000000c4)]
        HRESULT EndValues([out, retval] IValueList** EndValues);
        [id(0x00000020), propget, helpstring("The list of Start values for each gantt bar"), helpcontext(0x000001b9)]
        HRESULT StartValues([out, retval] IValueList** StartValues);
        [id(0x00000021), propget, helpstring("The list of indexes of each gantt bar connection"), helpcontext(0x0000012f)]
        HRESULT NextTask([out, retval] IValueList** NextTask);
        [id(0x00000022), helpstring("Adds a new gantt bar to the Series"), helpcontext(0x0000001a)]
        HRESULT AddGantt(
                        [in] double AStart, 
                        [in] double AEnd, 
                        [in] double AY, 
                        [in] BSTR SomeLabel, 
                        [out, retval] long* AXLabel);
        [id(0x00000023), helpstring("Adds a new gantt bar specifying color"), helpcontext(0x0000001b)]
        HRESULT AddGanttColor(
                        [in] double AStart, 
                        [in] double AEnd, 
                        [in] double AY, 
                        [in] BSTR AXLabel, 
                        [in] OLE_COLOR Value, 
                        [out, retval] long* AColor);
    };

    [
      odl,
      uuid(B6C104C8-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Draws shapes and text at XY coordinates"),
      helpcontext(0x00000209),
      dual,
      oleautomation
    ]
    interface IShapeSeries : IDispatch {
        [id(0x00000001), propget, helpstring("Controls the shape text alignment"), helpcontext(0x00000029)]
        HRESULT Alignment([out, retval] ETextAlignment* Alignment);
        [id(0x00000001), propput, helpstring("Controls the shape text alignment"), helpcontext(0x00000029)]
        HRESULT Alignment([in] ETextAlignment Alignment);
        [id(0x00000002), propget, helpstring("The background shape color and style"), helpcontext(0x0000006c)]
        HRESULT Brush([out, retval] IBrush** Brush);
        [id(0x00000003), propget, helpstring("The font used to draw the shape text"), helpcontext(0x000000d6)]
        HRESULT Font([out, retval] IChartFont** Font);
        [id(0x00000004), propget, helpstring("The pen used to draw the shape border"), helpcontext(0x00000178)]
        HRESULT Pen([out, retval] IPen** Pen);
        [id(0x00000005), propget, helpstring("When shape style is rectangle, draw round corners"), helpcontext(0x0000019c)]
        HRESULT RoundRectangle([out, retval] VARIANT_BOOL* RoundRectangle);
        [id(0x00000005), propput, helpstring("When shape style is rectangle, draw round corners"), helpcontext(0x0000019c)]
        HRESULT RoundRectangle([in] VARIANT_BOOL RoundRectangle);
        [id(0x00000006), propget, helpstring("Sets the shape style (rectangle, triangle, etc)"), helpcontext(0x000001be)]
        HRESULT Style([out, retval] EShapeStyle* Style);
        [id(0x00000006), propput, helpstring("Sets the shape style (rectangle, triangle, etc)"), helpcontext(0x000001be)]
        HRESULT Style([in] EShapeStyle Style);
        [id(0x00000007), propget, helpstring("The string collection for shape text"), helpcontext(0x00000281)]
        HRESULT Text([out, retval] IStrings** Text);
        [id(0x00000008), propget, helpstring("Controls if shape background is filled or not"), helpcontext(0x00000291)]
        HRESULT Transparent([out, retval] VARIANT_BOOL* Transparent);
        [id(0x00000008), propput, helpstring("Controls if shape background is filled or not"), helpcontext(0x00000291)]
        HRESULT Transparent([in] VARIANT_BOOL Transparent);
        [id(0x00000009), propget, helpstring("The left shape coordinate"), helpcontext(0x000002b5)]
        HRESULT X0([out, retval] double* X0);
        [id(0x00000009), propput, helpstring("The left shape coordinate"), helpcontext(0x000002b5)]
        HRESULT X0([in] double X0);
        [id(0x0000000a), propget, helpstring("The right shape coordinate"), helpcontext(0x000002b5)]
        HRESULT X1([out, retval] double* X1);
        [id(0x0000000a), propput, helpstring("The right shape coordinate"), helpcontext(0x000002b5)]
        HRESULT X1([in] double X1);
        [id(0x0000000b), propget, helpstring("Controls if shape coordinates are in pixels or in axis scales"), helpcontext(0x000002bc)]
        HRESULT XYStyle([out, retval] EShapeXYStyle* XYStyle);
        [id(0x0000000b), propput, helpstring("Controls if shape coordinates are in pixels or in axis scales"), helpcontext(0x000002bc)]
        HRESULT XYStyle([in] EShapeXYStyle XYStyle);
        [id(0x0000000c), propget, helpstring("The top shape coordinate"), helpcontext(0x000002b5)]
        HRESULT Y0([out, retval] double* Y0);
        [id(0x0000000c), propput, helpstring("The top shape coordinate"), helpcontext(0x000002b5)]
        HRESULT Y0([in] double Y0);
        [id(0x0000000d), propget, helpstring("The bottom shape coordinate"), helpcontext(0x000002b5)]
        HRESULT Y1([out, retval] double* Y1);
        [id(0x0000000d), propput, helpstring("The bottom shape coordinate"), helpcontext(0x000002b5)]
        HRESULT Y1([in] double Y1);
        [id(0x0000000e), helpstring("Load image to Shape background"), helpcontext(0x00000361)]
        HRESULT ShapeImageLoad([in] BSTR FileName);
        [id(0x0000000f), helpstring("Clear Shape BackImage"), helpcontext(0x00000362)]
        HRESULT ShapeImageClear();
        [id(0x00000010), propget, helpstring("Sets vertical alignment of Text within a TChartShape Series shape."), helpcontext(0x0000058d)]
        HRESULT VertAlign([out, retval] ETeeVertAlign* Value);
        [id(0x00000010), propput, helpstring("Sets vertical alignment of Text within a TChartShape Series shape."), helpcontext(0x0000058d)]
        HRESULT VertAlign([in] ETeeVertAlign Value);
        [id(0x00000011), propget, helpstring("Gradient fill of Shape"), helpcontext(0x000006f8)]
        HRESULT Gradient([out, retval] IGradient** Value);
    };

    [
      odl,
      uuid(B6C104C9-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Draws Arrows from Start XY to End XY values"),
      helpcontext(0x000001c7),
      dual,
      oleautomation
    ]
    interface IArrowSeries : IPointSeries {
        [id(0x0000001e), propget, helpstring("The arrows head height in pixels"), helpcontext(0x00000037)]
        HRESULT ArrowHeight([out, retval] long* ArrowHeight);
        [id(0x0000001e), propput, helpstring("The arrows head height in pixels"), helpcontext(0x00000037)]
        HRESULT ArrowHeight([in] long ArrowHeight);
        [id(0x0000001f), propget, helpstring("The arrows head width in pixels"), helpcontext(0x00000039)]
        HRESULT ArrowWidth([out, retval] long* ArrowWidth);
        [id(0x0000001f), propput, helpstring("The arrows head width in pixels"), helpcontext(0x00000039)]
        HRESULT ArrowWidth([in] long ArrowWidth);
        [id(0x00000020), propget, helpstring("The list of ending horizontal values for each arrow"), helpcontext(0x000000c5)]
        HRESULT EndXValues([out, retval] IValueList** EndXValues);
        [id(0x00000021), propget, helpstring("The list of ending vertical values for each arrow"), helpcontext(0x000000c6)]
        HRESULT EndYValues([out, retval] IValueList** EndYValues);
        [id(0x00000022), propget, helpstring("The list of starting horizontal values for each arrow"), helpcontext(0x000001ba)]
        HRESULT StartXValues([out, retval] IValueList** StartXValues);
        [id(0x00000023), propget, helpstring("The list of starting vertical values for each arrow"), helpcontext(0x000001bb)]
        HRESULT StartYValues([out, retval] IValueList** StartYValues);
        [id(0x00000024), helpstring("Adds a new arrow to the Series"), helpcontext(0x00000017)]
        HRESULT AddArrow(
                        [in] double X0, 
                        [in] double Y0, 
                        [in] double X1, 
                        [in] double Y1, 
                        [in] BSTR ALabel, 
                        [in] OLE_COLOR Value, 
                        [out, retval] long* AColor);
    };

    [
      odl,
      uuid(B6C104CA-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Common properties for BarSeries and HorizBarSeries"),
      helpcontext(0x0000021b),
      dual,
      oleautomation
    ]
    interface ICustomBarSeries : IDispatch {
        [id(0x00000014), propget, helpstring("Controls how multiple Bar Series will be displayed"), helpcontext(0x0000012d)]
        HRESULT MultiBar([out, retval] EMultiBar* MultiBar);
        [id(0x00000014), propput, helpstring("Controls how multiple Bar Series will be displayed"), helpcontext(0x0000012d)]
        HRESULT MultiBar([in] EMultiBar MultiBar);
        [id(0x00000015), propget, helpstring("Adjusts Bar marks to avoid overlapping"), helpcontext(0x0000004e)]
        HRESULT AutoMarkPosition([out, retval] VARIANT_BOOL* AutoMarkPosition);
        [id(0x00000015), propput, helpstring("Adjusts Bar marks to avoid overlapping"), helpcontext(0x0000004e)]
        HRESULT AutoMarkPosition([in] VARIANT_BOOL AutoMarkPosition);
        [id(0x00000016), propget, helpstring("The brush used to fill the Bars"), helpcontext(0x0000005d)]
        HRESULT BarBrush([out, retval] IBrush** BarBrush);
        [id(0x00000017), propget, helpstring("The pen used to draw the Bar borders"), helpcontext(0x0000005f)]
        HRESULT BarPen([out, retval] IPen** BarPen);
        [id(0x00000018), propget, helpstring("The Bar style (cube, pyramid, ellipse, etc)"), helpcontext(0x00000060)]
        HRESULT BarStyle([out, retval] EBarStyle* BarStyle);
        [id(0x00000018), propput, helpstring("The Bar style (cube, pyramid, ellipse, etc)"), helpcontext(0x00000060)]
        HRESULT BarStyle([in] EBarStyle BarStyle);
        [id(0x00000019), propget, helpstring("The Bar widths in percent ( default 70% )"), helpcontext(0x00000062)]
        HRESULT BarWidthPercent([out, retval] long* BarWidthPercent);
        [id(0x00000019), propput, helpstring("The Bar widths in percent ( default 70% )"), helpcontext(0x00000062)]
        HRESULT BarWidthPercent([in] long BarWidthPercent);
        [id(0x0000001a), propget, helpstring("When True, Bar sides are filled with darker colors"), helpcontext(0x000000b0)]
        HRESULT Dark3D([out, retval] VARIANT_BOOL* Dark3D);
        [id(0x0000001a), propput, helpstring("When True, Bar sides are filled with darker colors"), helpcontext(0x000000b0)]
        HRESULT Dark3D([in] VARIANT_BOOL Dark3D);
        [id(0x0000001b), propget, helpstring("The Bars displacement in percent of Bar width"), helpcontext(0x00000133)]
        HRESULT OffsetPercent([out, retval] long* OffsetPercent);
        [id(0x0000001b), propput, helpstring("The Bars displacement in percent of Bar width"), helpcontext(0x00000133)]
        HRESULT OffsetPercent([in] long OffsetPercent);
        [id(0x0000001c), propget, helpstring("When True, the Series leaves additional margins from the axis"), helpcontext(0x000001b3)]
        HRESULT SideMargins([out, retval] VARIANT_BOOL* SideMargins);
        [id(0x0000001c), propput, helpstring("When True, the Series leaves additional margins from the axis"), helpcontext(0x000001b3)]
        HRESULT SideMargins([in] VARIANT_BOOL SideMargins);
        [id(0x0000001d), propget, helpstring("When True, the Origin property is used as the Bars bottom"), helpcontext(0x00000299)]
        HRESULT UseOrigin([out, retval] VARIANT_BOOL* UseOrigin);
        [id(0x0000001d), propput, helpstring("When True, the Origin property is used as the Bars bottom"), helpcontext(0x00000299)]
        HRESULT UseOrigin([in] VARIANT_BOOL UseOrigin);
        [id(0x0000001e), propget, helpstring("When UseOrigin is True, Origin is the bottom bar value"), helpcontext(0x000002be)]
        HRESULT Origin([out, retval] double* Origin);
        [id(0x0000001e), propput, helpstring("When UseOrigin is True, Origin is the bottom bar value"), helpcontext(0x000002be)]
        HRESULT Origin([in] double Origin);
        [id(0x0000001f), helpstring("Returns the baseline pixel coordinate of ValueIndexth Bar"), helpcontext(0x000000e8)]
        HRESULT GetOriginPos(
                        [in] long SomeValueIndex, 
                        [out, retval] long* ValueIndex);
        [id(0x00000020), propget, helpstring("Enables auto resize of Bar on zoom"), helpcontext(0x00000359)]
        HRESULT AutoBarSize([out, retval] VARIANT_BOOL* Value);
        [id(0x00000020), propput, helpstring("Enables auto resize of Bar on zoom"), helpcontext(0x00000359)]
        HRESULT AutoBarSize([in] VARIANT_BOOL Value);
        [id(0x00000021), helpstring("Load Bar image"), helpcontext(0x0000035a)]
        HRESULT BarImageLoad([in] BSTR FileName);
        [id(0x00000022), helpstring("Clear Bar image"), helpcontext(0x0000035b)]
        HRESULT BarImageClear();
        [id(0x0000002d), propget, helpstring("Sets the characteristics of gradients within Bars of a Bar Series."), helpcontext(0x00000443)]
        HRESULT Gradient([out, retval] IGradient** Value);
        [id(0x00000002), propget, helpstring("Assigns a BarSeries to a specified stack."), helpcontext(0x0000055b)]
        HRESULT StackGroup([out, retval] long* Value);
        [id(0x00000002), propput, helpstring("Assigns a BarSeries to a specified stack."), helpcontext(0x0000055b)]
        HRESULT StackGroup([in] long Value);
        [id(0x0000006f), propget, helpstring("Sets percentage of cone displayed."), helpcontext(0x00000444)]
        HRESULT ConePercent([out, retval] long* Value);
        [id(0x0000006f), propput, helpstring("Sets percentage of cone displayed."), helpcontext(0x00000444)]
        HRESULT ConePercent([in] long Value);
    };

    [
      odl,
      uuid(B6C104CB-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Vertical Bars Series ( Normal, Side-To-Side and Stacked)"),
      helpcontext(0x000001cd),
      dual,
      oleautomation
    ]
    interface IBarSeries : ICustomBarSeries {
        [id(0x00000028), propget, helpstring("Custom Bar width in pixels (overrides BarWidthPercent)"), helpcontext(0x00000061)]
        HRESULT BarWidth([out, retval] long* BarWidth);
        [id(0x00000028), propput, helpstring("Custom Bar width in pixels (overrides BarWidthPercent)"), helpcontext(0x00000061)]
        HRESULT BarWidth([in] long BarWidth);
    };

    [
      odl,
      uuid(B6C104DB-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Horizontal Bars Series (Normal, Side-To-Side and Stacked)"),
      helpcontext(0x00000232),
      dual,
      oleautomation
    ]
    interface IHorizBarSeries : ICustomBarSeries {
        [id(0x00000028), propget, helpstring("Custom Bar height in pixels (overrides BarWidthPercent)"), helpcontext(0x0000005e)]
        HRESULT BarHeight([out, retval] long* BarHeight);
        [id(0x00000028), propput, helpstring("Custom Bar height in pixels (overrides BarWidthPercent)"), helpcontext(0x0000005e)]
        HRESULT BarHeight([in] long BarHeight);
    };

    [
      odl,
      uuid(B6C104DC-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Financial Candle Bar and Candle Stick series"),
      helpcontext(0x000001d6),
      dual,
      oleautomation
    ]
    interface ICandleSeries : IPointSeries {
        [id(0x00000023), propget, helpstring("The Candle style ( Bar or Stick )"), helpcontext(0x00000085)]
        HRESULT CandleStyle([out, retval] ECandleStyle* CandleStyle);
        [id(0x00000023), propput, helpstring("The Candle style ( Bar or Stick )"), helpcontext(0x00000085)]
        HRESULT CandleStyle([in] ECandleStyle CandleStyle);
        [id(0x00000024), propget, helpstring("The width in pixels of each Candle bar"), helpcontext(0x00000086)]
        HRESULT CandleWidth([out, retval] long* CandleWidth);
        [id(0x00000024), propput, helpstring("The width in pixels of each Candle bar"), helpcontext(0x00000086)]
        HRESULT CandleWidth([in] long CandleWidth);
        [id(0x0000001e), propget, helpstring("The list of Close price values"), helpcontext(0x0000009e)]
        HRESULT CloseValues([out, retval] IValueList** CloseValues);
        [id(0x0000001f), propget, helpstring("The list of Date values"), helpcontext(0x000000b5)]
        HRESULT DateValues([out, retval] IValueList** DateValues);
        [id(0x00000025), propget, helpstring("The color used to fill Candles with lower closing prices"), helpcontext(0x000000bc)]
        HRESULT DownCloseColor([out, retval] OLE_COLOR* Value);
        [id(0x00000025), propput, helpstring("The color used to fill Candles with lower closing prices"), helpcontext(0x000000bc)]
        HRESULT DownCloseColor([in] OLE_COLOR Value);
        [id(0x00000020), propget, helpstring("The list of High price values"), helpcontext(0x000000f2)]
        HRESULT HighValues([out, retval] IValueList** HighValues);
        [id(0x00000021), propget, helpstring("The list of Low price values"), helpcontext(0x00000116)]
        HRESULT LowValues([out, retval] IValueList** LowValues);
        [id(0x00000022), propget, helpstring("The list of Open price values"), helpcontext(0x00000156)]
        HRESULT OpenValues([out, retval] IValueList** OpenValues);
        [id(0x00000026), propget, helpstring("Shows the Candle tick for the Close price"), helpcontext(0x000001af)]
        HRESULT ShowCloseTick([out, retval] VARIANT_BOOL* ShowCloseTick);
        [id(0x00000026), propput, helpstring("Shows the Candle tick for the Close price"), helpcontext(0x000001af)]
        HRESULT ShowCloseTick([in] VARIANT_BOOL ShowCloseTick);
        [id(0x00000027), propget, helpstring("Shows the Candle tick for the Open price"), helpcontext(0x000001b2)]
        HRESULT ShowOpenTick([out, retval] VARIANT_BOOL* ShowOpenTick);
        [id(0x00000027), propput, helpstring("Shows the Candle tick for the Open price"), helpcontext(0x000001b2)]
        HRESULT ShowOpenTick([in] VARIANT_BOOL ShowOpenTick);
        [id(0x00000028), propget, helpstring("The color used to fill the Candle for greater Closing prices"), helpcontext(0x00000295)]
        HRESULT UpCloseColor([out, retval] OLE_COLOR* Value);
        [id(0x00000028), propput, helpstring("The color used to fill the Candle for greater Closing prices"), helpcontext(0x00000295)]
        HRESULT UpCloseColor([in] OLE_COLOR Value);
        [id(0x0000002a), helpstring("Adds a new Candle point to the Series"), helpcontext(0x0000001c)]
        HRESULT AddCandle(
                        [in] double DateValue, 
                        [in] double OpenValue, 
                        [in] double HighValue, 
                        [in] double LowValue, 
                        [in] double CloseValue, 
                        [out, retval] long* AClose);
    };

    [
      odl,
      uuid(B6C104DD-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Ancestor Class Polar/Radar Series"),
      helpcontext(0x000003b6),
      dual,
      oleautomation
    ]
    interface ICustomPolarSeries : ICircledSeries {
        [id(0x0000001e), propget, helpstring("The increment (in degrees) to show angle labels"), helpcontext(0x0000002e)]
        HRESULT AngleIncrement([out, retval] double* AngleIncrement);
        [id(0x0000001e), propput, helpstring("The increment (in degrees) to show angle labels"), helpcontext(0x0000002e)]
        HRESULT AngleIncrement([in] double AngleIncrement);
        [id(0x0000001f), propget, helpstring("When True, the last polar point will be connected to the first point"), helpcontext(0x0000009d)]
        HRESULT CloseCircle([out, retval] VARIANT_BOOL* CloseCircle);
        [id(0x0000001f), propput, helpstring("When True, the last polar point will be connected to the first point"), helpcontext(0x0000009d)]
        HRESULT CloseCircle([in] VARIANT_BOOL CloseCircle);
        [id(0x00000020), propget, helpstring("The Pen used to draw the polar lines"), helpcontext(0x0000017a)]
        HRESULT Pen([out, retval] IPen** Pen);
        [id(0x00000021), propget, helpstring("The pointer attributes for polar points (point markers)"), helpcontext(0x00000185)]
        HRESULT Pointer([out, retval] IPointer** Pointer);
        [id(0x00000022), propget, helpstring("The increment in radius scales to show the polar labels"), helpcontext(0x00000191)]
        HRESULT RadiusIncrement([out, retval] double* RadiusIncrement);
        [id(0x00000022), propput, helpstring("The increment in radius scales to show the polar labels"), helpcontext(0x00000191)]
        HRESULT RadiusIncrement([in] double RadiusIncrement);
        [id(0x00000023), propget, helpstring("The list of angle values for each polar point"), helpcontext(0x000002cf)]
        HRESULT AngleValues([out, retval] IValueList** AngleValues);
        [id(0x00000024), propget, helpstring("The list of radius values for each polar point"), helpcontext(0x00000192)]
        HRESULT RadiusValues([out, retval] IValueList** RadiusValues);
        [id(0x00000026), helpstring("Draws a circular ring at Value radius in the Z plane"), helpcontext(0x000000c0)]
        HRESULT DrawRing(
                        [in] double Value, 
                        [in] long Z);
        [id(0x00000027), propget, helpstring("The pen used to draw the circle border"), helpcontext(0x00000181)]
        HRESULT CirclePen([out, retval] IPen** CirclePen);
        [id(0x00000028), propget, helpstring("Outer circle Label characteristics"), helpcontext(0x0000035f)]
        HRESULT CircleLabels([out, retval] ICircleLabels** Value);
        [id(0x00000003), propget, helpstring("Background Brush"), helpcontext(0x00000360)]
        HRESULT Brush([out, retval] IBrush** Value);
        [id(0x0000000d), helpstring("Load bitmap to background"), helpcontext(0x00000385)]
        HRESULT LoadBackImage([in] BSTR FileName);
        [id(0x0000000e), helpstring("Clear BackImage"), helpcontext(0x00000386)]
        HRESULT ClearBackImage();
        [id(0x0000009b), propget, helpstring("Sets the labels running clockwise/anticlockwise around the circle's perimeter."), helpcontext(0x00000529)]
        HRESULT ClockWiseLabels([out, retval] VARIANT_BOOL* Value);
        [id(0x0000009b), propput, helpstring("Sets the labels running clockwise/anticlockwise around the circle's perimeter."), helpcontext(0x00000529)]
        HRESULT ClockWiseLabels([in] VARIANT_BOOL Value);
        [id(0x0000009c), propget, helpstring("Sets the labels inside/outside the circle's perimeter."), helpcontext(0x0000052a)]
        HRESULT CircleLabelsInside([out, retval] VARIANT_BOOL* Value);
        [id(0x0000009c), propput, helpstring("Sets the labels inside/outside the circle's perimeter."), helpcontext(0x0000052a)]
        HRESULT CircleLabelsInside([in] VARIANT_BOOL Value);
        [id(0x00000073), propget, helpstring("Fill transparency"), helpcontext(0x000006d5)]
        HRESULT Transparency([out, retval] long* Value);
        [id(0x00000073), propput, helpstring("Fill transparency"), helpcontext(0x000006d5)]
        HRESULT Transparency([in] long Value);
    };

    [
      odl,
      uuid(B6C104DE-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Ancestor Class 3D Series Types"),
      helpcontext(0x0000033b),
      dual,
      oleautomation
    ]
    interface ICustom3DSeries : IDispatch {
        [id(0x0000000e), helpstring("Adds a new cell value to the Series"), helpcontext(0x00000024)]
        HRESULT AddXYZ(
                        [in] double AX, 
                        [in] double AY, 
                        [in] double AZ, 
                        [in] BSTR AXLabel, 
                        [in] OLE_COLOR Value, 
                        [out, retval] long* AColor);
        [id(0x00000001), helpstring("Maximum Z Value of Series"), helpcontext(0x0000033d)]
        HRESULT MaxZValue([out, retval] double* Value);
        [id(0x00000002), helpstring("Minimum Z Value of Series"), helpcontext(0x0000033e)]
        HRESULT MinZValue([out, retval] double* Value);
        [id(0x00000009), propget, helpstring("The number of times the 3D effect is magnified"), helpcontext(0x00000288)]
        HRESULT TimesZOrder([out, retval] long* TimesZOrder);
        [id(0x00000009), propput, helpstring("The number of times the 3D effect is magnified"), helpcontext(0x00000288)]
        HRESULT TimesZOrder([in] long TimesZOrder);
        [id(0x0000000d), propget, helpstring("The list of Z coordinates for each cell"), helpcontext(0x000002c4)]
        HRESULT ZValues([out, retval] IValueList** ZValues);
        [id(0x00000005), propget, helpstring("Value of Indexth Z Point"), helpcontext(0x0000033c)]
        HRESULT ZValue(
                        [in] long Index, 
                        [out, retval] double* Value);
        [id(0x00000005), propput, helpstring("Value of Indexth Z Point"), helpcontext(0x0000033c)]
        HRESULT ZValue(
                        [in] long Index, 
                        [in] double Value);
        [id(0x00000083), propget, helpstring("The brush used to fill the surface cells"), helpcontext(0x00000076)]
        HRESULT Brush([out, retval] IBrush** Brush);
        [id(0x00000086), propget, helpstring("The pen used to draw surface cell borders"), helpcontext(0x0000017c)]
        HRESULT Pen([out, retval] IPen** Pen);
        [id(0x00000087), helpstring("Adds new cell values to the Series in the form of arrays"), helpcontext(0x0000063b)]
        HRESULT AddArrayXYZ(
                        [in] VARIANT XArray, 
                        [in] VARIANT YArray, 
                        [in] VARIANT ZArray);
    };

    [
      odl,
      uuid(B6C104DF-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Vertical Bar Series with Error T on top"),
      helpcontext(0x00000225),
      dual,
      oleautomation
    ]
    interface IErrorBarSeries : IBarSeries {
        [id(0x00000032), propget, helpstring("The Pen used to draw the error bar lines"), helpcontext(0x000000c7)]
        HRESULT ErrorPen([out, retval] IPen** ErrorPen);
        [id(0x00000033), propget, helpstring("The list of Error values for each error bar"), helpcontext(0x000000c8)]
        HRESULT ErrorValues([out, retval] IValueList** ErrorValues);
        [id(0x00000034), propget, helpstring("The width (in pixels or scales) of the error bar lines"), helpcontext(0x000000c9)]
        HRESULT ErrorWidth([out, retval] long* ErrorWidth);
        [id(0x00000034), propput, helpstring("The width (in pixels or scales) of the error bar lines"), helpcontext(0x000000c9)]
        HRESULT ErrorWidth([in] long ErrorWidth);
        [id(0x00000035), propget, helpstring("Controls how ErrorWidth size is expressed (in pixels or scales)"), helpcontext(0x000000ca)]
        HRESULT ErrorWidthUnits([out, retval] EErrorWidthUnits* ErrorWidthUnits);
        [id(0x00000035), propput, helpstring("Controls how ErrorWidth size is expressed (in pixels or scales)"), helpcontext(0x000000ca)]
        HRESULT ErrorWidthUnits([in] EErrorWidthUnits ErrorWidthUnits);
        [id(0x00000036), helpstring("Adds a new Error bar point to the Series"), helpcontext(0x00000019)]
        HRESULT AddErrorBar(
                        [in] double AX, 
                        [in] double AY, 
                        [in] double AError, 
                        [in] BSTR AXLabel, 
                        [in] OLE_COLOR Value, 
                        [out, retval] long* AColor);
    };

    [
      odl,
      uuid(B6C104E0-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Financial Volume Series. Thin vertical Bar lines"),
      helpcontext(0x0000026e),
      dual,
      oleautomation
    ]
    interface IVolumeSeries : IDispatch {
        [id(0x0000001e), propget, helpstring("The list of volume values for each volume bar point"), helpcontext(0x000002ac)]
        HRESULT VolumeValues([out, retval] IValueList** VolumeValues);
        [id(0x00000004), propget, helpstring("The pen used to draw the line"), helpcontext(0x00000113)]
        HRESULT LinePen([out, retval] IPen** LinePen);
        [id(0x00000001), propget, helpstring("When True Volume Lines aligned to the YOrigin value"), helpcontext(0x000006ca)]
        HRESULT UseYOrigin([out, retval] VARIANT_BOOL* Value);
        [id(0x00000001), propput, helpstring("When True Volume Lines aligned to the YOrigin value"), helpcontext(0x000006ca)]
        HRESULT UseYOrigin([in] VARIANT_BOOL Value);
        [id(0x00000002), propget, helpstring("Defines the bottom position of Volume Lines"), helpcontext(0x000006cb)]
        HRESULT YOrigin([out, retval] double* Value);
        [id(0x00000002), propput, helpstring("Defines the bottom position of Volume Lines"), helpcontext(0x000006cb)]
        HRESULT YOrigin([in] double Value);
    };

    [
      odl,
      uuid(B6C104E1-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Calculates Addition of values"),
      helpcontext(0x000001c2),
      dual,
      oleautomation
    ]
    interface IAddFunction : IDispatch {
    };

    [
      odl,
      uuid(B6C104E2-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Calculates Subtraction of values"),
      helpcontext(0x00000259),
      dual,
      oleautomation
    ]
    interface ISubtractFunction : IDispatch {
    };

    [
      odl,
      uuid(B6C104E3-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Calculates Multiplication of values"),
      helpcontext(0x00000240),
      dual,
      oleautomation
    ]
    interface IMultiplyFunction : IDispatch {
    };

    [
      odl,
      uuid(B6C104E4-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Calculates Division of values"),
      helpcontext(0x00000222),
      dual,
      oleautomation
    ]
    interface IDivideFunction : IDispatch {
    };

    [
      odl,
      uuid(B6C104E5-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Calculates the Average value"),
      helpcontext(0x000001ca),
      dual,
      oleautomation
    ]
    interface IAverageFunction : IDispatch {
        [id(0x00000001), propget, helpstring("Include nulls as points in average calculation"), helpcontext(0x0000063c)]
        HRESULT IncludeNulls([out, retval] VARIANT_BOOL* Value);
        [id(0x00000001), propput, helpstring("Include nulls as points in average calculation"), helpcontext(0x0000063c)]
        HRESULT IncludeNulls([in] VARIANT_BOOL Value);
    };

    [
      odl,
      uuid(B6C104E6-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Calculates the High value"),
      helpcontext(0x00000231),
      dual,
      oleautomation
    ]
    interface IHighFunction : IDispatch {
    };

    [
      odl,
      uuid(B6C104E7-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Calculates the Low value"),
      helpcontext(0x00000239),
      dual,
      oleautomation
    ]
    interface ILowFunction : IDispatch {
    };

    [
      odl,
      uuid(B6C104E8-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Calculates Curve Fitting using polynomial of PolyDegree factors"),
      helpcontext(0x00000219),
      dual,
      oleautomation
    ]
    interface ICurveFittingFunction : IDispatch {
        [id(0x00000001), propget, helpstring("The number of polynomial degrees used to calculate fitting"), helpcontext(0x00000188)]
        HRESULT PolyDegree([out, retval] long* PolyDegree);
        [id(0x00000001), propput, helpstring("The number of polynomial degrees used to calculate fitting"), helpcontext(0x00000188)]
        HRESULT PolyDegree([in] long PolyDegree);
        [id(0x00000002), propget, helpstring("The fitting style (polynomical)"), helpcontext(0x00000292)]
        HRESULT TypeFitting([out, retval] ETypeFitting* TypeFitting);
        [id(0x00000002), propput, helpstring("The fitting style (polynomical)"), helpcontext(0x00000292)]
        HRESULT TypeFitting([in] ETypeFitting TypeFitting);
        [id(0x00000003), propget, helpstring("Sets the first point index used to display the fitting"), helpcontext(0x000000d0)]
        HRESULT FirstPoint([out, retval] long* FirstPoint);
        [id(0x00000003), propput, helpstring("Sets the first point index used to display the fitting"), helpcontext(0x000000d0)]
        HRESULT FirstPoint([in] long FirstPoint);
        [id(0x00000004), propget, helpstring("Sets the last point index used to display the fitting"), helpcontext(0x0000010c)]
        HRESULT LastPoint([out, retval] long* LastPoint);
        [id(0x00000004), propput, helpstring("Sets the last point index used to display the fitting"), helpcontext(0x0000010c)]
        HRESULT LastPoint([in] long LastPoint);
        [id(0x00000005), propget, helpstring("Sets the first point index used to calculate the fitting"), helpcontext(0x000002d0)]
        HRESULT FirstCalcPoint([out, retval] long* FirstCalcPoint);
        [id(0x00000005), propput, helpstring("Sets the first point index used to calculate the fitting"), helpcontext(0x000002d0)]
        HRESULT FirstCalcPoint([in] long FirstCalcPoint);
        [id(0x00000006), propget, helpstring("Sets the last point index used to calculate the fitting"), helpcontext(0x000002d1)]
        HRESULT LastCalcPoint([out, retval] long* LastCalcPoint);
        [id(0x00000006), propput, helpstring("Sets the last point index used to calculate the fitting"), helpcontext(0x000002d1)]
        HRESULT LastCalcPoint([in] long LastCalcPoint);
        [id(0x00000007), propget, helpstring("Returns polynomial coefficients used to calculate Curve-Fitting points"), helpcontext(0x00000032)]
        HRESULT AnswerVector(
                        [in] long Index, 
                        [out, retval] double* Value);
        [id(0x00000008), helpstring("Calculates the Y value corresponding to a given X value"), helpcontext(0x000000e3)]
        HRESULT GetCurveYValue(
                        [in] double X, 
                        [out, retval] double* Value);
    };

    [
      odl,
      uuid(B6C104E9-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Calculates Exponential Average"),
      helpcontext(0x00000229),
      dual,
      oleautomation
    ]
    interface IExpAvgFunction : IDispatch {
        [id(0x00000001), propget, helpstring("The exponential average weight used to calculate the average"), helpcontext(0x000002ad)]
        HRESULT Weight([out, retval] double* Weight);
        [id(0x00000001), propput, helpstring("The exponential average weight used to calculate the average"), helpcontext(0x000002ad)]
        HRESULT Weight([in] double Weight);
    };

    [
      odl,
      uuid(B6C104EA-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Calculates Moving Average ( average of last Period values )"),
      helpcontext(0x0000023b),
      dual,
      oleautomation
    ]
    interface IMovingAvgFunction : IDispatch {
        [id(0x00000001), propget, helpstring("Controls if values are weighted when calculating the moving average"), helpcontext(0x000002af)]
        HRESULT Weighted([out, retval] VARIANT_BOOL* Weighted);
        [id(0x00000001), propput, helpstring("Controls if values are weighted when calculating the moving average"), helpcontext(0x000002af)]
        HRESULT Weighted([in] VARIANT_BOOL Weighted);
    };

    [
      odl,
      uuid(B6C104EB-FB89-11D4-93C9-006008A7EED4),
      helpstring("TeeChart object for Font attributes"),
      helpcontext(0x000002d8),
      dual,
      oleautomation
    ]
    interface IChartFont : IDispatch {
        [id(0x00000001), propget, helpstring("The Font name (Arial, Courier, etc)"), helpcontext(0x000002dd)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000001), propput, helpstring("The Font name (Arial, Courier, etc)"), helpcontext(0x000002dd)]
        HRESULT Name([in] BSTR Name);
        [id(0x00000002), propget, helpstring("The Font size"), helpcontext(0x000002de)]
        HRESULT Size([out, retval] long* Size);
        [id(0x00000002), propput, helpstring("The Font size"), helpcontext(0x000002de)]
        HRESULT Size([in] long Size);
        [id(0x00000003), propget, helpstring("Enable Font Bold"), helpcontext(0x000002d9)]
        HRESULT Bold([out, retval] VARIANT_BOOL* Bold);
        [id(0x00000003), propput, helpstring("Enable Font Bold"), helpcontext(0x000002d9)]
        HRESULT Bold([in] VARIANT_BOOL Bold);
        [id(0x00000004), propget, helpstring("Enable Font Italic"), helpcontext(0x000002dc)]
        HRESULT Italic([out, retval] VARIANT_BOOL* Italic);
        [id(0x00000004), propput, helpstring("Enable Font Italic"), helpcontext(0x000002dc)]
        HRESULT Italic([in] VARIANT_BOOL Italic);
        [id(0x00000005), propget, helpstring("Enable Font Underline"), helpcontext(0x000002e0)]
        HRESULT Underline([out, retval] VARIANT_BOOL* Underline);
        [id(0x00000005), propput, helpstring("Enable Font Underline"), helpcontext(0x000002e0)]
        HRESULT Underline([in] VARIANT_BOOL Underline);
        [id(0x00000006), propget, helpstring("Enable Font Strikethrough"), helpcontext(0x000002df)]
        HRESULT Strikethrough([out, retval] VARIANT_BOOL* Strikethrough);
        [id(0x00000006), propput, helpstring("Enable Font Strikethrough"), helpcontext(0x000002df)]
        HRESULT Strikethrough([in] VARIANT_BOOL Strikethrough);
        [id(0x00000008), propget, helpstring("The character set of the font"), helpcontext(0x000002db)]
        HRESULT Charset([out, retval] short* Charset);
        [id(0x00000008), propput, helpstring("The character set of the font"), helpcontext(0x000002db)]
        HRESULT Charset([in] short Charset);
        [id(0x00000009), propget, helpstring("The Font color"), helpcontext(0x000002da)]
        HRESULT Color([out, retval] OLE_COLOR* Value);
        [id(0x00000009), propput, helpstring("The Font color"), helpcontext(0x000002da)]
        HRESULT Color([in] OLE_COLOR Value);
        [id(0x00000007), propget, helpstring("Font height"), helpcontext(0x000003d1)]
        HRESULT Height([out, retval] long* Value);
        [id(0x00000007), propput, helpstring("Font height"), helpcontext(0x000003d1)]
        HRESULT Height([in] long Value);
        [id(0x0000000a), propget, helpstring("Use to size fonts from onscreen Chart to printer"), helpcontext(0x000003d2)]
        HRESULT PixelsPerInch([out, retval] long* Value);
    };

    [
      odl,
      uuid(B6C104EC-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Calculates Momentum: Value(t) - Value(t-Period)"),
      helpcontext(0x0000023a),
      dual,
      oleautomation
    ]
    interface IMomentumFunction : IDispatch {
    };

    typedef [uuid(3B2B9811-FBBF-11D4-93CA-006008A7EED4), version(1.0), helpstring("Type defines how Other Pie slice will be obtained"), helpcontext(0x000003d3)]
    enum {
        poNone = 0,
        poBelowPercent = 1,
        poBelowValue = 2
    } EPieOtherStyle;

    [
      odl,
      uuid(B6C104ED-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("PieOtherSlice interface"),
      helpcontext(0x00000332),
      dual,
      oleautomation
    ]
    interface IPieOtherSlice : IDispatch {
        [id(0x00000001), propget, helpstring("Defines how Other Pie slice will be obtained"), helpcontext(0x000002f6)]
        HRESULT Style([out, retval] EPieOtherStyle* Value);
        [id(0x00000001), propput, helpstring("Defines how Other Pie slice will be obtained"), helpcontext(0x000002f6)]
        HRESULT Style([in] EPieOtherStyle Value);
        [id(0x00000002), propget, helpstring("Label for Otherslice"), helpcontext(0x000002f7)]
        HRESULT Text([out, retval] BSTR* Value);
        [id(0x00000002), propput, helpstring("Label for Otherslice"), helpcontext(0x000002f7)]
        HRESULT Text([in] BSTR Value);
        [id(0x00000003), propget, helpstring("Value of Otherslice threshold"), helpcontext(0x000002f8)]
        HRESULT Value([out, retval] double* Value);
        [id(0x00000003), propput, helpstring("Value of Otherslice threshold"), helpcontext(0x000002f8)]
        HRESULT Value([in] double Value);
    };



    [
      odl,
      uuid(B6C10501-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("ExplodedSlices interface"),
      helpcontext(0x00000330),
      dual,
      oleautomation
    ]
    interface IExplodedSlices : IDispatch {
        [id(0x00000001), propget, helpstring("Value (distance) to explode slice"), helpcontext(0x00000331)]
        HRESULT Value(
                        [in] long Index, 
                        [out, retval] long* Value);
        [id(0x00000001), propput, helpstring("Value (distance) to explode slice"), helpcontext(0x00000331)]
        HRESULT Value(
                        [in] long Index, 
                        [in] long Value);
    };

    [
      odl,
      uuid(B6C10502-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Ancestor class, Surface color palettes."),
      helpcontext(0x00000445),
      dual,
      oleautomation
    ]
    interface ICustom3DPaletteSeries : ICustom3DSeries {
        [id(0x00000011), helpstring("Adds a new color to the Surface palette"), helpcontext(0x0000001d)]
        HRESULT AddPalette(
                        [in] double Value, 
                        [in] OLE_COLOR Color, 
                        [out, retval] long* Value1);
        [id(0x0000000a), propget, helpstring("The starting color of the Surface ColorRange gradient"), helpcontext(0x000001b8)]
        HRESULT StartColor([out, retval] OLE_COLOR* Value);
        [id(0x0000000a), propput, helpstring("The starting color of the Surface ColorRange gradient"), helpcontext(0x000001b8)]
        HRESULT StartColor([in] OLE_COLOR Value);
        [id(0x00000004), propget, helpstring("The ending color of the Surface ColorRange gradient"), helpcontext(0x000000c3)]
        HRESULT EndColor([out, retval] OLE_COLOR* Value);
        [id(0x00000004), propput, helpstring("The ending color of the Surface ColorRange gradient"), helpcontext(0x000000c3)]
        HRESULT EndColor([in] OLE_COLOR Value);
        [id(0x00000008), propget, helpstring("The color steps the surface palette uses when UsePalette is True"), helpcontext(0x00000159)]
        HRESULT PaletteSteps([out, retval] long* Value);
        [id(0x00000008), propput, helpstring("The color steps the surface palette uses when UsePalette is True"), helpcontext(0x00000159)]
        HRESULT PaletteSteps([in] long Value);
        [id(0x0000000c), propget, helpstring("When True, surface cells are filled using a palette"), helpcontext(0x00000297)]
        HRESULT UsePalette([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000c), propput, helpstring("When True, surface cells are filled using a palette"), helpcontext(0x00000297)]
        HRESULT UsePalette([in] VARIANT_BOOL Value);
        [id(0x0000000b), propget, helpstring("When True, surface cells are filled using a gradient"), helpcontext(0x00000296)]
        HRESULT UseColorRange([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000b), propput, helpstring("When True, surface cells are filled using a gradient"), helpcontext(0x00000296)]
        HRESULT UseColorRange([in] VARIANT_BOOL Value);
        [id(0x00000012), helpstring("Clear the surface colors palette"), helpcontext(0x00000096)]
        HRESULT ClearPalette();
        [id(0x00000013), helpstring("Fills the Surface palette with automatic NumSteps colors"), helpcontext(0x000000ac)]
        HRESULT CreateDefaultPalette([in] long NumSteps);
        [id(0x00000010), helpstring("Returns the associated palette color for a given Y value"), helpcontext(0x000000ec)]
        HRESULT GetSurfacePaletteColor(
                        [in] double Y, 
                        [out, retval] OLE_COLOR* Value);
        [id(0x00000021), propget, helpstring("The middle color of the Surface ColorRange gradient"), helpcontext(0x000005d5)]
        HRESULT MidColor([out, retval] OLE_COLOR* Value);
        [id(0x00000021), propput, helpstring("The middle color of the Surface ColorRange gradient"), helpcontext(0x000005d5)]
        HRESULT MidColor([in] OLE_COLOR Value);
        [id(0x00000022), helpstring("Creates a multi-color Palette used to fill Surface polygons."), helpcontext(0x00000446)]
        HRESULT CreateRangePalette();
        [id(0x00000023), propget, helpstring("Indicates the number of entries in the default color Palette."), helpcontext(0x000005d6)]
        HRESULT PaletteStyle([out, retval] EPaletteStyle* Value);
        [id(0x00000023), propput, helpstring("Indicates the number of entries in the default color Palette."), helpcontext(0x000005d6)]
        HRESULT PaletteStyle([in] EPaletteStyle Value);
    };

    [
      odl,
      uuid(B6C10503-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Ancestor Class, Surface and Contour Series"),
      helpcontext(0x00000383),
      dual,
      oleautomation
    ]
    interface ICustom3DGridSeries : ICustom3DPaletteSeries {
        [id(0x00000006), propget, helpstring("The number of horizontal surface cells"), helpcontext(0x00000131)]
        HRESULT NumXValues([out, retval] long* Value);
        [id(0x00000006), propput, helpstring("The number of horizontal surface cells"), helpcontext(0x00000131)]
        HRESULT NumXValues([in] long Value);
        [id(0x00000007), propget, helpstring("The number of Surface cells in depth direction"), helpcontext(0x00000132)]
        HRESULT NumZValues([out, retval] long* Value);
        [id(0x00000007), propput, helpstring("The number of Surface cells in depth direction"), helpcontext(0x00000132)]
        HRESULT NumZValues([in] long Value);
        [id(0x0000000f), helpstring("Returns the surface cell value for XZ indexes"), helpcontext(0x000000ed)]
        HRESULT GetXZValue(
                        [in] long X, 
                        [in] long Z, 
                        [out, retval] double* Value);
        [id(0x00000139), propget, helpstring("Use IrregularGrid property to determine if X and Z values are equi-distant or not."), helpcontext(0x0000059d)]
        HRESULT IrregularGrid([out, retval] VARIANT_BOOL* Value);
        [id(0x00000139), propput, helpstring("Use IrregularGrid property to determine if X and Z values are equi-distant or not."), helpcontext(0x0000059d)]
        HRESULT IrregularGrid([in] VARIANT_BOOL Value);
    };

    [
      odl,
      uuid(B6C10504-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Bezier Series interface"),
      helpcontext(0x0000033a),
      dual,
      oleautomation
    ]
    interface IBezierSeries : ICustomSeries {
        [id(0x0000004d), propget, helpstring("Default 32: Defines the number of points in a Bezier Series."), helpcontext(0x00000339)]
        HRESULT NumBezierPoints([out, retval] long* Value);
        [id(0x0000004d), propput, helpstring("Default 32: Defines the number of points in a Bezier Series."), helpcontext(0x00000339)]
        HRESULT NumBezierPoints([in] long Value);
        [id(0x00000008), propget, helpstring("Selects the Bezier style type for the Bezier plot."), helpcontext(0x00000447)]
        HRESULT BezierStyle([out, retval] EBezierStyle* Value);
        [id(0x00000008), propput, helpstring("Selects the Bezier style type for the Bezier plot."), helpcontext(0x00000447)]
        HRESULT BezierStyle([in] EBezierStyle Value);
    };

    [
      odl,
      uuid(B6C10505-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Radar Series interface"),
      helpcontext(0x00000397),
      dual,
      oleautomation
    ]
    interface IRadarSeries : ICustomPolarSeries {
    };

    [
      odl,
      uuid(B6C10506-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("ErrorSeries interface"),
      helpcontext(0x00000363),
      dual,
      oleautomation
    ]
    interface IErrorSeries : IErrorBarSeries {
        [id(0x00000001), propget, helpstring("ErrorSeries Style"), helpcontext(0x00000364)]
        HRESULT ErrorStyle([out, retval] EErrorSeriesStyle* Value);
        [id(0x00000001), propput, helpstring("ErrorSeries Style"), helpcontext(0x00000364)]
        HRESULT ErrorStyle([in] EErrorSeriesStyle Value);
    };

    [
      odl,
      uuid(B6C10507-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Interface to Point3D Series characteristics"),
      helpcontext(0x00000398),
      dual,
      oleautomation
    ]
    interface IPoint3DSeries : ICustom3DSeries {
        [id(0x00000065), propget, helpstring("Depth of Points"), helpcontext(0x00000340)]
        HRESULT DepthSize([out, retval] double* Value);
        [id(0x00000065), propput, helpstring("Depth of Points"), helpcontext(0x00000340)]
        HRESULT DepthSize([in] double Value);
        [id(0x00000066), propget, helpstring("The attributes of the line pointer (point markers)"), helpcontext(0x00000184)]
        HRESULT Pointer([out, retval] IPointer** Value);
        [id(0x00000004), propget, helpstring("Pen for line between points"), helpcontext(0x00000388)]
        HRESULT LinePen([out, retval] IPen** Value);
    };

    [
      odl,
      uuid(B6C10508-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Draws XYZ Grid of values in 3D"),
      helpcontext(0x0000025a),
      dual,
      oleautomation
    ]
    interface ISurfaceSeries : ICustom3DGridSeries {
        [id(0x00000084), propget, helpstring("When True, surface cells are drawn using a small single point"), helpcontext(0x000000bb)]
        HRESULT DotFrame([out, retval] VARIANT_BOOL* DotFrame);
        [id(0x00000084), propput, helpstring("When True, surface cells are drawn using a small single point"), helpcontext(0x000000bb)]
        HRESULT DotFrame([in] VARIANT_BOOL DotFrame);
        [id(0x00000014), propget, helpstring("When True, surface cells are not filled"), helpcontext(0x000002b4)]
        HRESULT WireFrame([out, retval] VARIANT_BOOL* Value);
        [id(0x00000014), propput, helpstring("When True, surface cells are not filled"), helpcontext(0x000002b4)]
        HRESULT WireFrame([in] VARIANT_BOOL Value);
        [id(0x00000003), propget, helpstring("Specifies the color and pattern to use when filling in the sides of a surface series."), helpcontext(0x0000059f)]
        HRESULT SideBrush([out, retval] IBrush** Value);
        [id(0x00000015), propget, helpstring("When set to True, each cell is filled using a color calculated as the average of each cell 4 corner colors. When set False, only one corner color is used."), helpcontext(0x000005a0)]
        HRESULT SmoothPalette([out, retval] VARIANT_BOOL* Value);
        [id(0x00000015), propput, helpstring("When set to True, each cell is filled using a color calculated as the average of each cell 4 corner colors. When set False, only one corner color is used."), helpcontext(0x000005a0)]
        HRESULT SmoothPalette([in] VARIANT_BOOL Value);
    };

    [
      odl,
      uuid(B6C10509-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Custom Mark positions"),
      helpcontext(0x00000341),
      dual,
      oleautomation
    ]
    interface ISeriesMarksPositions : IDispatch {
        [id(0x00000001), propget, helpstring("Position indexth Mark"), helpcontext(0x0000034d)]
        HRESULT Position(
                        [in] long Index, 
                        [out, retval] ISeriesMarkPosition** Value);
        [id(0x00000002), helpstring("Set indexth Mark position to Automatic"), helpcontext(0x0000034e)]
        HRESULT Automatic([in] long Index);
    };

    [
      odl,
      uuid(B6C1050A-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Position of Mark"),
      helpcontext(0x00000343),
      dual,
      oleautomation
    ]
    interface ISeriesMarkPosition : IDispatch {
        [id(0x00000001), propget, helpstring("Source co-ordinate of Arrow"), helpcontext(0x00000344)]
        HRESULT ArrowFrom([out, retval] ITeePoint2D** Value);
        [id(0x00000002), propget, helpstring("Destination co-ordinate of Arrow"), helpcontext(0x00000345)]
        HRESULT ArrowTo([out, retval] ITeePoint2D** Value);
        [id(0x00000003), propget, helpstring("Enable custom Mark positioning"), helpcontext(0x00000346)]
        HRESULT Custom([out, retval] VARIANT_BOOL* Value);
        [id(0x00000003), propput, helpstring("Enable custom Mark positioning"), helpcontext(0x00000346)]
        HRESULT Custom([in] VARIANT_BOOL Value);
        [id(0x00000004), propget, helpstring("Height of Mark"), helpcontext(0x00000347)]
        HRESULT Height([out, retval] long* Value);
        [id(0x00000004), propput, helpstring("Height of Mark"), helpcontext(0x00000347)]
        HRESULT Height([in] long Value);
        [id(0x00000005), propget, helpstring("Left Top position of Mark"), helpcontext(0x00000348)]
        HRESULT LeftTop([out, retval] ITeePoint2D** Value);
        [id(0x00000006), propget, helpstring("Width of Mark"), helpcontext(0x00000349)]
        HRESULT Width([out, retval] long* Value);
        [id(0x00000006), propput, helpstring("Width of Mark"), helpcontext(0x00000349)]
        HRESULT Width([in] long Value);
    };

    [
      odl,
      uuid(B6C1050B-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Draws Circular Series of Angle / Value XY points"),
      helpcontext(0x0000024b),
      dual,
      oleautomation
    ]
    interface IPolarSeries : ICustomPolarSeries {
        [id(0x00000025), helpstring("Adds a new polar point to the Series"), helpcontext(0x0000001e)]
        HRESULT AddPolar(
                        [in] double Angle, 
                        [in] double Value, 
                        [in] BSTR ALabel, 
                        [in] OLE_COLOR Valu, 
                        [out, retval] long* AColor);
    };

    [
      odl,
      uuid(B6C1050C-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Perimiter labels for Polar Series"),
      helpcontext(0x00000399),
      dual,
      oleautomation
    ]
    interface ICircleLabels : IDispatch {
        [id(0x00000001), propget, helpstring("Enable Circle Labels"), helpcontext(0x0000035c)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Value);
        [id(0x00000001), propput, helpstring("Enable Circle Labels"), helpcontext(0x0000035c)]
        HRESULT Visible([in] VARIANT_BOOL Value);
        [id(0x00000002), propget, helpstring("Label font"), helpcontext(0x0000035d)]
        HRESULT Font([out, retval] IChartFont** Value);
        [id(0x00000003), propget, helpstring("Rotate Labels in line with outer circle"), helpcontext(0x0000035e)]
        HRESULT Rotated([out, retval] VARIANT_BOOL* Value);
        [id(0x00000003), propput, helpstring("Rotate Labels in line with outer circle"), helpcontext(0x0000035e)]
        HRESULT Rotated([in] VARIANT_BOOL Value);
        [id(0x00000004), propget, helpstring("Degree symbol for CircleLabels"), helpcontext(0x00000387)]
        HRESULT DegreeSymbol([out, retval] BSTR* Value);
        [id(0x00000004), propput, helpstring("Degree symbol for CircleLabels"), helpcontext(0x00000387)]
        HRESULT DegreeSymbol([in] BSTR Value);
    };



    [
      odl,
      uuid(B6C1050D-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Maps trend to data"),
      helpcontext(0x0000036a),
      dual,
      oleautomation
    ]
    interface ITrendFunction : IDispatch {
    };

    [
      odl,
      uuid(B6C1050E-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Returns Standard Deviation of data range"),
      helpcontext(0x0000036b),
      dual,
      oleautomation
    ]
    interface IStdDeviationFunction : IDispatch {
        [id(0x00000001), propget, helpstring("Sets Std. Deviation to complete data range"), helpcontext(0x0000036f)]
        HRESULT Complete([out, retval] VARIANT_BOOL* Value);
        [id(0x00000001), propput, helpstring("Sets Std. Deviation to complete data range"), helpcontext(0x0000036f)]
        HRESULT Complete([in] VARIANT_BOOL Value);
    };

    [
      odl,
      uuid(B6C1050F-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Plots a Cumulative curve of data"),
      helpcontext(0x0000036c),
      dual,
      oleautomation
    ]
    interface ICumulativeFunction : IDispatch {
    };

    [
      odl,
      uuid(B6C10510-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Plots Relative Strength Index"),
      helpcontext(0x0000036d),
      dual,
      oleautomation
    ]
    interface IRSIFunction : IDispatch {
        [id(0x00000001), propget, helpstring("Sets the RSI function to use either Open or Close values."), helpcontext(0x00000448)]
        HRESULT Style([out, retval] ERSIStyle* Value);
        [id(0x00000001), propput, helpstring("Sets the RSI function to use either Open or Close values."), helpcontext(0x00000448)]
        HRESULT Style([in] ERSIStyle Value);
    };

    [
      odl,
      uuid(B6C10511-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Returns Count of input points"),
      helpcontext(0x0000036e),
      dual,
      oleautomation
    ]
    interface ICountFunction : IDispatch {
    };

    [
      odl,
      uuid(B6C10512-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Global environment characteristics"),
      helpcontext(0x0000039a),
      dual,
      oleautomation
    ]
    interface IEnvironment : IDispatch {
        [id(0x0000002f), propget, helpstring("DB Connect mode for Connection Pooling"), helpcontext(0x0000038b)]
        HRESULT NoPromptDBConnect([out, retval] VARIANT_BOOL* Value);
        [id(0x0000002f), propput, helpstring("DB Connect mode for Connection Pooling"), helpcontext(0x0000038b)]
        HRESULT NoPromptDBConnect([in] VARIANT_BOOL Value);
        [id(0x00000002), propget, helpstring("Default False. Enables Chart printing from Internet Explorer's Print Page menu option"), helpcontext(0x000003f4)]
        HRESULT IEPrintWithPage([out, retval] VARIANT_BOOL* Value);
        [id(0x00000002), propput, helpstring("Default False. Enables Chart printing from Internet Explorer's Print Page menu option"), helpcontext(0x000003f4)]
        HRESULT IEPrintWithPage([in] VARIANT_BOOL Value);
        [id(0x00000001), helpstring("Repaints the internal Canvas"), helpcontext(0x00000449)]
        HRESULT InternalRepaint();
        [id(0x00000003), propget, helpstring("Enables/Disables scrolling with the mouse wheel"), helpcontext(0x0000063d)]
        HRESULT MouseWheelScroll([out, retval] VARIANT_BOOL* Value);
        [id(0x00000003), propput, helpstring("Enables/Disables scrolling with the mouse wheel"), helpcontext(0x0000063d)]
        HRESULT MouseWheelScroll([in] VARIANT_BOOL Value);
        [id(0x00000004), propget, helpstring("Returns Locale Decimal Separator Character"), helpcontext(0x000006c4)]
        HRESULT DecimalSeparator([out, retval] BSTR* Value);
    };

    [
      odl,
      uuid(B6C10513-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("TeeChart Component connectivity interface"),
      helpcontext(0x000003bd),
      hidden,
      dual,
      oleautomation
    ]
    interface ITeeLinked : IDispatch {
        [id(0x0000002c), propput, helpstring("The TeeChart control to use (ie: TChart1)"), helpcontext(0x000006c3)]
        HRESULT Chart([in] ITChart* rhs);
        [id(0x00000001), propput, helpstring("The TeeChart to control. (ie: TChart1.ChartLink)"), helpcontext(0x000003aa)]
        HRESULT ChartLink([in] long rhs);
        [id(0xfffffdd8), helpstring("About..."), helpcontext(0x000003c9)]
        HRESULT AboutBox();
    };

    [
      uuid(B6C10529-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Events associated with the TeeCommander"),
      helpcontext(0x0000039b)
    ]
    dispinterface ITeeCommanderEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Called when the chart editor is closed."), helpcontext(0x00000394)]
            void OnEditedChart();
    };

    [
      odl,
      uuid(B6C1052A-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Runtime TeeCommander control"),
      helpcontext(0x0000039b),
      hidden,
      dual,
      oleautomation
    ]
    interface ITeeCommander : ITeeLinked {
        [id(0x00000002), propget, helpstring("Shows help text at toolbar"), helpcontext(0x000003a6)]
        HRESULT LabelValues([out, retval] VARIANT_BOOL* Value);
        [id(0x00000002), propput, helpstring("Shows help text at toolbar"), helpcontext(0x000003a6)]
        HRESULT LabelValues([in] VARIANT_BOOL Value);
        [id(0xfffffe0b), propget, helpstring("Defines a color for the TeeCommander bar."), helpcontext(0x000003a7)]
        HRESULT Color([out, retval] OLE_COLOR* Value);
        [id(0xfffffe0b), propput, helpstring("Defines a color for the TeeCommander bar."), helpcontext(0x000003a7)]
        HRESULT Color([in] OLE_COLOR Value);
        [id(0xfffffdfe), propget, helpstring("Enables/Disables the TeeCommander."), helpcontext(0x000003a9)]
        HRESULT Enabled([out, retval] VARIANT_BOOL* Value);
        [id(0xfffffdfe), propput, helpstring("Enables/Disables the TeeCommander."), helpcontext(0x000003a9)]
        HRESULT Enabled([in] VARIANT_BOOL Value);
        [id(0x00000003), propput, helpstring("Selects TeeEditor component whose properties to use"), helpcontext(0x000003d0)]
        HRESULT Editor([in] ITeeEditor* rhs);
        [id(0x00000004), propput, helpstring("Selects TeePreviewer component whose properties to use"), helpcontext(0x000003cf)]
        HRESULT Previewer([in] ITeePreviewer* rhs);
        [id(0x00000005), propput, helpstring("Link to TeeEditor component whose properties to use"), helpcontext(0x000003ce)]
        HRESULT EditorLink([in] long rhs);
        [id(0x00000006), propput, helpstring("Selects TeePreviewer component whose properties to use"), helpcontext(0x000003cd)]
        HRESULT PreviewerLink([in] long rhs);
        [id(0x00000007), propget, helpstring("When True sets TeeCommander vertically"), helpcontext(0x0000063e)]
        HRESULT Vertical([out, retval] VARIANT_BOOL* Value);
        [id(0x00000007), propput, helpstring("When True sets TeeCommander vertically"), helpcontext(0x0000063e)]
        HRESULT Vertical([in] VARIANT_BOOL Value);
        [id(0x00000009), propget, helpstring("Displays the sepcified array of TeeCommander buttons"), helpcontext(0x0000063f)]
        HRESULT Controls([out, retval] VARIANT* Value);
        [id(0x00000009), propput, helpstring("Displays the sepcified array of TeeCommander buttons"), helpcontext(0x0000063f)]
        HRESULT Controls([in] VARIANT Value);
        [id(0x00000008), propget, helpstring("As Controls, displays the specified array of TeeCommander buttons"), helpcontext(0x000006fa)]
        HRESULT Buttons([out, retval] VARIANT* Value);
        [id(0x00000008), propput, helpstring("As Controls, displays the specified array of TeeCommander buttons"), helpcontext(0x000006fa)]
        HRESULT Buttons([in] VARIANT Value);
    };

    [
      odl,
      uuid(B6C1052B-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Runtime TeeListbox control"),
      helpcontext(0x0000039e),
      hidden,
      dual,
      oleautomation
    ]
    interface ITeeListBox : ITeeLinked {
        [id(0xfffffe0b), propget, helpstring("Returns the listbox background color"), helpcontext(0x000003ad)]
        HRESULT Color([out, retval] OLE_COLOR* Value);
        [id(0xfffffe0b), propput, helpstring("Returns the listbox background color"), helpcontext(0x000003ad)]
        HRESULT Color([in] OLE_COLOR Value);
        [id(0x00000002), helpstring("Repaints the list box refreshing chart series"), helpcontext(0x000003ae)]
        HRESULT UpdateSeries();
        [id(0x00000003), propget, helpstring("Returns the current series selected in the list box"), helpcontext(0x000003af)]
        HRESULT SelectedSeries([out, retval] long* Value);
        [id(0x00000003), propput, helpstring("Returns the current series selected in the list box"), helpcontext(0x000003af)]
        HRESULT SelectedSeries([in] long Value);
        [id(0x00000004), propget, helpstring("Shows / hides the series checkbox"), helpcontext(0x000003b0)]
        HRESULT ShowActive([out, retval] VARIANT_BOOL* Value);
        [id(0x00000004), propput, helpstring("Shows / hides the series checkbox"), helpcontext(0x000003b0)]
        HRESULT ShowActive([in] VARIANT_BOOL Value);
        [id(0x00000005), propget, helpstring("Shows / hides the series color rectangles"), helpcontext(0x000003b1)]
        HRESULT ShowColor([out, retval] VARIANT_BOOL* Value);
        [id(0x00000005), propput, helpstring("Shows / hides the series color rectangles"), helpcontext(0x000003b1)]
        HRESULT ShowColor([in] VARIANT_BOOL Value);
        [id(0x00000006), propget, helpstring("Shows / hides the series names"), helpcontext(0x000003b2)]
        HRESULT ShowTitle([out, retval] VARIANT_BOOL* Value);
        [id(0x00000006), propput, helpstring("Shows / hides the series names"), helpcontext(0x000003b2)]
        HRESULT ShowTitle([in] VARIANT_BOOL Value);
        [id(0x00000007), propget, helpstring("Shows / hides the series type icons"), helpcontext(0x000003b3)]
        HRESULT ShowIcon([out, retval] VARIANT_BOOL* Value);
        [id(0x00000007), propput, helpstring("Shows / hides the series type icons"), helpcontext(0x000003b3)]
        HRESULT ShowIcon([in] VARIANT_BOOL Value);
    };

    [
      uuid(B6C1052C-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Events associated with the TeeListBox"),
      helpcontext(0x0000039e)
    ]
    dispinterface ITeeListBoxEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Triggered when dblclicking on an item in the TeeListBox"), helpcontext(0x000003b4)]
            void OnDblClickSeries([in] long SeriesIndex);
    };

    [
      uuid(B6C1052D-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("TeeChart ListBox v5"),
      helpcontext(0x0000039e),
      control
    ]
    coclass TeeListBox {
        [default] interface ITeeListBox;
        [default, source] dispinterface ITeeListBoxEvents;
    };

    [
      odl,
      uuid(B6C1052E-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Runtime Chart Editor"),
      helpcontext(0x000003be),
      hidden,
      dual,
      oleautomation
    ]
    interface ITeeEditor : ITeeLinked {
        [id(0x00000002), propget, helpstring("The caption of the editor dialog"), helpcontext(0x000003c0)]
        HRESULT EditorTitle([out, retval] BSTR* Value);
        [id(0x00000002), propput, helpstring("The caption of the editor dialog"), helpcontext(0x000003c0)]
        HRESULT EditorTitle([in] BSTR Value);
        [id(0x00000003), propget, helpstring("Set default opening Editor page "), helpcontext(0x000003c1)]
        HRESULT DefaultPage([out, retval] ETeeEditorPage* Value);
        [id(0x00000003), propput, helpstring("Set default opening Editor page "), helpcontext(0x000003c1)]
        HRESULT DefaultPage([in] ETeeEditorPage Value);
        [id(0x00000004), helpstring("Show Editor "), helpcontext(0x000003c2)]
        HRESULT ShowEditor();
        [id(0x00000005), propget, helpstring("Enables/disables AutoRepaint of Chart whilst changes are being made in the Chart Editor."), helpcontext(0x000003c3)]
        HRESULT AutoRepaint([out, retval] VARIANT_BOOL* Value);
        [id(0x00000005), propput, helpstring("Enables/disables AutoRepaint of Chart whilst changes are being made in the Chart Editor."), helpcontext(0x000003c3)]
        HRESULT AutoRepaint([in] VARIANT_BOOL Value);
        [id(0x00000006), propget, helpstring("Editor page display"), helpcontext(0x000003c4)]
        HRESULT ShowPages([out, retval] ITeeEditorShowPages** Value);
        [id(0x00000008), propget, helpstring("Link to TeeCommander component to which to apply TeeEditor characteristics"), helpcontext(0x000003cc)]
        HRESULT EditorLink([out, retval] long* Value);
        [id(0x00000007), propget, helpstring("Options for first Editor page"), helpcontext(0x000003d4)]
        HRESULT Options([out, retval] ITeeEditorOptions** Value);
    };

    [
      odl,
      uuid(B6C1052F-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Runtime Chart Print Previewer"),
      helpcontext(0x000003bf),
      hidden,
      dual,
      oleautomation
    ]
    interface ITeePreviewer : ITeeLinked {
        [id(0x00000002), propget, helpstring("The caption of the Previewer dialog"), helpcontext(0x000003c5)]
        HRESULT PreviewTitle([out, retval] BSTR* Value);
        [id(0x00000002), propput, helpstring("The caption of the Previewer dialog"), helpcontext(0x000003c5)]
        HRESULT PreviewTitle([in] BSTR Value);
        [id(0x00000003), helpstring("Show Print preview"), helpcontext(0x000003c6)]
        HRESULT ShowPreview();
        [id(0x00000004), propget, helpstring("Colour of Preview paper"), helpcontext(0x000003c7)]
        HRESULT PaperColor([out, retval] OLE_COLOR* Value);
        [id(0x00000004), propput, helpstring("Colour of Preview paper"), helpcontext(0x000003c7)]
        HRESULT PaperColor([in] OLE_COLOR Value);
        [id(0x00000005), propget, helpstring("Link to TeeCommander component to which to apply TeePreviewer characteristics"), helpcontext(0x000003ca)]
        HRESULT PreviewerLink([out, retval] long* Value);
        [id(0x00000006), propget, helpstring("Returns if the preview dialog is maximized"), helpcontext(0x000003cb)]
        HRESULT Maximized([out, retval] VARIANT_BOOL* Value);
        [id(0x00000006), propput, helpstring("Returns if the preview dialog is maximized"), helpcontext(0x000003cb)]
        HRESULT Maximized([in] VARIANT_BOOL Value);
        [id(0x00000007), propget, helpstring("Runtime display options"), helpcontext(0x000003d5)]
        HRESULT Options([out, retval] ITeePreviewerOptions** Value);
    };

    [
      uuid(B6C10530-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("TeeChart Editor v5"),
      helpcontext(0x000003be),
      control
    ]
    coclass TeeEditor {
        [default] interface ITeeEditor;
    };

    [
      uuid(B6C10531-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("TeeChart Print Previewer v5"),
      helpcontext(0x000003bf),
      control
    ]
    coclass TeePreviewer {
        [default] interface ITeePreviewer;
    };

    [
      uuid(B6C10532-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("TeeChart Commander v5"),
      helpcontext(0x0000039b),
      control
    ]
    coclass TeeCommander {
        [default] interface ITeeCommander;
        [default, source] dispinterface ITeeCommanderEvents;
    };



    [
      odl,
      uuid(B6C10533-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("X,Y co-ordinates"),
      helpcontext(0x0000034a),
      dual,
      oleautomation
    ]
    interface ITeePoint2D : IDispatch {
        [id(0x00000001), propget, helpstring("X co-ordinate"), helpcontext(0x0000034b)]
        HRESULT X([out, retval] double* Value);
        [id(0x00000001), propput, helpstring("X co-ordinate"), helpcontext(0x0000034b)]
        HRESULT X([in] double Value);
        [id(0x00000002), propget, helpstring("Y co-ordinate"), helpcontext(0x0000034c)]
        HRESULT Y([out, retval] double* Value);
        [id(0x00000002), propput, helpstring("Y co-ordinate"), helpcontext(0x0000034c)]
        HRESULT Y([in] double Value);
    };

    [
      odl,
      uuid(B6C10534-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Z co-ordinate"),
      helpcontext(0x000003d6),
      dual,
      oleautomation
    ]
    interface ITeePoint3D : ITeePoint2D {
        [id(0x00000003), propget, helpstring("Z co-ordinate"), helpcontext(0x000003d7)]
        HRESULT Z([out, retval] double* Value);
        [id(0x00000003), propput, helpstring("Z co-ordinate"), helpcontext(0x000003d7)]
        HRESULT Z([in] double Value);
    };

    [
      odl,
      uuid(B6C10535-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Pages to show in Editor"),
      helpcontext(0x000003d8),
      dual,
      oleautomation
    ]
    interface ITeeEditorShowPages : IDispatch {
        [id(0x00000001), propget, helpstring("Enables/Disables the display of the Editor's Main Page."), helpcontext(0x0000044a)]
        HRESULT Main([out, retval] VARIANT_BOOL* Value);
        [id(0x00000001), propput, helpstring("Enables/Disables the display of the Editor's Main Page."), helpcontext(0x0000044a)]
        HRESULT Main([in] VARIANT_BOOL Value);
        [id(0x00000002), propget, helpstring("Enables/Disables the display of the Editor's General Page."), helpcontext(0x0000044b)]
        HRESULT General([out, retval] VARIANT_BOOL* Value);
        [id(0x00000002), propput, helpstring("Enables/Disables the display of the Editor's General Page."), helpcontext(0x0000044b)]
        HRESULT General([in] VARIANT_BOOL Value);
        [id(0x00000003), propget, helpstring("Enables/Disables the display of the Editor's Axis Page."), helpcontext(0x0000044c)]
        HRESULT Axis([out, retval] VARIANT_BOOL* Value);
        [id(0x00000003), propput, helpstring("Enables/Disables the display of the Editor's Axis Page."), helpcontext(0x0000044c)]
        HRESULT Axis([in] VARIANT_BOOL Value);
        [id(0x00000004), propget, helpstring("Enables/Disables the display of the Editor's Titles Page."), helpcontext(0x0000044d)]
        HRESULT Titles([out, retval] VARIANT_BOOL* Value);
        [id(0x00000004), propput, helpstring("Enables/Disables the display of the Editor's Titles Page."), helpcontext(0x0000044d)]
        HRESULT Titles([in] VARIANT_BOOL Value);
        [id(0x00000005), propget, helpstring("Enables/Disables the display of the Editor's Legend Page."), helpcontext(0x0000044e)]
        HRESULT Legend([out, retval] VARIANT_BOOL* Value);
        [id(0x00000005), propput, helpstring("Enables/Disables the display of the Editor's Legend Page."), helpcontext(0x0000044e)]
        HRESULT Legend([in] VARIANT_BOOL Value);
        [id(0x00000006), propget, helpstring("Enables/Disables the display of the Editor's Panel Page."), helpcontext(0x0000044f)]
        HRESULT Panel([out, retval] VARIANT_BOOL* Value);
        [id(0x00000006), propput, helpstring("Enables/Disables the display of the Editor's Panel Page."), helpcontext(0x0000044f)]
        HRESULT Panel([in] VARIANT_BOOL Value);
        [id(0x00000007), propget, helpstring("Enables/Disables the display of the Editor's Paging Page."), helpcontext(0x00000450)]
        HRESULT Paging([out, retval] VARIANT_BOOL* Value);
        [id(0x00000007), propput, helpstring("Enables/Disables the display of the Editor's Paging Page."), helpcontext(0x00000450)]
        HRESULT Paging([in] VARIANT_BOOL Value);
        [id(0x00000008), propget, helpstring("Enables/Disables the display of the Editor's Walls Page."), helpcontext(0x00000451)]
        HRESULT Walls([out, retval] VARIANT_BOOL* Value);
        [id(0x00000008), propput, helpstring("Enables/Disables the display of the Editor's Walls Page."), helpcontext(0x00000451)]
        HRESULT Walls([in] VARIANT_BOOL Value);
        [id(0x00000009), propget, helpstring("Enables/Disables the display of the Editor's Aspect Page."), helpcontext(0x00000452)]
        HRESULT Aspect([out, retval] VARIANT_BOOL* Value);
        [id(0x00000009), propput, helpstring("Enables/Disables the display of the Editor's Aspect Page."), helpcontext(0x00000452)]
        HRESULT Aspect([in] VARIANT_BOOL Value);
        [id(0x0000000a), propget, helpstring("Enables/Disables the display of the Editor's Series General Page."), helpcontext(0x00000453)]
        HRESULT SeriesGeneral([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000a), propput, helpstring("Enables/Disables the display of the Editor's Series General Page."), helpcontext(0x00000453)]
        HRESULT SeriesGeneral([in] VARIANT_BOOL Value);
        [id(0x0000000b), propget, helpstring("Enables/Disables the display of the Editor's Series Marks Page."), helpcontext(0x00000454)]
        HRESULT SeriesMarks([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000b), propput, helpstring("Enables/Disables the display of the Editor's Series Marks Page."), helpcontext(0x00000454)]
        HRESULT SeriesMarks([in] VARIANT_BOOL Value);
        [id(0x0000000c), propget, helpstring("Enables/Disables the display of the Editor's Tools Page."), helpcontext(0x00000640)]
        HRESULT Tools([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000c), propput, helpstring("Enables/Disables the display of the Editor's Tools Page."), helpcontext(0x00000640)]
        HRESULT Tools([in] VARIANT_BOOL Value);
        [id(0x0000000d), propget, helpstring("Enables/Disables the display of the Editor's Data Page."), helpcontext(0x00000641)]
        HRESULT SeriesData([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000d), propput, helpstring("Enables/Disables the display of the Editor's Data Page."), helpcontext(0x00000641)]
        HRESULT SeriesData([in] VARIANT_BOOL Value);
        [id(0x0000000e), propget, helpstring("Enables/Disables the display of the Editor's Export Page."), helpcontext(0x00000642)]
        HRESULT ExportDialog([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000e), propput, helpstring("Enables/Disables the display of the Editor's Export Page."), helpcontext(0x00000642)]
        HRESULT ExportDialog([in] VARIANT_BOOL Value);
        [id(0x0000000f), propget, helpstring("Enables/Disables the display of the Editor's Print Page."), helpcontext(0x00000643)]
        HRESULT PrintPreview([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000f), propput, helpstring("Enables/Disables the display of the Editor's Print Page."), helpcontext(0x00000643)]
        HRESULT PrintPreview([in] VARIANT_BOOL Value);
        [id(0x00000010), propget, helpstring("Enables/Disables the display of the OpenGL Page."), helpcontext(0x000006c6)]
        HRESULT OpenGL([out, retval] VARIANT_BOOL* Value);
        [id(0x00000010), propput, helpstring("Enables/Disables the display of the OpenGL Page."), helpcontext(0x000006c6)]
        HRESULT OpenGL([in] VARIANT_BOOL Value);
    };

    [
      odl,
      uuid(B6C10536-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Series Options for Editor"),
      helpcontext(0x000003db),
      dual,
      oleautomation
    ]
    interface ITeeEditorOptions : IDispatch {
        [id(0x00000001), propget, helpstring("Enables / Disables adding new Series"), helpcontext(0x000003da)]
        HRESULT Add([out, retval] VARIANT_BOOL* Value);
        [id(0x00000001), propput, helpstring("Enables / Disables adding new Series"), helpcontext(0x000003da)]
        HRESULT Add([in] VARIANT_BOOL Value);
        [id(0x00000002), propget, helpstring("Enables / Disables deleting Series"), helpcontext(0x000003da)]
        HRESULT Delete([out, retval] VARIANT_BOOL* Value);
        [id(0x00000002), propput, helpstring("Enables / Disables deleting Series"), helpcontext(0x000003da)]
        HRESULT Delete([in] VARIANT_BOOL Value);
        [id(0x00000003), propget, helpstring("Enables / Disables changing the Series type"), helpcontext(0x000003da)]
        HRESULT Change([out, retval] VARIANT_BOOL* Value);
        [id(0x00000003), propput, helpstring("Enables / Disables changing the Series type"), helpcontext(0x000003da)]
        HRESULT Change([in] VARIANT_BOOL Value);
        [id(0x00000004), propget, helpstring("Enables / Disables cloning the Series"), helpcontext(0x000003da)]
        HRESULT Clone([out, retval] VARIANT_BOOL* Value);
        [id(0x00000004), propput, helpstring("Enables / Disables cloning the Series"), helpcontext(0x000003da)]
        HRESULT Clone([in] VARIANT_BOOL Value);
        [id(0x00000005), propget, helpstring("Enables / Disables modifying the Series datasource"), helpcontext(0x000003da)]
        HRESULT DataSource([out, retval] VARIANT_BOOL* Value);
        [id(0x00000005), propput, helpstring("Enables / Disables modifying the Series datasource"), helpcontext(0x000003da)]
        HRESULT DataSource([in] VARIANT_BOOL Value);
        [id(0x00000006), propget, helpstring("Enables / Disables modifying the Series Title"), helpcontext(0x000003da)]
        HRESULT Title([out, retval] VARIANT_BOOL* Value);
        [id(0x00000006), propput, helpstring("Enables / Disables modifying the Series Title"), helpcontext(0x000003da)]
        HRESULT Title([in] VARIANT_BOOL Value);
        [id(0x00000007), propget, helpstring("Enables / Disables Help at editor dialog"), helpcontext(0x000003da)]
        HRESULT Help([out, retval] VARIANT_BOOL* Value);
        [id(0x00000007), propput, helpstring("Enables / Disables Help at editor dialog"), helpcontext(0x000003da)]
        HRESULT Help([in] VARIANT_BOOL Value);
    };

    [
      odl,
      uuid(B6C10537-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Options for TeePreviewer display"),
      helpcontext(0x000003dc),
      dual,
      oleautomation
    ]
    interface ITeePreviewerOptions : IDispatch {
        [id(0x00000001), propget, helpstring("Enables/Disables the ChangePrinter dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT ChangePrinter([out, retval] VARIANT_BOOL* Value);
        [id(0x00000001), propput, helpstring("Enables/Disables the ChangePrinter dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT ChangePrinter([in] VARIANT_BOOL Value);
        [id(0x00000002), propget, helpstring("Enables/Disables the SetupPrinter dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT SetupPrinter([out, retval] VARIANT_BOOL* Value);
        [id(0x00000002), propput, helpstring("Enables/Disables the SetupPrinter dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT SetupPrinter([in] VARIANT_BOOL Value);
        [id(0x00000003), propget, helpstring("Enables/Disables the ResizeImage dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT ResizeImage([out, retval] VARIANT_BOOL* Value);
        [id(0x00000003), propput, helpstring("Enables/Disables the ResizeImage dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT ResizeImage([in] VARIANT_BOOL Value);
        [id(0x00000004), propget, helpstring("Enables/Disables the MoveImage dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT MoveImage([out, retval] VARIANT_BOOL* Value);
        [id(0x00000004), propput, helpstring("Enables/Disables the MoveImage dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT MoveImage([in] VARIANT_BOOL Value);
        [id(0x00000005), propget, helpstring("Enables/Disables the ChangeDetail dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT ChangeDetail([out, retval] VARIANT_BOOL* Value);
        [id(0x00000005), propput, helpstring("Enables/Disables the ChangeDetail dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT ChangeDetail([in] VARIANT_BOOL Value);
        [id(0x00000006), propget, helpstring("Enables/Disables the ChangePaperOrientation dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT ChangePaperOrientation([out, retval] VARIANT_BOOL* Value);
        [id(0x00000006), propput, helpstring("Enables/Disables the ChangePaperOrientation dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT ChangePaperOrientation([in] VARIANT_BOOL Value);
        [id(0x00000007), propget, helpstring("Enables/Disables the ChangeMargins dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT ChangeMargins([out, retval] VARIANT_BOOL* Value);
        [id(0x00000007), propput, helpstring("Enables/Disables the ChangeMargins dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT ChangeMargins([in] VARIANT_BOOL Value);
        [id(0x00000009), propget, helpstring("Enables/Disables the DragImage dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT DragImage([out, retval] VARIANT_BOOL* Value);
        [id(0x00000009), propput, helpstring("Enables/Disables the DragImage dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT DragImage([in] VARIANT_BOOL Value);
        [id(0x0000000a), propget, helpstring("Enables/Disables the PrintPanel dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT PrintPanel([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000a), propput, helpstring("Enables/Disables the PrintPanel dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT PrintPanel([in] VARIANT_BOOL Value);
        [id(0x0000000b), propget, helpstring("Enables/Disables the AsBitmap dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT AsBitmap([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000b), propput, helpstring("Enables/Disables the AsBitmap dialog in the TeePreviewer."), helpcontext(0x000003dd)]
        HRESULT AsBitmap([in] VARIANT_BOOL Value);
    };

    [
      odl,
      uuid(B6C10538-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("OpenGL 3D rendering properties"),
      helpcontext(0x000003e3),
      dual,
      oleautomation
    ]
    interface ITeeOpenGL : IDispatch {
        [id(0x00000003), propget, helpstring("Enable / Disable OpenGL 3D rendering"), helpcontext(0x000003e0)]
        HRESULT Active([out, retval] VARIANT_BOOL* Value);
        [id(0x00000003), propput, helpstring("Enable / Disable OpenGL 3D rendering"), helpcontext(0x000003e0)]
        HRESULT Active([in] VARIANT_BOOL Value);
        [id(0x00000001), propget, helpstring("Percent of ambient light 0..100"), helpcontext(0x000003e1)]
        HRESULT AmbientLight([out, retval] long* Value);
        [id(0x00000001), propput, helpstring("Percent of ambient light 0..100"), helpcontext(0x000003e1)]
        HRESULT AmbientLight([in] long Value);
        [id(0x00000002), propget, helpstring("Position of light source"), helpcontext(0x000003b8)]
        HRESULT LightPosition([out, retval] ITeePoint3D** Value);
        [id(0x00000004), propget, helpstring("The light intensity (default = Gray )"), helpcontext(0x000003b9)]
        HRESULT LightColor([out, retval] OLE_COLOR* Value);
        [id(0x00000004), propput, helpstring("The light intensity (default = Gray )"), helpcontext(0x000003b9)]
        HRESULT LightColor([in] OLE_COLOR Value);
        [id(0x00000005), propget, helpstring("Draws filled or outlined fonts "), helpcontext(0x000003ba)]
        HRESULT FontOutlines([out, retval] VARIANT_BOOL* Value);
        [id(0x00000005), propput, helpstring("Draws filled or outlined fonts "), helpcontext(0x000003ba)]
        HRESULT FontOutlines([in] VARIANT_BOOL Value);
        [id(0x00000006), propget, helpstring("Fill drawings using smooth color gradients"), helpcontext(0x000003e2)]
        HRESULT ShadeQuality([out, retval] VARIANT_BOOL* Value);
        [id(0x00000006), propput, helpstring("Fill drawings using smooth color gradients"), helpcontext(0x000003e2)]
        HRESULT ShadeQuality([in] VARIANT_BOOL Value);
    };

    [
      odl,
      uuid(B6C10539-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Clock Series"),
      helpcontext(0x000003e4),
      dual,
      oleautomation
    ]
    interface IClockSeries : ICustomPolarSeries {
        [id(0x0000000f), propget, helpstring("Displays clock numbers as decimal or roman"), helpcontext(0x000003e6)]
        HRESULT RomanNumbers([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000f), propput, helpstring("Displays clock numbers as decimal or roman"), helpcontext(0x000003e6)]
        HRESULT RomanNumbers([in] VARIANT_BOOL Value);
        [id(0x00000010), propget, helpstring("HourHand Pen"), helpcontext(0x000006e3)]
        HRESULT PenHours([out, retval] IPen** Value);
        [id(0x00000011), propget, helpstring("MinuteHand Pen"), helpcontext(0x000006e4)]
        HRESULT PenMinutes([out, retval] IPen** Value);
        [id(0x00000012), propget, helpstring("SecondHand Pen"), helpcontext(0x000006e5)]
        HRESULT PenSeconds([out, retval] IPen** Value);
    };

    [
      odl,
      uuid(B6C1053A-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Wind Rose N-W-S-E polar series"),
      helpcontext(0x000003e5),
      dual,
      oleautomation
    ]
    interface IWindRoseSeries : ICustomPolarSeries {
    };

    [
      odl,
      uuid(B6C1053C-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Vertical Bar Series with Offset 3D values"),
      helpcontext(0x000003ed),
      dual,
      oleautomation
    ]
    interface IBar3DSeries : IBarSeries {
        [id(0x00000001), helpstring("Adds a new Bar3D point to the Series"), helpcontext(0x000003ef)]
        HRESULT AddBar(
                        [in] double AX, 
                        [in] double AY, 
                        [in] double AOffset, 
                        [in] BSTR ALabel, 
                        [in] OLE_COLOR AColor, 
                        [out, retval] long* Value);
        [id(0x00000003), propget, helpstring("The list of Series' OffsetValues"), helpcontext(0x000006fd)]
        HRESULT OffsetValues([out, retval] IValueList** Value);
    };

    [
      odl,
      uuid(B6C1053B-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Bar Series with Image picture"),
      helpcontext(0x000003ee),
      dual,
      oleautomation
    ]
    interface IImageBarSeries : IBarSeries {
        [id(0x00000001), helpstring("Load"), helpcontext(0x000006c7)]
        HRESULT LoadImage(
                        [in] BSTR FileName, 
                        [out, retval] VARIANT_BOOL* retval);
        [id(0x00000003), helpstring("Clear"), helpcontext(0x000006c8)]
        HRESULT ClearImage();
        [id(0x00000004), propget, helpstring("Tiled"), helpcontext(0x000006c9)]
        HRESULT ImageTiled([out, retval] VARIANT_BOOL* Value);
        [id(0x00000004), propput, helpstring("Tiled"), helpcontext(0x000006c9)]
        HRESULT ImageTiled([in] VARIANT_BOOL Value);
    };


    [
      odl,
      uuid(67D7AA1C-12FA-4F34-8EB2-B3E8646E0E5F),
      version(1.0),
      helpstring("Access to the Tools characteristics."),
      helpcontext(0x00000455),
      dual,
      oleautomation
    ]
    interface ITools : IDispatch {
        [id(0x00000001), propget, helpstring("Accesses TeeCursor Tool characteristics."), helpcontext(0x00000456)]
        HRESULT asTeeCursor([out, retval] ICursorTool** Value);
        [id(0x00000002), propget, helpstring("Accesses DragMarks Tool characteristics."), helpcontext(0x00000457)]
        HRESULT asDragMarks([out, retval] IDragMarksTool** Value);
        [id(0x00000003), propget, helpstring("Accesses AxisArrow Tool characteristics."), helpcontext(0x00000458)]
        HRESULT asAxisArrow([out, retval] IAxisArrowTool** Value);
        [id(0x00000004), propget, helpstring("Accesses DrawLine Tool characteristics."), helpcontext(0x00000459)]
        HRESULT asDrawLine([out, retval] IDrawLineTool** Value);
        [id(0x00000005), propget, helpstring("Accesses Nearest Tool characteristics."), helpcontext(0x0000045a)]
        HRESULT asNearest([out, retval] INearestTool** Value);
        [id(0x00000006), propget, helpstring("Accesses Colorband Tool characteristics."), helpcontext(0x0000045b)]
        HRESULT asColorband([out, retval] IColorBandTool** Value);
        [id(0x00000007), propget, helpstring("Accesses ColorLine Tool characteristics."), helpcontext(0x0000045c)]
        HRESULT asColorLine([out, retval] IColorLineTool** Value);
        [id(0x00000008), propget, helpstring("Accesses Rotate Tool characteristics."), helpcontext(0x0000045d)]
        HRESULT asRotate([out, retval] IRotateTool** Value);
        [id(0x00000009), propget, helpstring("Accesses MarksTip Tool characteristics."), helpcontext(0x0000045e)]
        HRESULT asMarksTip([out, retval] IMarksTipTool** Value);
        [id(0x0000000a), propget, helpstring("Accesses ChartImage Tool characteristics."), helpcontext(0x0000045f)]
        HRESULT asChartImage([out, retval] IChartImageTool** Value);
        [id(0x0000000b), propget, helpstring("Accesses Annotation Tool characteristics."), helpcontext(0x00000644)]
        HRESULT asAnnotation([out, retval] IAnnotationTool** Value);
        [id(0x0000000c), propget, helpstring("Accesses PageNumber Tool characteristics."), helpcontext(0x00000645)]
        HRESULT asPageNum([out, retval] IPageNumTool** Value);
        [id(0x0000000d), propget, helpstring("Activates/Deactivates the specified Chart Tool"), helpcontext(0x00000646)]
        HRESULT Active([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000d), propput, helpstring("Activates/Deactivates the specified Chart Tool"), helpcontext(0x00000646)]
        HRESULT Active([in] VARIANT_BOOL Value);
        [id(0x0000000e), propget, helpstring("Returns a string description of the Chart Tool"), helpcontext(0x00000647)]
        HRESULT Description([out, retval] BSTR* Value);
        [id(0x0000000f), propget, helpstring("Returns the class name of the Chart Tool"), helpcontext(0x00000648)]
        HRESULT ToolType([out, retval] EToolClass* Value);
    };

    [
      odl,
      uuid(62DD8655-F041-11D4-93B1-006008A7EED4),
      version(1.0),
      helpstring("Ancestor class for TeeChart Tool classes."),
      helpcontext(0x00000460),
      dual,
      oleautomation
    ]
    interface ICustomToolSeries : IDispatch {
        [id(0x0000000e), propget, helpstring("Sets the Series to which the Tool is associated."), helpcontext(0x00000461)]
        HRESULT Series([out, retval] VARIANT* Value);
        [id(0x0000000e), propput, helpstring("Sets the Series to which the Tool is associated."), helpcontext(0x00000461)]
        HRESULT Series([in] VARIANT Value);
    };

    typedef [uuid(054D2794-0B03-4879-80D6-E6708BE79B14), version(1.0), helpstring("Defines the style of the Cursor Tool"), helpcontext(0x00000464)]
    enum {
        cssHorizontal = 0,
        cssVertical = 1,
        cssBoth = 2
    } ECursorToolStyle;

    [
      odl,
      uuid(9CE4E780-4431-4504-948A-797D83C1E310),
      version(1.0),
      helpstring("Allows the mousedrag of Marks for the selected Series."),
      helpcontext(0x00000468),
      dual,
      oleautomation
    ]
    interface IDragMarksTool : ICustomToolSeries {
    };

    [
      odl,
      uuid(11F8E071-F114-11D4-93B3-006008A7EED4),
      version(1.0),
      helpstring("Ancestor class for TeeChart Tool classes."),
      helpcontext(0x00000469),
      dual,
      oleautomation
    ]
    interface ICustomToolAxis : IDispatch {
        [id(0x0000000d), propget, helpstring("Sets the Axis to which the Tool is associated."), helpcontext(0x0000046a)]
        HRESULT Axis([out, retval] VARIANT* Value);
        [id(0x0000000d), propput, helpstring("Sets the Axis to which the Tool is associated."), helpcontext(0x0000046a)]
        HRESULT Axis([in] VARIANT Value);
    };

    [
      odl,
      uuid(5970102E-E487-4B12-88A8-A7930EF23E5D),
      version(1.0),
      helpstring("Permits the ability to draw Lines on the Chart via mousedrags."),
      helpcontext(0x0000046d),
      dual,
      oleautomation
    ]
    interface IDrawLineTool : ICustomToolSeries {
        [id(0x00000001), propget, helpstring("Sets the X and Y values from which lines are drawn."), helpcontext(0x0000046e)]
        HRESULT FromPoint([out, retval] ITeePoint2D** Value);
        [id(0x00000002), propget, helpstring("Sets the X and Y values to which lines are drawn."), helpcontext(0x0000046f)]
        HRESULT ToPoint([out, retval] ITeePoint2D** Value);
        [id(0x00000003), helpstring("Returns the coordinate position in pixels corresponding to the P point in respectively vertical and horizontal axis scales."), helpcontext(0x00000470)]
        HRESULT AxisPoint(
                        [in] double X, 
                        [in] double Y, 
                        [out, retval] ITeePoint2D** Value);
        [id(0x00000004), helpstring("Returns TDrawLine Line at x,y point."), helpcontext(0x00000471)]
        HRESULT Clicked(
                        [in] long X, 
                        [in] long Y, 
                        [out, retval] long* Value);
        [id(0x00000005), helpstring("Delete currently selected TDrawLine."), helpcontext(0x00000472)]
        HRESULT DeleteSelected();
        [id(0x00000006), helpstring("Returns the corresponding point-value on respectively the horizontal and vertical axis of a Screen position P."), helpcontext(0x00000473)]
        HRESULT ScreenPoint(
                        [in] long X, 
                        [in] long Y, 
                        [out, retval] ITeePoint2D** Value);
        [id(0x00000007), propget, helpstring("Contains the list of lines drawn on the chart by the user at run-time."), helpcontext(0x00000474)]
        HRESULT Lines([out, retval] IDrawLineList** Value);
        [id(0x00000008), propget, helpstring("Returns the line or lines that are currently selected."), helpcontext(0x00000475)]
        HRESULT Selected([out, retval] long* Index);
        [id(0x00000008), propput, helpstring("Returns the line or lines that are currently selected."), helpcontext(0x00000475)]
        HRESULT Selected([in] long Index);
        [id(0x00000009), propget, helpstring("Defines by which mousebutton the DrawLine Tool is activated. "), helpcontext(0x00000476)]
        HRESULT Button([out, retval] EMouseButton* Value);
        [id(0x00000009), propput, helpstring("Defines by which mousebutton the DrawLine Tool is activated. "), helpcontext(0x00000476)]
        HRESULT Button([in] EMouseButton Value);
        [id(0x0000000a), propget, helpstring("Enables/disables the drawing of lines on the chart by the user at run-time "), helpcontext(0x00000477)]
        HRESULT EnableDraw([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000a), propput, helpstring("Enables/disables the drawing of lines on the chart by the user at run-time "), helpcontext(0x00000477)]
        HRESULT EnableDraw([in] VARIANT_BOOL Value);
        [id(0x0000000b), propget, helpstring("Enables selection of lines for repositioning on the Chart."), helpcontext(0x00000478)]
        HRESULT EnableSelect([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000b), propput, helpstring("Enables selection of lines for repositioning on the Chart."), helpcontext(0x00000478)]
        HRESULT EnableSelect([in] VARIANT_BOOL Value);
        [id(0x0000000d), propget, helpstring("Element Pen characteristics."), helpcontext(0x00000479)]
        HRESULT Pen([out, retval] IPen** Value);
        [id(0x0000000c), helpstring("Add new line"), helpcontext(0x000006dc)]
        HRESULT AddLine(
                        [in] double FromX, 
                        [in] double FromY, 
                        [in] double ToX, 
                        [in] double ToY, 
                        [out, retval] long* retval);
    };

    [
      odl,
      uuid(2EB35E28-80CF-4F35-9B6B-427E2AC1BFA6),
      version(1.0),
      helpstring("Moves a marker to the point nearest to the cursor."),
      helpcontext(0x0000047a),
      dual,
      oleautomation
    ]
    interface INearestTool : ICustomToolSeries {
        [id(0x00000002), propget, helpstring("Element Brush characteristics."), helpcontext(0x0000047b)]
        HRESULT Brush([out, retval] IBrush** Value);
        [id(0x00000003), propget, helpstring("Set this property to True if a temporary line has to be drawn from the mouse coordinates to the nearest point."), helpcontext(0x0000047c)]
        HRESULT DrawLine([out, retval] VARIANT_BOOL* Value);
        [id(0x00000003), propput, helpstring("Set this property to True if a temporary line has to be drawn from the mouse coordinates to the nearest point."), helpcontext(0x0000047c)]
        HRESULT DrawLine([in] VARIANT_BOOL Value);
        [id(0x00000004), propget, helpstring("Default: True "), helpcontext(0x0000047d)]
        HRESULT FullRepaint([out, retval] VARIANT_BOOL* Value);
        [id(0x00000004), propput, helpstring("Default: True "), helpcontext(0x0000047d)]
        HRESULT FullRepaint([in] VARIANT_BOOL Value);
        [id(0x00000005), propget, helpstring("Element Pen characteristics."), helpcontext(0x0000047e)]
        HRESULT Pen([out, retval] IPen** Value);
        [id(0x00000007), propget, helpstring("Default 20: Sets the size of the NearestTool shape."), helpcontext(0x0000047f)]
        HRESULT Size([out, retval] long* Value);
        [id(0x00000007), propput, helpstring("Default 20: Sets the size of the NearestTool shape."), helpcontext(0x0000047f)]
        HRESULT Size([in] long Value);
        [id(0x00000008), propget, helpstring("Sets the shape of the NearestTool."), helpcontext(0x00000480)]
        HRESULT Style([out, retval] ENearestToolStyle* Value);
        [id(0x00000008), propput, helpstring("Sets the shape of the NearestTool."), helpcontext(0x00000480)]
        HRESULT Style([in] ENearestToolStyle Value);
    };

    [
      odl,
      uuid(C9F8E464-0B4B-4427-8678-363CF8E1955D),
      version(1.0),
      helpstring("Adds bands of configurable colour to the interior region enclosed by the Chart axes. "),
      helpcontext(0x00000481),
      dual,
      oleautomation
    ]
    interface IColorBandTool : ICustomToolAxis {
        [id(0x00000003), propget, helpstring("Element Brush characteristics."), helpcontext(0x00000482)]
        HRESULT Brush([out, retval] IBrush** Value);
        [id(0x00000005), propget, helpstring("Element Pen characteristics."), helpcontext(0x00000483)]
        HRESULT Pen([out, retval] IPen** Value);
        [id(0x00000006), propget, helpstring("Set EndValue to the Axis position to where the colorband has to be drawn."), helpcontext(0x00000484)]
        HRESULT EndValue([out, retval] double* Value);
        [id(0x00000006), propput, helpstring("Set EndValue to the Axis position to where the colorband has to be drawn."), helpcontext(0x00000484)]
        HRESULT EndValue([in] double Value);
        [id(0x00000007), propget, helpstring("Set StartValue to the Axis position from where the colorband has to be drawn."), helpcontext(0x00000485)]
        HRESULT StartValue([out, retval] double* Value);
        [id(0x00000007), propput, helpstring("Set StartValue to the Axis position from where the colorband has to be drawn."), helpcontext(0x00000485)]
        HRESULT StartValue([in] double Value);
        [id(0x00000001), propget, helpstring("Set to True to draw the ColorBand behind the Series."), helpcontext(0x00000486)]
        HRESULT DrawBehind([out, retval] VARIANT_BOOL* Value);
        [id(0x00000001), propput, helpstring("Set to True to draw the ColorBand behind the Series."), helpcontext(0x00000486)]
        HRESULT DrawBehind([in] VARIANT_BOOL Value);
        [id(0x00000002), propget, helpstring("Sets Band colour."), helpcontext(0x00000487)]
        HRESULT Color([out, retval] OLE_COLOR* Value);
        [id(0x00000002), propput, helpstring("Sets Band colour."), helpcontext(0x00000487)]
        HRESULT Color([in] OLE_COLOR Value);
        [id(0x00000004), propget, helpstring("Use to set Band colour gradient."), helpcontext(0x00000488)]
        HRESULT Gradient([out, retval] IGradient** Value);
        [id(0x00000008), propget, helpstring("Sets the transparency of the ColorBand from 0 - 100%."), helpcontext(0x00000489)]
        HRESULT Transparency([out, retval] long* Value);
        [id(0x00000008), propput, helpstring("Sets the transparency of the ColorBand from 0 - 100%."), helpcontext(0x00000489)]
        HRESULT Transparency([in] long Value);
    };

    [
      odl,
      uuid(CDE865C4-6B25-4604-8813-F0A65E51F1C8),
      version(1.0),
      helpstring("Adds coloured lines to the Chart "),
      helpcontext(0x0000048a),
      dual,
      oleautomation
    ]
    interface IColorLineTool : ICustomToolAxis {
        [id(0x00000003), propget, helpstring("Element Pen characteristics."), helpcontext(0x0000048b)]
        HRESULT Pen([out, retval] IPen** Value);
        [id(0x00000004), propget, helpstring("Set Value to the Axis position where the colorline has to be drawn."), helpcontext(0x0000048c)]
        HRESULT Value([out, retval] double* Value);
        [id(0x00000004), propput, helpstring("Set Value to the Axis position where the colorline has to be drawn."), helpcontext(0x0000048c)]
        HRESULT Value([in] double Value);
        [id(0x00000001), propget, helpstring("Default False: When true allows mousedrag of Line."), helpcontext(0x0000048d)]
        HRESULT AllowDrag([out, retval] VARIANT_BOOL* Value);
        [id(0x00000001), propput, helpstring("Default False: When true allows mousedrag of Line."), helpcontext(0x0000048d)]
        HRESULT AllowDrag([in] VARIANT_BOOL Value);
        [id(0x00000002), helpstring("Returns True when the ColorLineTool is clicked."), helpcontext(0x0000048e)]
        HRESULT Clicked(
                        [in] long X, 
                        [in] long Y, 
                        [out, retval] VARIANT_BOOL* Value);
        [id(0x00000005), propget, helpstring("Repaint Chart when Line dragged"), helpcontext(0x000006d8)]
        HRESULT DragRepaint([out, retval] VARIANT_BOOL* Value);
        [id(0x00000005), propput, helpstring("Repaint Chart when Line dragged"), helpcontext(0x000006d8)]
        HRESULT DragRepaint([in] VARIANT_BOOL Value);
        [id(0x00000006), propget]
        HRESULT NoLimitDrag([out, retval] VARIANT_BOOL* Value);
        [id(0x00000006), propput]
        HRESULT NoLimitDrag([in] VARIANT_BOOL Value);
    };

    [
      odl,
      uuid(97763CEC-4D57-4612-A799-05C6E19AC789),
      version(1.0),
      helpstring("Changes the elevation and rotation of charts when dragging the mouse over a chart. "),
      helpcontext(0x0000048f),
      dual,
      oleautomation
    ]
    interface IRotateTool : IDispatch {
        [id(0x00000001), propget, helpstring("Element Active True/False."), helpcontext(0x00000490)]
        HRESULT Active([out, retval] VARIANT_BOOL* Value);
        [id(0x00000001), propput, helpstring("Element Active True/False."), helpcontext(0x00000490)]
        HRESULT Active([in] VARIANT_BOOL Value);
        [id(0x00000002), propget, helpstring("Default mbLeft: Defines by which mousebutton the RotateTool is activated. "), helpcontext(0x00000491)]
        HRESULT Button([out, retval] EMouseButton* Value);
        [id(0x00000002), propput, helpstring("Default mbLeft: Defines by which mousebutton the RotateTool is activated. "), helpcontext(0x00000491)]
        HRESULT Button([in] EMouseButton Value);
        [id(0x00000003), helpstring("Returns the description of the TTeeCustomTool. In this case the function returns 'Rotate'."), helpcontext(0x00000492)]
        HRESULT Description([out, retval] BSTR* Value);
    };



    [
      odl,
      uuid(C793DB5D-E235-4248-87AD-E436822E64F2),
      version(1.0),
      helpstring("Similar to a Line Series but with a Y Axis ordering of points ."),
      helpcontext(0x00000495),
      dual,
      oleautomation
    ]
    interface IHorizLineSeries : ILineSeries {
    };

    [
      odl,
      uuid(B4B8B973-32BF-40A8-8E07-EFBA557E13F8),
      version(1.0),
      helpstring("HighLowSeries is an abstract Series class that maintains lists for High and Low values."),
      helpcontext(0x00000496),
      dual,
      oleautomation
    ]
    interface IHighLowSeries : IDispatch {
        [id(0x00000001), helpstring("Use AddHighLow to add a new High and Low value to a HighLow series."), helpcontext(0x00000497)]
        HRESULT AddHighLow(
                        [in] double AX, 
                        [in] double AHigh, 
                        [in] double ALow, 
                        [in] BSTR AXLabel, 
                        [in] OLE_COLOR AColor, 
                        [out, retval] long* Value);
        [id(0x00000002), propget, helpstring("Defines the Brush properties for the High value."), helpcontext(0x00000585)]
        HRESULT HighBrush([out, retval] IBrush** Value);
        [id(0x00000003), propget, helpstring("Defines the Pen properties for the High value."), helpcontext(0x00000586)]
        HRESULT HighPen([out, retval] IPen** Value);
        [id(0x00000004), propget, helpstring("Allows access to TChartValueList properties for the High Value."), helpcontext(0x00000498)]
        HRESULT HighValues([out, retval] IValueList** Value);
        [id(0x00000005), propget, helpstring("Defines the Brush properties for the Low value."), helpcontext(0x00000588)]
        HRESULT LowBrush([out, retval] IBrush** Value);
        [id(0x00000006), propget, helpstring("Defines the Pen properties for the Low value."), helpcontext(0x00000589)]
        HRESULT LowPen([out, retval] IPen** Value);
        [id(0x00000007), propget, helpstring("Allows access to TChartValueList properties for the Low Value."), helpcontext(0x00000499)]
        HRESULT LowValues([out, retval] IValueList** Value);
        [id(0x00000008), propget, helpstring("Defines the Pen properties for the entire HighLow series outline."), helpcontext(0x00000649)]
        HRESULT Pen([out, retval] IPen** Value);
    };

    [
      odl,
      uuid(3B2B9817-FBBF-11D4-93CA-006008A7EED4),
      version(1.0),
      helpstring("Chart Header and Footer attributes"),
      helpcontext(0x0000020f),
      dual,
      oleautomation
    ]
    interface ITitles : ITeeShapePosition {
        [id(0x00000001), propget, helpstring("Resizes Title frame to Title text dimensions"), helpcontext(0x00000025)]
        HRESULT AdjustFrame([out, retval] VARIANT_BOOL* AdjustFrame);
        [id(0x00000001), propput, helpstring("Resizes Title frame to Title text dimensions"), helpcontext(0x00000025)]
        HRESULT AdjustFrame([in] VARIANT_BOOL AdjustFrame);
        [id(0x00000002), propget, helpstring("Controls the Title horizontal position"), helpcontext(0x0000002a)]
        HRESULT Alignment([out, retval] ETitleAlignment* Alignment);
        [id(0x00000002), propput, helpstring("Controls the Title horizontal position"), helpcontext(0x0000002a)]
        HRESULT Alignment([in] ETitleAlignment Alignment);
        [id(0x00000003), propget, helpstring("Brush used to fill Title background"), helpcontext(0x0000006d)]
        HRESULT Brush([out, retval] IBrush** Brush);
        [id(0x00000005), propget, helpstring("Pen used to draw a border around the Title"), helpcontext(0x000000de)]
        HRESULT Frame([out, retval] IPen** Frame);
        [id(0x00000006), propget, helpstring("Collection of Title Text strings"), helpcontext(0x00000280)]
        HRESULT Text([out, retval] IStrings** Text);
        [id(0x00000007), propget, helpstring("Shows / Hides the Title"), helpcontext(0x000002a9)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x00000007), propput, helpstring("Shows / Hides the Title"), helpcontext(0x000002a9)]
        HRESULT Visible([in] VARIANT_BOOL Visible);
    };

    [
      odl,
      uuid(750EB847-B333-4A73-8AEE-9087F8B98D1E),
      version(1.0),
      helpstring("Interface to control the deployment of TeeChart Tools."),
      helpcontext(0x000005c2),
      dual,
      oleautomation
    ]
    interface IToolList : IDispatch {
        [id(0x00000001), helpstring("Insert a new Tool at the end of the ToolsList. Add returns the index of the new Tool."), helpcontext(0x0000049e)]
        HRESULT Add(
                        [in] EToolClass ToolClass, 
                        [out, retval] long* Value);
        [id(0x00000002), propget, helpstring("Access the TeeChart ToolType by index. "), helpcontext(0x0000049f)]
        HRESULT Items(
                        [in] long Index, 
                        [out, retval] ITools** Value);
        [id(00000000), propget, helpcontext(0x000004a0)]
        HRESULT ControlDefault(
                        [in] long Index, 
                        [out, retval] VARIANT* Value);
        [id(0x00000005), helpstring("Empties the ToolList and sets the Count to 0. "), helpcontext(0x000004a1)]
        HRESULT Clear();
        [id(0x00000006), helpstring("Removes the Tool at a specific position from the list."), helpcontext(0x000004a2)]
        HRESULT Delete([in] long Index);
        [id(0x00000007), propget, helpstring("Read Count to determine the number of entries in the ToolList."), helpcontext(0x000004a3)]
        HRESULT Count([out, retval] long* Value);
    };



    [
      odl,
      uuid(CC476B13-71AC-463F-85E4-0AA8DD8B8BDE),
      version(1.0),
      helpstring("Describes characteristics of the colour box symbols that are placed adjacent to the Legend text descriptions."),
      helpcontext(0x000004a5),
      dual,
      oleautomation
    ]
    interface ILegendSymbol : IDispatch {
        [id(0x00000001), propget, helpstring("When set to True, the color rectangles of the different items are drawn fixed to each other (no vertical spacing)."), helpcontext(0x000004a6)]
        HRESULT Continuous([out, retval] VARIANT_BOOL* Value);
        [id(0x00000001), propput, helpstring("When set to True, the color rectangles of the different items are drawn fixed to each other (no vertical spacing)."), helpcontext(0x000004a6)]
        HRESULT Continuous([in] VARIANT_BOOL Value);
        [id(0x00000002), propget, helpstring("Sets the position of the color rectangles."), helpcontext(0x00000511)]
        HRESULT Position([out, retval] ELegendSymbolPosition* Value);
        [id(0x00000002), propput, helpstring("Sets the position of the color rectangles."), helpcontext(0x00000511)]
        HRESULT Position([in] ELegendSymbolPosition Value);
        [id(0x00000003), propget, helpstring("Defines the width of the color rectangles (symbols)."), helpcontext(0x00000512)]
        HRESULT Width([out, retval] long* Value);
        [id(0x00000003), propput, helpstring("Defines the width of the color rectangles (symbols)."), helpcontext(0x00000512)]
        HRESULT Width([in] long Value);
        [id(0x00000004), propget, helpstring("Units used to set Width"), helpcontext(0x000006c5)]
        HRESULT WidthUnits([out, retval] ELegendSymbolSize* Value);
        [id(0x00000004), propput, helpstring("Units used to set Width"), helpcontext(0x000006c5)]
        HRESULT WidthUnits([in] ELegendSymbolSize Value);
    };



    [
      odl,
      uuid(3B2B9819-FBBF-11D4-93CA-006008A7EED4),
      version(1.0),
      helpstring("The TeeFont Component gives access to additional properties and methods relative to fonts."),
      helpcontext(0x000004a9),
      dual,
      oleautomation
    ]
    interface ITeeFont : IChartFont {
        [id(0x0000000b), propget, helpstring("Defines the size of the space between characters."), helpcontext(0x000005b2)]
        HRESULT InterCharSize([out, retval] long* Value);
        [id(0x0000000b), propput, helpstring("Defines the size of the space between characters."), helpcontext(0x000005b2)]
        HRESULT InterCharSize([in] long Value);
        [id(0x0000000c), propget, helpstring("Setting Shadow defines the shadows of fonts via TeeShadow properties and methods."), helpcontext(0x000004aa)]
        HRESULT Shadow([out, retval] ITeeShadow** Value);
    };

    [
      odl,
      uuid(5101D067-AD02-426B-832E-A898AF6E4F5E),
      version(1.0),
      helpstring("TeeShadow is used by several TeeChart components to define the offset shadow of the component."),
      helpcontext(0x000004ab),
      dual,
      oleautomation
    ]
    interface ITeeShadow : IDispatch {
        [id(0x00000002), propget, helpstring("Horizontal size of the shadow in pixels."), helpcontext(0x00000527)]
        HRESULT HorizSize([out, retval] long* Value);
        [id(0x00000002), propput, helpstring("Horizontal size of the shadow in pixels."), helpcontext(0x00000527)]
        HRESULT HorizSize([in] long Value);
        [id(0x00000003), propget, helpstring("Vertical size of the shadow in pixels."), helpcontext(0x00000528)]
        HRESULT VertSize([out, retval] long* Value);
        [id(0x00000003), propput, helpstring("Vertical size of the shadow in pixels."), helpcontext(0x00000528)]
        HRESULT VertSize([in] long Value);
        [id(0x00000005), propget, helpstring("Shadow colour."), helpcontext(0x00000526)]
        HRESULT Color([out, retval] OLE_COLOR* Value);
        [id(0x00000005), propput, helpstring("Shadow colour."), helpcontext(0x00000526)]
        HRESULT Color([in] OLE_COLOR Value);
    };

    [
      odl,
      uuid(252A62F5-0C94-48E0-90AD-7B64200E53C1),
      version(1.0),
      helpstring("The TeePreviewPanel is a panel that may be inserted on a form to show WYSIWYG printable output of a TChart."),
      helpcontext(0x000004ad),
      hidden,
      dual,
      oleautomation
    ]
    interface ITeePreviewPanel : ITeeLinked {
        [id(0x00000002), propget, helpstring("Default True: When True permits mousedrag resize of the TChart for the printed page."), helpcontext(0x000004ae)]
        HRESULT AllowResize([out, retval] VARIANT_BOOL* Value);
        [id(0x00000002), propput, helpstring("Default True: When True permits mousedrag resize of the TChart for the printed page."), helpcontext(0x000004ae)]
        HRESULT AllowResize([in] VARIANT_BOOL Value);
        [id(0x00000003), propget, helpstring("Default True: When true allows mousedrag move of TChart on printed page."), helpcontext(0x000004af)]
        HRESULT AllowMove([out, retval] VARIANT_BOOL* Value);
        [id(0x00000003), propput, helpstring("Default True: When true allows mousedrag move of TChart on printed page."), helpcontext(0x000004af)]
        HRESULT AllowMove([in] VARIANT_BOOL Value);
        [id(0x00000004), propget, helpstring("Default False: displays the chart as bitmap or not."), helpcontext(0x000004b0)]
        HRESULT AsBitmap([out, retval] VARIANT_BOOL* Value);
        [id(0x00000004), propput, helpstring("Default False: displays the chart as bitmap or not."), helpcontext(0x000004b0)]
        HRESULT AsBitmap([in] VARIANT_BOOL Value);
        [id(0x00000005), propget, helpstring("Default False: allows dragging of the chart on the preview panel."), helpcontext(0x000004b1)]
        HRESULT DragImage([out, retval] VARIANT_BOOL* Value);
        [id(0x00000005), propput, helpstring("Default False: allows dragging of the chart on the preview panel."), helpcontext(0x000004b1)]
        HRESULT DragImage([in] VARIANT_BOOL Value);
        [id(0x00000006), propget, helpstring("Default ppoDefault: specifies the orientation of the PreviewPanel."), helpcontext(0x000004b2)]
        HRESULT Orientation([out, retval] ETeePreviewPanelOrientation* Value);
        [id(0x00000006), propput, helpstring("Default ppoDefault: specifies the orientation of the PreviewPanel."), helpcontext(0x000004b2)]
        HRESULT Orientation([in] ETeePreviewPanelOrientation Value);
        [id(0x00000007), propget, helpstring("Default clWhite: Use Color to read or change the background color of the Preview Panel."), helpcontext(0x000004b3)]
        HRESULT PaperColor([out, retval] OLE_COLOR* Value);
        [id(0x00000007), propput, helpstring("Default clWhite: Use Color to read or change the background color of the Preview Panel."), helpcontext(0x000004b3)]
        HRESULT PaperColor([in] OLE_COLOR Value);
        [id(0x00000008), propget, helpstring("Use ShadowColor to read or change the Color of the PreviewPanel Shadow."), helpcontext(0x000004b4)]
        HRESULT ShadowColor([out, retval] OLE_COLOR* Value);
        [id(0x00000008), propput, helpstring("Use ShadowColor to read or change the Color of the PreviewPanel Shadow."), helpcontext(0x000004b4)]
        HRESULT ShadowColor([in] OLE_COLOR Value);
        [id(0x00000009), propget, helpstring("Use ShadowSize property to define the Size of the PreviewPanel Shadow."), helpcontext(0x000004b5)]
        HRESULT ShadowSize([out, retval] long* Value);
        [id(0x00000009), propput, helpstring("Use ShadowSize property to define the Size of the PreviewPanel Shadow."), helpcontext(0x000004b5)]
        HRESULT ShadowSize([in] long Value);
        [id(0x0000000a), propget, helpstring("Use ShowImage property to show/hide the chart image."), helpcontext(0x000004b6)]
        HRESULT ShowImage([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000a), propput, helpstring("Use ShowImage property to show/hide the chart image."), helpcontext(0x000004b6)]
        HRESULT ShowImage([in] VARIANT_BOOL Value);
        [id(0x0000000b), propget, helpstring("Use the Title property to set the Preview Panel Title."), helpcontext(0x000004b7)]
        HRESULT Title([out, retval] BSTR* Value);
        [id(0x0000000b), propput, helpstring("Use the Title property to set the Preview Panel Title."), helpcontext(0x000004b7)]
        HRESULT Title([in] BSTR Value);
        [id(0x0000000c), helpstring("Repaints the Preview Panel."), helpcontext(0x000004b8)]
        HRESULT Repaint();
        [id(0x0000000d), propget, helpstring("Use Panels to place several Charts on a Print Preview."), helpcontext(0x000004b9)]
        HRESULT Panels([out, retval] ITeePanelsList** Value);
        [id(0x0000000e), helpstring("Adds a specified TChart to the Preview panel."), helpcontext(0x000004ba)]
        HRESULT AddChart([in] ITChart* Value);
        [id(0x0000000f), propget, helpstring("Defines Preview Panel Gradient characteristics."), helpcontext(0x000004bb)]
        HRESULT Gradient([out, retval] IGradient** Value);
        [id(0x00000011), propget, helpstring("Margins Pen"), helpcontext(0x000006ba)]
        HRESULT Margins([out, retval] IPen** Value);
        [id(0x00000012), helpstring("Print PreviewPanel Page"), helpcontext(0x000006bb)]
        HRESULT PrintPage();
        [id(0x00000010), helpstring("Add ChartLink where interface not supported"), helpcontext(0x000006fb)]
        HRESULT AddChartLink([in] long Value);
    };

    [
      uuid(26F54550-BCB7-4CAE-B817-0D681FEF07F7),
      version(1.0),
      helpstring("Events interface for TeeChart Preview Panel."),
      helpcontext(0x000004ad)
    ]
    dispinterface ITeePreviewPanelEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("The OnChangeMargins event is called when the position of a margin has changed."), helpcontext(0x000004bc)]
            HRESULT OnChangeMargins(
                            [in] VARIANT_BOOL DisableProportional, 
                            [in] long Left, 
                            [in] long Top, 
                            [in] long Right, 
                            [in] long Bottom);
    };

    [
      uuid(1FDB3FEB-A12B-4A8F-9BA7-CC342949D9AF),
      version(1.0),
      helpstring("TeeChart PreviewPanel v5"),
      helpcontext(0x000004ad),
      control
    ]
    coclass TeePreviewPanel {
        [default] interface ITeePreviewPanel;
        [default, source] dispinterface ITeePreviewPanelEvents;
    };



    [
      odl,
      uuid(FD15F1C9-69D8-4FAE-9A96-DD2E0B88DDD4),
      version(1.0),
      helpstring("Offers a grid data representation of the data plotted in a TChart."),
      helpcontext(0x000005c1),
      hidden,
      dual,
      oleautomation
    ]
    interface IChartGrid : ITeeLinked {
        [id(0x00000002), propget, helpstring("Deprecated - use Cols"), helpcontext(0x000004be)]
        HRESULT Col([out, retval] long* Value);
        [id(0x00000002), propput, helpstring("Deprecated - use Cols"), helpcontext(0x000004be)]
        HRESULT Col([in] long Value);
        [id(0x00000003), propget, helpstring("Deprecated - use Cols"), helpcontext(0x000004bf)]
        HRESULT ColCount([out, retval] long* Value);
        [id(0x00000004), propget, hidden, helpstring("Deprecated - use Cols"), helpcontext(0x000004c0)]
        HRESULT Colwidths(
                        [in] long Index, 
                        [out, retval] long* Value);
        [id(0x00000004), propput, hidden, helpstring("Deprecated - use Cols"), helpcontext(0x000004c0)]
        HRESULT Colwidths(
                        [in] long Index, 
                        [in] long Value);
        [id(0x00000005), propget, helpstring("Determines whether the current cell can be edited."), helpcontext(0x000004c1)]
        HRESULT EditorMode([out, retval] VARIANT_BOOL* Value);
        [id(0x00000005), propput, helpstring("Determines whether the current cell can be edited."), helpcontext(0x000004c1)]
        HRESULT EditorMode([in] VARIANT_BOOL Value);
        [id(0x00000006), propget, helpstring("Specifies the height of the grid in pixels."), helpcontext(0x000004c2)]
        HRESULT GridHeight([out, retval] long* Value);
        [id(0x00000007), propget, helpstring("Specifies the width of the grid in pixels."), helpcontext(0x000004c3)]
        HRESULT GridWidth([out, retval] long* Value);
        [id(0x00000008), propget, helpstring("Specifies the index of the first visible scrollable column in the grid."), helpcontext(0x000004c4)]
        HRESULT LeftCol([out, retval] long* Value);
        [id(0x00000008), propput, helpstring("Specifies the index of the first visible scrollable column in the grid."), helpcontext(0x000004c4)]
        HRESULT LeftCol([in] long Value);
        [id(0x00000009), propget, helpstring("Used to link ChartGrid to ChartGridNavigator in some environments"), helpcontext(0x000004c5)]
        HRESULT GridLink([out, retval] long* Value);
        [id(0x0000000a), helpstring("Recalculate Grid dimensions is called automatically by TeeChart."), helpcontext(0x000004c6)]
        HRESULT RecalcDimensions();
        [id(0x0000000b), propget, helpstring("Use ShowLabels property to show/hide the series labels in the grid."), helpcontext(0x000004c7)]
        HRESULT ShowLabels([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000b), propput, helpstring("Use ShowLabels property to show/hide the series labels in the grid."), helpcontext(0x000004c7)]
        HRESULT ShowLabels([in] VARIANT_BOOL Value);
        [id(0x0000000c), propget, helpstring("Show/hide value colours"), helpcontext(0x000006d3)]
        HRESULT ShowColors([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000c), propput, helpstring("Show/hide value colours"), helpcontext(0x000006d3)]
        HRESULT ShowColors([in] VARIANT_BOOL Value);
        [id(0x0000000d), propget, helpstring("Show/hide title fields"), helpcontext(0x000006d4)]
        HRESULT ShowFields([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000d), propput, helpstring("Show/hide title fields"), helpcontext(0x000006d4)]
        HRESULT ShowFields([in] VARIANT_BOOL Value);
        [id(0x00000013), helpstring("Access ChartGrid Column collection"), helpcontext(0x000006f1)]
        HRESULT Cols([out, retval] IChartGridCols** Value);
        [id(0x00000014), helpstring("Access ChartGrid Row collection"), helpcontext(0x000006f2)]
        HRESULT Rows([out, retval] IChartGridRows** Value);
    };

    [
      uuid(74687F85-2744-11D5-9411-006008A7EED4),
      version(1.0),
      helpstring("Events interface for TeeChart ChartGrid."),
      helpcontext(0x000005c1)
    ]
    dispinterface IChartGridEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Called upon clicking ChartGrid."), helpcontext(0x0000064b)]
            HRESULT OnClick();
    };

    [
      odl,
      uuid(9A52F188-2664-4615-B199-B9AA9AD22861),
      version(1.0),
      helpstring("The ChartGridNavigator should be associated to a ChartGrid via the TChartGridNavigator.Grid property to navigate within the Grid."),
      helpcontext(0x000004c8),
      hidden,
      dual,
      oleautomation
    ]
    interface IChartGridNavigator : IDispatch {
        [id(0x00000004), propput, helpstring("Use the Grid property to link the Grid Navigator with a Chartgrid."), helpcontext(0x000004c9)]
        HRESULT Grid([in] IChartGrid* rhs);
        [id(0x00000002), propput, helpstring("Used to link ChartGridNavigator to ChartGrid in some environments"), helpcontext(0x000004ca)]
        HRESULT GridLink([in] long rhs);
        [id(0x00000003), helpstring("This method will enable/disable the gridnavigator buttons according to the navigation state."), helpcontext(0x000004cb)]
        HRESULT EnableButtons();
    };

    [
      uuid(A92B03A8-D509-4D2F-A953-B26ED8498AB0),
      version(1.0),
      helpstring("TeeChart ChartGridNavigator v5"),
      helpcontext(0x000004c8),
      control
    ]
    coclass ChartGridNavigator {
        [default] interface IChartGridNavigator;
    };

    [
      odl,
      uuid(32268BD8-C0D1-473D-A13C-65AB4A58397B),
      version(1.0),
      helpstring("Navigator button bar for paging a Paged Chart. Use when MaxPointsPerPage is set."),
      helpcontext(0x000005d0),
      hidden,
      dual,
      oleautomation
    ]
    interface IChartPageNavigator : ITeeLinked {
        [id(0x00000002), helpstring("Use EnableButtons to refresh the TChartPageNavigator after any change of Chart data/page status not caused by the navigator."), helpcontext(0x000004cc)]
        HRESULT EnableButtons();
    };

    [
      uuid(C4BB55C5-9F2C-4B46-86F3-F3BB52A83B4E),
      version(1.0),
      helpstring("TeeChart ChartPageNavigator v5"),
      helpcontext(0x000005d0),
      control
    ]
    coclass ChartPageNavigator {
        [default] interface IChartPageNavigator;
    };

    [
      odl,
      uuid(8A48BA34-FA69-4168-A477-026F96344C49),
      version(1.0),
      helpstring("TeeChart Chart Editor Panel"),
      helpcontext(0x00000469),
      hidden,
      dual,
      oleautomation
    ]
    interface IChartEditorPanel : ITeeLinked {
        [id(0x00000003), helpstring("Select item under mouse, activating relevant Editor page."), helpcontext(0x0000046c)]
        HRESULT SelectUnderMouse();
        [id(0x00000002), propget, helpstring("Sets the outer bevel of the Editor Panel."), helpcontext(0x0000046b)]
        HRESULT BevelOuter([out, retval] EPanelBevel* Value);
        [id(0x00000002), propput, helpstring("Sets the outer bevel of the Editor Panel."), helpcontext(0x0000046b)]
        HRESULT BevelOuter([in] EPanelBevel Value);
    };

    [
      uuid(2C37B0AD-0FF7-4E18-BF8A-B43469A2C414),
      version(1.0),
      helpstring("TeeChart ChartEditorPanel v5"),
      helpcontext(0x00000469),
      control
    ]
    coclass ChartEditorPanel {
        [default] interface IChartEditorPanel;
    };



    [
      odl,
      uuid(F66470FB-1309-47FF-A790-26E2E38BEBD0),
      version(1.0),
      helpstring("ContourLevels stores information about ContourSeries Y position levels."),
      helpcontext(0x000005d9),
      dual,
      oleautomation
    ]
    interface IContourLevels : IDispatch {
        [id(0x00000001), propget, helpstring("Accesses ContourLevel levels."), helpcontext(0x000004d4)]
        HRESULT Items(
                        [in] long Index, 
                        [out, retval] IContourLevel** Value);
    };

    [
      odl,
      uuid(0B304B42-253F-4221-8C87-8AD1FCA76C94),
      version(1.0),
      helpstring("Contains characteristic information for ContourLevel."),
      helpcontext(0x000004d5),
      dual,
      oleautomation
    ]
    interface IContourLevel : IDispatch {
        [id(0x00000001), propget, helpstring("Colour of TContourSeries Level"), helpcontext(0x000004d6)]
        HRESULT Color([out, retval] OLE_COLOR* Value);
        [id(0x00000001), propput, helpstring("Colour of TContourSeries Level"), helpcontext(0x000004d6)]
        HRESULT Color([in] OLE_COLOR Value);
        [id(0x00000002), propget, helpstring("Sets the range to which to apply the TContourLevel.Color within the TContourSeries data range."), helpcontext(0x000005da)]
        HRESULT UpToValue([out, retval] double* Value);
        [id(0x00000002), propput, helpstring("Sets the range to which to apply the TContourLevel.Color within the TContourSeries data range."), helpcontext(0x000005da)]
        HRESULT UpToValue([in] double Value);
    };

    [
      odl,
      uuid(41A5C203-7F36-4E11-840D-D41230760D8E),
      version(1.0),
      helpstring("Contains characteristic information for Donut Series "),
      helpcontext(0x0000064c),
      dual,
      oleautomation
    ]
    interface IDonutSeries : IPieSeries {
        [id(0x0000006f), propget, helpstring("Determines the dimension of the middle hole."), helpcontext(0x000005e2)]
        HRESULT DonutPercent([out, retval] long* Value);
        [id(0x0000006f), propput, helpstring("Determines the dimension of the middle hole."), helpcontext(0x000005e2)]
        HRESULT DonutPercent([in] long Value);
    };

    [
      odl,
      uuid(5B9827E5-3BE4-4DA3-9A6F-611BF900E4E1),
      version(1.0),
      helpstring("Tri surface uses triangulation to build the a surface between a set of X,Y,Z point."),
      helpcontext(0x000004d8),
      dual,
      oleautomation
    ]
    interface ITriSurfaceSeries : ICustom3DPaletteSeries {
        [id(0x00000003), propget, helpstring("Changes the color and style of the TriSurface border."), helpcontext(0x000005a3)]
        HRESULT Border([out, retval] IPen** Value);
        [id(0x00000006), propget, helpstring("Hide 'behind' triangles"), helpcontext(0x000006d6)]
        HRESULT HideTriangles([out, retval] VARIANT_BOOL* Value);
        [id(0x00000006), propput, helpstring("Hide 'behind' triangles"), helpcontext(0x000006d6)]
        HRESULT HideTriangles([in] VARIANT_BOOL Value);
        [id(0x00000007), propget, helpstring("Preserve rectangles for zoom/rotate"), helpcontext(0x000006d7)]
        HRESULT CacheTriangles([out, retval] VARIANT_BOOL* Value);
        [id(0x00000007), propput, helpstring("Preserve rectangles for zoom/rotate"), helpcontext(0x000006d7)]
        HRESULT CacheTriangles([in] VARIANT_BOOL Value);
    };

    [
      odl,
      uuid(9DF3ED1F-13B7-4A7E-803E-D4BB0C7E5900),
      version(1.0),
      helpstring("Graphical technique for identifying values that are truly unusual."),
      helpcontext(0x000004d9),
      dual,
      oleautomation
    ]
    interface ICustomBoxSeries : IPointSeries {
        [id(0x0000000d), propget, helpstring("Use ExtrOut property to control the appearance of extreme outlier points."), helpcontext(0x000004da)]
        HRESULT ExtrOut([out, retval] IPointer** Value);
        [id(0x0000000e), propget, helpstring("Change the color or style of the median line."), helpcontext(0x00000564)]
        HRESULT MedianPen([out, retval] IPen** Value);
        [id(0x0000000f), propget, helpstring("Use MildOut property to control the appearance of mild outlier points."), helpcontext(0x000004db)]
        HRESULT MildOut([out, retval] IPointer** Value);
        [id(0x00000010), propget, helpstring("Specifies the position of box series."), helpcontext(0x00000566)]
        HRESULT Position([out, retval] double* Value);
        [id(0x00000010), propput, helpstring("Specifies the position of box series."), helpcontext(0x00000566)]
        HRESULT Position([in] double Value);
        [id(0x00000011), propget, helpstring("Defines the length of the whiskers as a function of the inter-quartile range (IQR).)"), helpcontext(0x00000567)]
        HRESULT WhiskerLength([out, retval] double* Value);
        [id(0x00000011), propput, helpstring("Defines the length of the whiskers as a function of the inter-quartile range (IQR).)"), helpcontext(0x00000567)]
        HRESULT WhiskerLength([in] double Value);
        [id(0x00000012), propget, helpstring("Changes the color or style of whisker lines."), helpcontext(0x00000568)]
        HRESULT WhiskerPen([out, retval] IPen** Value);
        [id(0x00000013), propget, helpstring("Use Box property to control the appearance of TCustomBoxSeries box. "), helpcontext(0x000004dc)]
        HRESULT Box([out, retval] IPointer** Value);
    };

    [
      odl,
      uuid(CB0CE331-76CB-449C-9BE7-FB69C03C3439),
      version(1.0),
      helpstring("The HorizBoxPlotSeries plots a box series horizontally."),
      helpcontext(0x000004dd),
      dual,
      oleautomation
    ]
    interface IHorizBoxPlotSeries : ICustomBoxSeries {
        [id(0x00000009), helpstring("The MaxYValue function returns the highest of all the current Series Y point values."), helpcontext(0x000004de)]
        HRESULT MaxYValue([out, retval] double* Value);
        [id(0x0000000a), helpstring("Returns the Minimum Value of the Series Y Values Lists."), helpcontext(0x000004df)]
        HRESULT MinYValue([out, retval] double* Value);
    };

    [
      odl,
      uuid(70C80BD0-D36A-46C9-A9D6-AE8687CA0EA5),
      version(1.0),
      helpstring("HistogramSeries is a 2D Series that draws a 'barlike' plot with no gaps between points."),
      helpcontext(0x000004e0),
      dual,
      oleautomation
    ]
    interface IHistogramSeries : IDispatch {
        [id(0x00000015), propget, helpstring("The LinePen property determines what kind of pen will be used for drawing the line connecting all points."), helpcontext(0x000004e1)]
        HRESULT LinesPen([out, retval] IPen** Value);
        [id(0x00000001), propget, helpstring("Fill Transparency"), helpcontext(0x000006d9)]
        HRESULT Transparency([out, retval] long* Value);
        [id(0x00000001), propput, helpstring("Fill Transparency"), helpcontext(0x000006d9)]
        HRESULT Transparency([in] long Value);
        [id(0x00000003), propget, helpstring("Border LinePen"), helpcontext(0x000006da)]
        HRESULT LinePen([out, retval] IPen** Value);
        [id(0x00000002), propget, helpstring("Series fill Brush"), helpcontext(0x000006eb)]
        HRESULT Brush([out, retval] IBrush** Value);
    };

    [
      odl,
      uuid(BA3A0E2D-CCE7-4CF6-82D2-044B2A64EE59),
      version(1.0),
      helpstring("The ColorGridSeries component controls access to the properties and methods of the ColorGrid Series."),
      helpcontext(0x000004e2),
      dual,
      oleautomation
    ]
    interface IColorGridSeries : ICustom3DGridSeries {
        [id(0x000000e9), helpstring("Returns the Maximum Value of the Series X Values List."), helpcontext(0x000004e3)]
        HRESULT MaxXValue([out, retval] double* Value);
        [id(0x00000014), helpstring("Returns the Maximum Value of the Series Y Values List."), helpcontext(0x000004e4)]
        HRESULT MaxYValue([out, retval] double* Value);
        [id(0x00000015), helpstring("Returns the Minimum Value of the Series Y Values List."), helpcontext(0x000004e5)]
        HRESULT MinYValue([out, retval] double* Value);
    };

    [
      odl,
      uuid(DA944291-24C8-4956-BEE4-3129A675A49C),
      version(1.0),
      helpstring("The BarJoinSeries is only effective with Bar Series and draws a line between each bar point, at the top position"),
      helpcontext(0x000004e6),
      dual,
      oleautomation
    ]
    interface IBarJoinSeries : IBarSeries {
        [id(0x00000001), propget, helpstring("Use the properties of JoinPen to change the color or style of the line between each bar point."), helpcontext(0x000004e7)]
        HRESULT JoinPen([out, retval] IPen** Value);
    };

    [
      odl,
      uuid(4CC67466-2A11-45C6-924E-15E8B9F6B780),
      version(1.0),
      helpstring("WaterFall series is like a Surface series. It draws vertical slices, one for each Z row in the surface."),
      helpcontext(0x000004e8),
      dual,
      oleautomation
    ]
    interface IWaterfallSeries : ISurfaceSeries {
        [id(0x00000016), propget, helpstring("Enables/Disables display of WaterFall Series as Surface Series"), helpcontext(0x000004e9)]
        HRESULT Waterfall([out, retval] VARIANT_BOOL* Value);
        [id(0x00000016), propput, helpstring("Enables/Disables display of WaterFall Series as Surface Series"), helpcontext(0x000004e9)]
        HRESULT Waterfall([in] VARIANT_BOOL Value);
        [id(0x00000017), propget, helpstring("Use the properties of WaterLines to change the color or style of the valuelines. "), helpcontext(0x000004ea)]
        HRESULT WaterLines([out, retval] IPen** Value);
    };

    [
      odl,
      uuid(69A3C18D-728E-47B5-9144-7C58B59AA42D),
      version(1.0),
      helpstring("The Smith Series is a graphical representation of transmission-line parameters that is used for presenting design parameters in a visual setting."),
      helpcontext(0x000004eb),
      dual,
      oleautomation
    ]
    interface ISmithSeries : ICircledSeries {
        [id(0x00000015), propget, helpstring("xCircle (reactance circle) pen properties"), helpcontext(0x0000064d)]
        HRESULT CCirclePen([out, retval] IPen** Value);
        [id(0x00000016), propget, helpstring("rCircle pen (biggest circle) pen properties"), helpcontext(0x0000064e)]
        HRESULT CirclePen([out, retval] IPen** Value);
        [id(0x0000000d), propget, helpstring("Shows/hides xCircle labels."), helpcontext(0x0000064f)]
        HRESULT CLabels([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000d), propput, helpstring("Shows/hides xCircle labels."), helpcontext(0x0000064f)]
        HRESULT CLabels([in] VARIANT_BOOL Value);
        [id(0x0000000e), propget, helpstring("xCircle labels font."), helpcontext(0x00000650)]
        HRESULT CLabelsFont([out, retval] ITeeFont** Value);
        [id(0x0000000f), propget, helpstring("ValuesList (resistance values)"), helpcontext(0x00000651)]
        HRESULT ResistenceValues([out, retval] IValueList** Value);
        [id(0x00000010), propget, helpstring("ValuesList (reactance values)"), helpcontext(0x00000651)]
        HRESULT ReactanceValues([out, retval] IValueList** Value);
        [id(0x00000011), propget, helpstring("Formatting attributes of pointshapes"), helpcontext(0x00000652)]
        HRESULT Pointer([out, retval] IPointer** Value);
        [id(0x00000012), propget, helpstring("rCircle (resistance circle) pen properties"), helpcontext(0x00000653)]
        HRESULT RCirclePen([out, retval] IPen** Value);
        [id(0x00000013), propget, helpstring("Shows/hides rCircle labels"), helpcontext(0x00000654)]
        HRESULT RLabels([out, retval] VARIANT_BOOL* Value);
        [id(0x00000013), propput, helpstring("Shows/hides rCircle labels"), helpcontext(0x00000654)]
        HRESULT RLabels([in] VARIANT_BOOL Value);
        [id(0x00000014), propget, helpstring("rCircle labels font."), helpcontext(0x00000655)]
        HRESULT RLabelsFont([out, retval] ITeeFont** Value);
    };

    [
      odl,
      uuid(FDB6AE9B-AE83-4CC3-AC6D-03CF0E133867),
      version(1.0),
      helpstring("The Pyramid series draws points stacked in a vertical pyramid shape."),
      helpcontext(0x000004ec),
      dual,
      oleautomation
    ]
    interface IPyramidSeries : IDispatch {
        [id(0x00000001), propget, helpstring("Pyramid base size as percent of XAxis width"), helpcontext(0x00000656)]
        HRESULT SizePercent([out, retval] long* Value);
        [id(0x00000001), propput, helpstring("Pyramid base size as percent of XAxis width"), helpcontext(0x00000656)]
        HRESULT SizePercent([in] long Value);
    };

    [
      odl,
      uuid(33A0CF4E-AE1F-43DB-A3CF-B7F9905085C8),
      version(1.0),
      helpstring("You can use the Map Series for drawing a collection of polygon shapes."),
      helpcontext(0x000004ed),
      dual,
      oleautomation
    ]
    interface IMapSeries : ICustom3DPaletteSeries {
        [id(0x00000003), propget, helpstring("Accesses the different Map polygon shapes"), helpcontext(0x00000657)]
        HRESULT Shapes([out, retval] IMapPolygonList** Value);
    };

    [
      odl,
      uuid(DFBF9393-46FD-11D2-AEC3-00400141862D),
      version(1.0),
      helpstring("Contour Series specific characteristics"),
      helpcontext(0x000003b5),
      dual,
      oleautomation
    ]
    interface IContourSeries : ICustom3DGridSeries {
        [id(0x00000014), propget, helpstring("Number of Levels in ContourSeries"), helpcontext(0x00000375)]
        HRESULT NumLevels([out, retval] long* Value);
        [id(0x00000014), propput, helpstring("Number of Levels in ContourSeries"), helpcontext(0x00000375)]
        HRESULT NumLevels([in] long Value);
        [id(0x00000015), propget, helpstring("Enables Y positioning for Contour Series"), helpcontext(0x00000376)]
        HRESULT YPositionLevel([out, retval] VARIANT_BOOL* Value);
        [id(0x00000015), propput, helpstring("Enables Y positioning for Contour Series"), helpcontext(0x00000376)]
        HRESULT YPositionLevel([in] VARIANT_BOOL Value);
        [id(0x00000016), propget, helpstring("Sets ContourSeries Y position"), helpcontext(0x00000377)]
        HRESULT YPosition([out, retval] double* Value);
        [id(0x00000016), propput, helpstring("Sets ContourSeries Y position"), helpcontext(0x00000377)]
        HRESULT YPosition([in] double Value);
        [id(0x00000003), propget, helpstring("Access ContourLevel characteristics selecting Level by index."), helpcontext(0x000005d7)]
        HRESULT Levels([out, retval] IContourLevels** Value);
        [id(0x00000017), propget, helpstring("Sets ContourSeries Automatic Levels."), helpcontext(0x000005d8)]
        HRESULT AutomaticLevels([out, retval] VARIANT_BOOL* Value);
        [id(0x00000017), propput, helpstring("Sets ContourSeries Automatic Levels."), helpcontext(0x000005d8)]
        HRESULT AutomaticLevels([in] VARIANT_BOOL Value);
        [id(0x00000018), helpstring("Calculate Level values and colors."), helpcontext(0x000004ee)]
        HRESULT CreateAutoLevels();
    };

    [
      odl,
      uuid(2E375632-A81D-400A-9369-F609B6B914AC),
      version(1.0),
      helpstring("The BoxPlotSeries plots a box series verticaly."),
      helpcontext(0x000004ef),
      dual,
      oleautomation
    ]
    interface IBoxPlotSeries : ICustomBoxSeries {
        [id(0x00000009), helpstring("Returns the Maximum Value of the Series X Values List."), helpcontext(0x000004f0)]
        HRESULT MaxXValue([out, retval] double* Value);
        [id(0x0000000a), helpstring("Returns the Minimum Value of the Series X Values List."), helpcontext(0x000004f1)]
        HRESULT MinXValue([out, retval] double* Value);
    };

    [
      odl,
      uuid(CF5DFD57-E60D-11D4-93A2-006008A7EED4),
      version(1.0),
      helpstring("The TeePanelsList contains a list of all Panels on a multipage printout."),
      helpcontext(0x000004f2),
      dual,
      oleautomation
    ]
    interface ITeePanelsList : IDispatch {
        [id(0x00000002), helpstring("Removes the item at the position given by the Index parameter. "), helpcontext(0x000004f3)]
        HRESULT Delete([in] long Index);
        [id(0x00000003), helpstring("Deletes all items from the list. "), helpcontext(0x000004f4)]
        HRESULT Clear();
        [id(0x00000004), propget, helpstring("Indicates the number of entries in the list that are in use."), helpcontext(0x000004f5)]
        HRESULT Count([out, retval] long* Value);
    };


    [
      odl,
      uuid(449C6526-C2F8-47EE-8386-32D20B488B8B),
      version(1.0),
      helpstring("Add and associate Cursors to individual Series or to be general to the Chart. "),
      helpcontext(0x000004f9),
      dual,
      oleautomation
    ]
    interface ICursorTool : ICustomToolSeries {
        [id(0x00000002), propget, helpstring("Set FollowMouse to True to let TCursorTool stick to the mouse movements"), helpcontext(0x000004fa)]
        HRESULT FollowMouse([out, retval] VARIANT_BOOL* Value);
        [id(0x00000002), propput, helpstring("Set FollowMouse to True to let TCursorTool stick to the mouse movements"), helpcontext(0x000004fa)]
        HRESULT FollowMouse([in] VARIANT_BOOL Value);
        [id(0x00000003), propget, helpstring("Element Pen characteristics."), helpcontext(0x000004fb)]
        HRESULT Pen([out, retval] IPen** Value);
        [id(0x00000005), propget, helpstring("Set Snap property to True to align the TCursorTool with the nearest series point."), helpcontext(0x000004fc)]
        HRESULT Snap([out, retval] VARIANT_BOOL* Value);
        [id(0x00000005), propput, helpstring("Set Snap property to True to align the TCursorTool with the nearest series point."), helpcontext(0x000004fc)]
        HRESULT Snap([in] VARIANT_BOOL Value);
        [id(0x00000006), propget, helpstring("Default cssBoth: defines which lines of the CursorTool are shown on top of the charts. "), helpcontext(0x000004fd)]
        HRESULT Style([out, retval] ECursorToolStyle* Value);
        [id(0x00000006), propput, helpstring("Default cssBoth: defines which lines of the CursorTool are shown on top of the charts. "), helpcontext(0x000004fd)]
        HRESULT Style([in] ECursorToolStyle Value);
        [id(0x00000001), propget, helpstring("Reads/Writes the Cursor Tool XValue"), helpcontext(0x00000658)]
        HRESULT XVal([out, retval] double* Value);
        [id(0x00000001), propput, helpstring("Reads/Writes the Cursor Tool XValue"), helpcontext(0x00000658)]
        HRESULT XVal([in] double Value);
        [id(0x00000004), propget, helpstring("Reads/Writes the Cursor Tool YValue"), helpcontext(0x00000659)]
        HRESULT YVal([out, retval] double* Value);
        [id(0x00000004), propput, helpstring("Reads/Writes the Cursor Tool YValue"), helpcontext(0x00000659)]
        HRESULT YVal([in] double Value);
    };

    [
      odl,
      uuid(62DD8657-F041-11D4-93B1-006008A7EED4),
      version(1.0),
      helpstring("The DrawLineList contains a list of all Lines drawn by the  DrawLine Tool."),
      helpcontext(0x000004fe),
      dual,
      oleautomation
    ]
    interface IDrawLineList : IDispatch {
        [id(0x00000002), propget, helpstring("Accesses the individual lines."), helpcontext(0x000004ff)]
        HRESULT Items(
                        [in] long Index, 
                        [out, retval] IDrawLine** Value);
        [id(00000000), propget, helpcontext(0x00000500)]
        HRESULT ControlDefault(
                        [in] long Index, 
                        [out, retval] VARIANT* Value);
        [id(0x00000005), helpstring("Removes the item at the position given by the Index parameter. "), helpcontext(0x00000501)]
        HRESULT Clear();
        [id(0x00000006), helpstring("Removes the item at the position given by the Index parameter. "), helpcontext(0x00000502)]
        HRESULT Delete([in] long Index);
        [id(0x00000007), propget, helpstring("Indicates the number of entries in the list that are in use."), helpcontext(0x00000503)]
        HRESULT Count([out, retval] long* Value);
    };

    [
      odl,
      uuid(62DD8659-F041-11D4-93B1-006008A7EED4),
      version(1.0),
      helpstring("DrawLine is the Line component used by the DrawLineTool to draw custom lines on the Chart."),
      helpcontext(0x00000504),
      dual,
      oleautomation
    ]
    interface IDrawLine : IDispatch {
        [id(0x00000001), propget, helpstring("X, Y position of the End point of line."), helpcontext(0x000005e4)]
        HRESULT EndPos([out, retval] ITeePoint2D** Value);
        [id(0x00000002), propget, helpstring("X, Y position of the Start point of line."), helpcontext(0x000005e5)]
        HRESULT StartPos([out, retval] ITeePoint2D** Value);
        [id(0x00000003), propget, helpstring("Element Pen characteristics."), helpcontext(0x000005e6)]
        HRESULT Pen([out, retval] IPen** Value);
        [id(0x00000004), helpstring("Mark the ends of each line drawn with Handles for drag relocation. "), helpcontext(0x000005e7)]
        HRESULT DrawHandles();
        [id(0x00000005), helpstring("Returns Rect of the TDrawLine end handle."), helpcontext(0x000005e8)]
        HRESULT EndHandle([out, retval] TeeRect* Value);
        [id(0x00000006), helpstring("Returns Rect of the TDrawLine start handle."), helpcontext(0x000005e9)]
        HRESULT StartHandle([out, retval] TeeRect* Value);
    };

    [
      odl,
      uuid(C746269F-0A39-4EC5-B52F-7E489835035B),
      version(1.0),
      helpstring("The Axis Arrow tool is used to display small arrows at begin and / or end positions of axes."),
      helpcontext(0x000005ea),
      dual,
      oleautomation
    ]
    interface IAxisArrowTool : ICustomToolAxis {
        [id(0x00000002), propget, helpstring("Set the Position property to specify where on the Axis the arrows are drawn."), helpcontext(0x000005eb)]
        HRESULT Position([out, retval] EAxisArrowToolPosition* Value);
        [id(0x00000002), propput, helpstring("Set the Position property to specify where on the Axis the arrows are drawn."), helpcontext(0x000005eb)]
        HRESULT Position([in] EAxisArrowToolPosition Value);
        [id(0x00000004), propget, helpstring("Element Brush characteristics."), helpcontext(0x000005ec)]
        HRESULT Brush([out, retval] IBrush** Value);
        [id(0x00000005), propget, helpstring("Default value is 16"), helpcontext(0x000005ed)]
        HRESULT Length([out, retval] long* Value);
        [id(0x00000005), propput, helpstring("Default value is 16"), helpcontext(0x000005ed)]
        HRESULT Length([in] long Value);
        [id(0x00000006), propget, helpstring("Element Pen characteristics."), helpcontext(0x000005ee)]
        HRESULT Pen([out, retval] IPen** Value);
        [id(0x00000007), propget, helpstring("Default value is 10"), helpcontext(0x000005ef)]
        HRESULT ScrollPercent([out, retval] long* Value);
        [id(0x00000007), propput, helpstring("Default value is 10"), helpcontext(0x000005ef)]
        HRESULT ScrollPercent([in] long Value);
        [id(0x00000001), propget, helpstring("Inverts Chart scroll"), helpcontext(0x000006e2)]
        HRESULT ScrollInverted([out, retval] VARIANT_BOOL* Value);
        [id(0x00000001), propput, helpstring("Inverts Chart scroll"), helpcontext(0x000006e2)]
        HRESULT ScrollInverted([in] VARIANT_BOOL Value);
    };

    [
      odl,
      uuid(235FB742-F8ED-11D4-93C8-006008A7EED4),
      version(1.0),
      helpstring("Ancestor class for several TeeChart export formats."),
      helpcontext(0x000005c4),
      dual,
      oleautomation
    ]
    interface IExportFormat : IDispatch {
        [id(0x0000000b), propget, helpstring("Sets Width of Chart"), helpcontext(0x000005f0)]
        HRESULT Width([out, retval] long* Value);
        [id(0x0000000b), propput, helpstring("Sets Width of Chart"), helpcontext(0x000005f0)]
        HRESULT Width([in] long Value);
        [id(0x0000000c), propget, helpstring("Sets Height of Chart"), helpcontext(0x000005f1)]
        HRESULT Height([out, retval] long* Value);
        [id(0x0000000c), propput, helpstring("Sets Height of Chart"), helpcontext(0x000005f1)]
        HRESULT Height([in] long Value);
        [id(0x0000000d), helpstring("Save Chart to File - Enter file path/name as string."), helpcontext(0x000005f2)]
        HRESULT SaveToFile([in] BSTR FileName);
        [id(0x0000000e), helpstring("Save Chart to Stream in defined format."), helpcontext(0x000005f3)]
        HRESULT SaveToStream([out, retval] VARIANT* Value);
    };

    [
      odl,
      uuid(A77491E3-F825-11D4-93C7-006008A7EED4),
      version(1.0),
      helpstring("Format used to define JPEG export characteristics."),
      helpcontext(0x000005f4),
      dual,
      oleautomation
    ]
    interface IJPEGExport : IExportFormat {
        [id(0x00000001), propget, helpstring("When True JPEG outputted in Grayscale"), helpcontext(0x000005f5)]
        HRESULT GrayScale([out, retval] VARIANT_BOOL* Value);
        [id(0x00000001), propput, helpstring("When True JPEG outputted in Grayscale"), helpcontext(0x000005f5)]
        HRESULT GrayScale([in] VARIANT_BOOL Value);
        [id(0x00000004), propget, helpstring("Quality is a percentage 0 - 100% of which 100% is best quality."), helpcontext(0x000005f6)]
        HRESULT CompressionQuality([out, retval] long* Value);
        [id(0x00000004), propput, helpstring("Quality is a percentage 0 - 100% of which 100% is best quality."), helpcontext(0x000005f6)]
        HRESULT CompressionQuality([in] long Value);
    };

    [
      odl,
      uuid(235FB744-F8ED-11D4-93C8-006008A7EED4),
      version(1.0),
      helpstring("The PNGExport class inlcudes characteristics of the PNG image export format for a Chart."),
      helpcontext(0x000005f7),
      dual,
      oleautomation
    ]
    interface IPNGExport : IExportFormat {
        [id(0x00000001), propget, helpstring("Sets the level of PNG compression."), helpcontext(0x000005f8)]
        HRESULT CompressionLevel([out, retval] long* Value);
        [id(0x00000001), propput, helpstring("Sets the level of PNG compression."), helpcontext(0x000005f8)]
        HRESULT CompressionLevel([in] long Value);
    };

    [
      odl,
      uuid(235FB746-F8ED-11D4-93C8-006008A7EED4),
      version(1.0),
      helpstring("Use GIFExport to create and export the TeeChart in GIF format. "),
      helpcontext(0x000005f9),
      dual,
      oleautomation
    ]
    interface IGIFExport : IExportFormat {
        [id(0x00000001), propget, helpstring("Sets the type of GIF compression"), helpcontext(0x000005fa)]
        HRESULT Compression([out, retval] EGIFCompression* Value);
        [id(0x00000001), propput, helpstring("Sets the type of GIF compression"), helpcontext(0x000005fa)]
        HRESULT Compression([in] EGIFCompression Value);
        [id(0x00000002), propget, helpstring("Sets the type of GIF dithermode"), helpcontext(0x000005fb)]
        HRESULT DitherMode([out, retval] EGIFDitherMode* Value);
        [id(0x00000002), propput, helpstring("Sets the type of GIF dithermode"), helpcontext(0x000005fb)]
        HRESULT DitherMode([in] EGIFDitherMode Value);
        [id(0x00000003), propget, helpstring("Sets the type of GIF colorreduction"), helpcontext(0x000005fc)]
        HRESULT ColorReduction([out, retval] EGIFColorReduction* Value);
        [id(0x00000003), propput, helpstring("Sets the type of GIF colorreduction"), helpcontext(0x000005fc)]
        HRESULT ColorReduction([in] EGIFColorReduction Value);
    };


    [
      odl,
      uuid(235FB74B-F8ED-11D4-93C8-006008A7EED4),
      version(1.0),
      helpstring("Use PCXExport to create and export the TeeChart in PCX format. "),
      helpcontext(0x00000600),
      dual,
      oleautomation
    ]
    interface IPCXExport : IExportFormat {
    };

    [
      odl,
      uuid(235FB74D-F8ED-11D4-93C8-006008A7EED4),
      version(1.0),
      helpstring("Use MetafileExport to create and export the TeeChart in Metafile format. "),
      helpcontext(0x00000601),
      dual,
      oleautomation
    ]
    interface IMetafileExport : IExportFormat {
        [id(0x00000001), propget, helpstring("When true exports TChart in Enhanced Metafile format"), helpcontext(0x00000602)]
        HRESULT Enhanced([out, retval] VARIANT_BOOL* Value);
        [id(0x00000001), propput, helpstring("When true exports TChart in Enhanced Metafile format"), helpcontext(0x00000602)]
        HRESULT Enhanced([in] VARIANT_BOOL Value);
    };

    [
      odl,
      uuid(235FB74F-F8ED-11D4-93C8-006008A7EED4),
      version(1.0),
      helpstring("Use BMPExport to create and export the TeeChart in BMP format."),
      helpcontext(0x00000603),
      dual,
      oleautomation
    ]
    interface IBMPExport : IExportFormat {
        [id(0x00000001), propget, helpstring("Sets the pixel format of the BMP image"), helpcontext(0x00000604)]
        HRESULT Colors([out, retval] EPixelFormat* Value);
        [id(0x00000001), propput, helpstring("Sets the pixel format of the BMP image"), helpcontext(0x00000604)]
        HRESULT Colors([in] EPixelFormat Value);
        [id(0x00000002), propget, helpstring("When True exports BMP as monochrome"), helpcontext(0x00000605)]
        HRESULT Monochrome([out, retval] VARIANT_BOOL* Value);
        [id(0x00000002), propput, helpstring("When True exports BMP as monochrome"), helpcontext(0x00000605)]
        HRESULT Monochrome([in] VARIANT_BOOL Value);
    };



    [
      odl,
      uuid(235FB753-F8ED-11D4-93C8-006008A7EED4),
      version(1.0),
      helpstring("The Marks Tip tool is used to display default Hint when the mouse is over (or clicks) a Series point."),
      helpcontext(0x00000607),
      dual,
      oleautomation
    ]
    interface IMarksTipTool : ICustomToolSeries {
        [id(0x00000001), propget, helpstring("Action Mouse Mark Tip on: Mouse Move or Click"), helpcontext(0x00000608)]
        HRESULT MouseAction([out, retval] EMarkToolMouseAction* Value);
        [id(0x00000001), propput, helpstring("Action Mouse Mark Tip on: Mouse Move or Click"), helpcontext(0x00000608)]
        HRESULT MouseAction([in] EMarkToolMouseAction Value);
        [id(0x00000002), propget, helpstring("Use Series Marks Styles to define the text format of the Mark Tip."), helpcontext(0x00000609)]
        HRESULT Style([out, retval] EMarkStyle* Value);
        [id(0x00000002), propput, helpstring("Use Series Marks Styles to define the text format of the Mark Tip."), helpcontext(0x00000609)]
        HRESULT Style([in] EMarkStyle Value);
        [id(0x00000003), propget, helpstring("Sets the time lag before the Tool Tip appears"), helpcontext(0x0000060a)]
        HRESULT Delay([out, retval] long* Value);
        [id(0x00000003), propput, helpstring("Sets the time lag before the Tool Tip appears"), helpcontext(0x0000060a)]
        HRESULT Delay([in] long Value);
    };

    [
      odl,
      uuid(235FB755-F8ED-11D4-93C8-006008A7EED4),
      version(1.0),
      helpstring("The Image tool draws a picture (bitmap, jpeg, etc) behind chart Series."),
      helpcontext(0x0000060b),
      dual,
      oleautomation
    ]
    interface IChartImageTool : ICustomToolSeries {
        [id(0x00000001), helpstring("Loads image."), helpcontext(0x0000060c)]
        HRESULT ImageLoad([in] BSTR FileName);
        [id(0x00000002), helpstring("Clears image."), helpcontext(0x0000060d)]
        HRESULT ImageClear();
    };



    [
      odl,
      uuid(6321AAC0-D3F4-4DBD-8F84-27D98EC46046),
      version(1.0),
      helpstring("The Momentum Division function calculates the ratio of a point value compared to the previous N point value. "),
      helpcontext(0x0000060f),
      dual,
      oleautomation
    ]
    interface IMomentumDivFunction : IDispatch {
    };

    [
      odl,
      uuid(A3AA3639-E612-4D0A-ADE7-57ABDEB6EAD6),
      version(1.0),
      helpstring("The Exponential Trend function is similar to Trend, except that the calculation fits values using their exponential (e) weights."),
      helpcontext(0x00000610),
      dual,
      oleautomation
    ]
    interface IExpTrendFunction : IDispatch {
    };

    [
      odl,
      uuid(D1A32481-6206-4CBF-8261-55141706E6AC),
      version(1.0),
      helpstring("The Exponential Moving Average function calculates values using  FP = 2 / ( Period + 1 ) Value = Source* FP +  (Value - 1) * ( 1-FP )"),
      helpcontext(0x00000611),
      dual,
      oleautomation
    ]
    interface IExpMovAvgFunction : IDispatch {
    };

    [
      odl,
      uuid(662C9054-0898-4F09-881E-5ABB47978FB6),
      version(1.0),
      helpstring("The RMSFunction calculates the Root Mean Square value (RMS) for range of points."),
      helpcontext(0x00000612),
      dual,
      oleautomation
    ]
    interface IRMSFunction : IDispatch {
        [id(0x00000001), propget, helpstring("The Complete boolean property defines the RMS formula. "), helpcontext(0x00000613)]
        HRESULT Complete([out, retval] VARIANT_BOOL* Value);
        [id(0x00000001), propput, helpstring("The Complete boolean property defines the RMS formula. "), helpcontext(0x00000613)]
        HRESULT Complete([in] VARIANT_BOOL Value);
    };

    [
      odl,
      uuid(B86AE373-50DC-4AE9-8872-8E3F9FC21A4E),
      version(1.0),
      helpstring("The MACD function (Moving Average Convergence Divergence), used in financial charts."),
      helpcontext(0x00000614),
      dual,
      oleautomation
    ]
    interface IMACDFunction : IDispatch {
        [id(0x00000001), propget, helpstring("The Period property controls how many points or X range(sse note below) will trigger a new point calculation."), helpcontext(0x00000615)]
        HRESULT Period2([out, retval] double* Value);
        [id(0x00000001), propput, helpstring("The Period property controls how many points or X range(sse note below) will trigger a new point calculation."), helpcontext(0x00000615)]
        HRESULT Period2([in] double Value);
        [id(0x00000002), propget, helpstring("Exponential associated with MACD (FastLine)"), helpcontext(0x000006cf)]
        HRESULT MACDExp([out, retval] ISeries** Value);
        [id(0x00000003), propget, helpstring("Histogram associated with MACD (Volume)"), helpcontext(0x000006d0)]
        HRESULT Histogram([out, retval] ISeries** Value);
        [id(0x00000004), propget, helpstring("EMA of MACD as the signal/trigger line"), helpcontext(0x000006fc)]
        HRESULT Period3([out, retval] long* Value);
        [id(0x00000004), propput, helpstring("EMA of MACD as the signal/trigger line"), helpcontext(0x000006fc)]
        HRESULT Period3([in] long Value);
    };

    [
      odl,
      uuid(AA13E17B-57FC-4364-9BBE-EE2095821F16),
      version(1.0),
      helpstring("The Stochastic function is used in financial charts. "),
      helpcontext(0x00000616),
      dual,
      oleautomation
    ]
    interface IStochasticFunction : IDispatch {
    };

    [
      odl,
      uuid(2DCBF4FF-BEDF-4140-B726-70996BB2B6E6),
      version(1.0),
      helpstring("The BollingerFunction intruduces the Bollinger Bands Trading Bands function. "),
      helpcontext(0x00000617),
      dual,
      oleautomation
    ]
    interface IBollingerFunction : IDispatch {
        [id(0x00000001), propget, helpstring("Default 2: Deviation defines the standard deviation (StdDev) multiplier, used to calculate low and high Bollinger band value."), helpcontext(0x00000618)]
        HRESULT Deviation([out, retval] double* Value);
        [id(0x00000001), propput, helpstring("Default 2: Deviation defines the standard deviation (StdDev) multiplier, used to calculate low and high Bollinger band value."), helpcontext(0x00000618)]
        HRESULT Deviation([in] double Value);
        [id(0x00000002), propget, helpstring("When Exponential is true, then exponential moving average function will be used to calculate mean value."), helpcontext(0x00000619)]
        HRESULT Exponential([out, retval] VARIANT_BOOL* Value);
        [id(0x00000002), propput, helpstring("When Exponential is true, then exponential moving average function will be used to calculate mean value."), helpcontext(0x00000619)]
        HRESULT Exponential([in] VARIANT_BOOL Value);
        [id(0x00000003), propget, helpstring("LowBand Series stores the low band (Mean - Deviation*StdDev) values."), helpcontext(0x0000061a)]
        HRESULT LowBand([out, retval] ISeries** Value);
    };

    [
      odl,
      uuid(3752717C-15C0-4C15-9532-C9C371388028),
      version(1.0),
      helpstring("The ADXFunction is normally used in financial trending applications to determine whether a market is trending, or moving sideways."),
      helpcontext(0x0000061b),
      dual,
      oleautomation
    ]
    interface IADXFunction : IDispatch {
        [id(0x00000001), propget, helpstring("Access characteristics of the DMDown line (a FastLineSeries)."), helpcontext(0x0000061c)]
        HRESULT DMDown([out, retval] ISeries** Value);
        [id(0x00000002), propget, helpstring("Access characteristics of the DMUp line (a FastLineSeries)."), helpcontext(0x0000061d)]
        HRESULT DMUp([out, retval] ISeries** Value);
    };

    [
      odl,
      uuid(AC690ACD-0730-11D5-93E3-006008A7EED4),
      version(1.0),
      helpstring("Exports Chart in Native (*.tee) file format"),
      helpcontext(0x0000065a),
      dual,
      oleautomation
    ]
    interface INativeExport : IDispatch {
        [id(0x00000001), helpstring("Saves *.tee file to file"), helpcontext(0x0000065b)]
        HRESULT SaveToFile(
                        [in] BSTR FileName, 
                        [in] VARIANT_BOOL IncludeData);
        [id(0x00000002), helpstring("Saves *.tee file to stream"), helpcontext(0x0000065c)]
        HRESULT SaveToStream(
                        [in] VARIANT_BOOL IncludeData, 
                        [out, retval] VARIANT* Value);
    };

    [
      odl,
      uuid(AC690ACF-0730-11D5-93E3-006008A7EED4),
      version(1.0),
      helpstring("Exports Chart series Data."),
      helpcontext(0x0000065d),
      dual,
      oleautomation
    ]
    interface IDataExport : IDispatch {
        [id(0x00000001), propget, helpstring("Enables/disables inclusion of Chart Header"), helpcontext(0x0000065e)]
        HRESULT IncludeHeader([out, retval] VARIANT_BOOL* Value);
        [id(0x00000001), propput, helpstring("Enables/disables inclusion of Chart Header"), helpcontext(0x0000065e)]
        HRESULT IncludeHeader([in] VARIANT_BOOL Value);
        [id(0x00000002), propget, helpstring("Enables/disables inclusion of Axes Labels"), helpcontext(0x0000065f)]
        HRESULT IncludeLabels([out, retval] VARIANT_BOOL* Value);
        [id(0x00000002), propput, helpstring("Enables/disables inclusion of Axes Labels"), helpcontext(0x0000065f)]
        HRESULT IncludeLabels([in] VARIANT_BOOL Value);
        [id(0x00000003), propget, helpstring("Enables/disables inclusion of Series Index"), helpcontext(0x00000660)]
        HRESULT IncludeIndex([out, retval] VARIANT_BOOL* Value);
        [id(0x00000003), propput, helpstring("Enables/disables inclusion of Series Index"), helpcontext(0x00000660)]
        HRESULT IncludeIndex([in] VARIANT_BOOL Value);
        [id(0x00000004), propget, helpstring("Sets Series from which Data is exported"), helpcontext(0x00000661)]
        HRESULT Series([out, retval] VARIANT* Value);
        [id(0x00000004), propput, helpstring("Sets Series from which Data is exported"), helpcontext(0x00000661)]
        HRESULT Series([in] VARIANT Value);
        [id(0x00000005), helpstring("Saves series Data to file"), helpcontext(0x00000662)]
        HRESULT SaveToFile([in] BSTR FileName);
        [id(0x00000006), helpstring("Saves series Data to Stream"), helpcontext(0x00000663)]
        HRESULT SaveToStream([out, retval] VARIANT* Value);
        [id(0x00000007), helpstring("Saves series Data as a String"), helpcontext(0x00000664)]
        HRESULT AsString([out, retval] BSTR* Value);
    };

    [
      odl,
      uuid(AC690AD1-0730-11D5-93E3-006008A7EED4),
      version(1.0),
      helpstring("Series Data export in XML format"),
      helpcontext(0x00000665),
      dual,
      oleautomation
    ]
    interface IXMLExport : IDataExport {
    };

    [
      odl,
      uuid(AC690AD3-0730-11D5-93E3-006008A7EED4),
      version(1.0),
      helpstring("Series Data export in XLS format"),
      helpcontext(0x00000666),
      dual,
      oleautomation
    ]
    interface IXLSExport : IDataExport {
    };

    [
      odl,
      uuid(AC690AD5-0730-11D5-93E3-006008A7EED4),
      version(1.0),
      helpstring("Series Data export in HTML format"),
      helpcontext(0x00000667),
      dual,
      oleautomation
    ]
    interface IHTMLExport : IDataExport {
    };

    [
      odl,
      uuid(AC690AD7-0730-11D5-93E3-006008A7EED4),
      version(1.0),
      helpstring("Series Data export in Text format"),
      helpcontext(0x00000668),
      dual,
      oleautomation
    ]
    interface ITextExport : IDataExport {
        [id(0x00000008), propget, helpstring("Defines delimiter (character) that separates values"), helpcontext(0x00000669)]
        HRESULT TextDelimiter([out, retval] BSTR* Value);
        [id(0x00000008), propput, helpstring("Defines delimiter (character) that separates values"), helpcontext(0x00000669)]
        HRESULT TextDelimiter([in] BSTR Value);
    };

    [
      odl,
      uuid(AC690AD9-0730-11D5-93E3-006008A7EED4),
      version(1.0),
      helpstring("List of all the Map polygon shapes"),
      helpcontext(0x0000066a),
      dual,
      oleautomation
    ]
    interface IMapPolygonList : IDispatch {
        [id(0x00000001), helpstring("Adds a poygon shape to the Map series"), helpcontext(0x0000066b)]
        HRESULT Add([out, retval] long* Index);
        [id(0x00000002), propget, helpstring("Accesses Map polygon shape characteristics"), helpcontext(0x0000066c)]
        HRESULT Polygon(
                        [in] long Index, 
                        [out, retval] IMapPolygon** Value1);
    };

    [
      odl,
      uuid(AC690ADB-0730-11D5-93E3-006008A7EED4),
      version(1.0),
      helpstring("Map polygon shape characteristics"),
      helpcontext(0x0000066d),
      dual,
      oleautomation
    ]
    interface IMapPolygon : IDispatch {
        [id(0x00000001), propget, helpstring("Access to Map polygon shape Brush properties"), helpcontext(0x0000066e)]
        HRESULT Brush([out, retval] IBrush** Value);
        [id(0x00000002), propget, helpstring("Map polygon shape colour"), helpcontext(0x0000066f)]
        HRESULT Color([out, retval] OLE_COLOR* Value);
        [id(0x00000002), propput, helpstring("Map polygon shape colour"), helpcontext(0x0000066f)]
        HRESULT Color([in] OLE_COLOR Value);
        [id(0x00000003), propget, helpstring("Map polygon shape gradient"), helpcontext(0x00000670)]
        HRESULT Gradient([out, retval] IGradient** Value);
        [id(0x00000005), propget, helpstring("When true polygon uses the same Brush as its parentseries (Map)"), helpcontext(0x00000671)]
        HRESULT ParentBrush([out, retval] VARIANT_BOOL* Value);
        [id(0x00000005), propput, helpstring("When true polygon uses the same Brush as its parentseries (Map)"), helpcontext(0x00000671)]
        HRESULT ParentBrush([in] VARIANT_BOOL Value);
        [id(0x00000006), propget, helpstring("When true polygon uses the same Pen as its parentseries (Map)"), helpcontext(0x00000672)]
        HRESULT ParentPen([out, retval] VARIANT_BOOL* Value);
        [id(0x00000006), propput, helpstring("When true polygon uses the same Pen as its parentseries (Map)"), helpcontext(0x00000672)]
        HRESULT ParentPen([in] VARIANT_BOOL Value);
        [id(0x00000007), propget, helpstring("Access to Map polygon shape Pen properties"), helpcontext(0x00000673)]
        HRESULT Pen([out, retval] IPen** Value);
        [id(0x00000008), propget, helpstring("Text string that labels the polygon"), helpcontext(0x00000674)]
        HRESULT Text([out, retval] BSTR* Value);
        [id(0x00000008), propput, helpstring("Text string that labels the polygon"), helpcontext(0x00000674)]
        HRESULT Text([in] BSTR Value);
        [id(0x00000009), propget, helpstring("3D MapSeries Z-axis position"), helpcontext(0x00000675)]
        HRESULT Z([out, retval] double* Value);
        [id(0x00000009), propput, helpstring("3D MapSeries Z-axis position"), helpcontext(0x00000675)]
        HRESULT Z([in] double Value);
        [id(0x00000004), helpstring("Adds a boundary co-ordinate to the polygon"), helpcontext(0x00000676)]
        HRESULT AddXY(
                        [in] double X, 
                        [in] double Y, 
                        [out, retval] long* Value);
    };

    [
      odl,
      uuid(01E6D0D8-07EE-11D5-93E4-006008A7EED4),
      version(1.0),
      helpstring("Graphical representation of Funnel (Pipeline) chart"),
      helpcontext(0x00000677),
      dual,
      oleautomation
    ]
    interface IFunnelSeries : IDispatch {
        [id(0x00000001), helpstring("Adds new Funnel segment to the Series"), helpcontext(0x00000678)]
        HRESULT AddSegment(
                        [in] double AQuote, 
                        [in] double AOpportunity, 
                        [in] BSTR ALabel, 
                        [in] OLE_COLOR AColor, 
                        [out, retval] long* Index);
        [id(0x00000002), helpstring("Reconstructs the Funnel chart"), helpcontext(0x00000679)]
        HRESULT Recalc();
        [id(0x00000003), propget, helpstring("FunnelSeries Brush properties"), helpcontext(0x0000067a)]
        HRESULT Brush([out, retval] IBrush** Value);
        [id(0x00000004), propget, helpstring("FunnelSeries Brush properties"), helpcontext(0x0000067b)]
        HRESULT Pen([out, retval] IPen** Value);
        [id(0x00000005), propget, helpstring("FunnelSeries bounding polygon pen properties"), helpcontext(0x0000067c)]
        HRESULT LinesPen([out, retval] IPen** Value);
        [id(0x00000006), propget, helpstring("When True FunnelSeries reconstructed with every added point"), helpcontext(0x0000067d)]
        HRESULT AutoUpdate([out, retval] VARIANT_BOOL* Value);
        [id(0x00000006), propput, helpstring("When True FunnelSeries reconstructed with every added point"), helpcontext(0x0000067d)]
        HRESULT AutoUpdate([in] VARIANT_BOOL Value);
        [id(0x00000007), propget, helpstring("When False will enable the internal sorting algorithm"), helpcontext(0x0000067e)]
        HRESULT QuotesSorted([out, retval] VARIANT_BOOL* Value);
        [id(0x00000007), propput, helpstring("When False will enable the internal sorting algorithm"), helpcontext(0x0000067e)]
        HRESULT QuotesSorted([in] VARIANT_BOOL Value);
        [id(0x00000008), propget, helpstring("The difference used by the internal algorithm to define the Funnel segment color"), helpcontext(0x0000067f)]
        HRESULT DifferenceLimit([out, retval] double* Value);
        [id(0x00000008), propput, helpstring("The difference used by the internal algorithm to define the Funnel segment color"), helpcontext(0x0000067f)]
        HRESULT DifferenceLimit([in] double Value);
        [id(0x00000009), propget, helpstring("Default vbGreen: Funnel segment colour"), helpcontext(0x00000680)]
        HRESULT AboveColor([out, retval] OLE_COLOR* Value);
        [id(0x00000009), propput, helpstring("Default vbGreen: Funnel segment colour"), helpcontext(0x00000680)]
        HRESULT AboveColor([in] OLE_COLOR Value);
        [id(0x0000000a), propget, helpstring("Default vbYellow: Funnel segment colour "), helpcontext(0x00000681)]
        HRESULT WithinColor([out, retval] OLE_COLOR* Value);
        [id(0x0000000a), propput, helpstring("Default vbYellow: Funnel segment colour "), helpcontext(0x00000681)]
        HRESULT WithinColor([in] OLE_COLOR Value);
        [id(0x0000000b), propget, helpstring("Default vbRed: Funnel segment colour "), helpcontext(0x00000682)]
        HRESULT BelowColor([out, retval] OLE_COLOR* Value);
        [id(0x0000000b), propput, helpstring("Default vbRed: Funnel segment colour "), helpcontext(0x00000682)]
        HRESULT BelowColor([in] OLE_COLOR Value);
        [id(0x0000000c), propget, helpstring("Accesses the opportunity values"), helpcontext(0x00000683)]
        HRESULT OpportunityValues([out, retval] IValueList** Value);
        [id(0x0000000d), propget, helpstring("Accesses the quote values"), helpcontext(0x00000683)]
        HRESULT QuoteValues([out, retval] IValueList** Value);
    };

    [
      odl,
      uuid(01E6D0DA-07EE-11D5-93E4-006008A7EED4),
      version(1.0),
      helpstring("Displays of grid-like calendar within Chart boundaries"),
      helpcontext(0x00000684),
      dual,
      oleautomation
    ]
    interface ICalendarSeries : IDispatch {
        [id(0x00000001), propget, helpstring("Sets date cell of Calendar grid"), helpcontext(0x00000685)]
        HRESULT Date([out, retval] double* Value);
        [id(0x00000001), propput, helpstring("Sets date cell of Calendar grid"), helpcontext(0x00000685)]
        HRESULT Date([in] double Value);
        [id(0x00000002), propget, helpstring("Sets characteristics (Colour, Brush, etc) of day cells"), helpcontext(0x00000686)]
        HRESULT Days([out, retval] ICalendarCell** Value);
        [id(0x00000003), propget, helpstring("Sets characteristics of Month text header in upper cells"), helpcontext(0x00000687)]
        HRESULT Months([out, retval] ICalendarCellUpper** Value);
        [id(0x00000004), propget, helpstring("Sets characteristics of leading and trailing cells"), helpcontext(0x00000688)]
        HRESULT Trailing([out, retval] ICalendarCell** Value);
        [id(0x00000005), propget, helpstring("Sets characteristics of Sunday cells"), helpcontext(0x00000689)]
        HRESULT Sunday([out, retval] ICalendarCell** Value);
        [id(0x00000006), propget, helpstring("Sets cell characteristics on today's cell only"), helpcontext(0x0000068a)]
        HRESULT Today([out, retval] ICalendarCell** Value);
        [id(0x00000007), propget, helpstring("Sets characteristics of header cells that contain weekday names"), helpcontext(0x0000068b)]
        HRESULT Weekdays([out, retval] ICalendarCellUpper** Value);
        [id(0x00000009), helpstring("Advances calendar display by one calendar month"), helpcontext(0x0000068c)]
        HRESULT NextMonth();
        [id(0x0000000a), helpstring("Moves displayed Calendar month back by one month"), helpcontext(0x0000068d)]
        HRESULT PreviousMonth();
        [id(0x0000000b), helpstring("Returns rectangle at Column, Row location"), helpcontext(0x0000068e)]
        HRESULT RectCell(
                        [in] long Column, 
                        [in] long Row, 
                        [out, retval] TeeRect* result);
        [id(0x0000000c), helpstring("Returns rowcount of Calendar grid"), helpcontext(0x0000068f)]
        HRESULT Rows([out, retval] long* result);
        [id(0x0000000d), helpstring("Returns rect of entire Grid display of Series"), helpcontext(0x00000690)]
        HRESULT SeriesRect([out, retval] TeeRect* result);
        [id(0x00000008), propget, helpstring("Show/hide Button"), helpcontext(0x000006d1)]
        HRESULT NextButtonVisible([out, retval] VARIANT_BOOL* Value);
        [id(0x00000008), propput, helpstring("Show/hide Button"), helpcontext(0x000006d1)]
        HRESULT NextButtonVisible([in] VARIANT_BOOL Value);
        [id(0x0000000e), propget, helpstring("Show/hide Button"), helpcontext(0x000006d2)]
        HRESULT PreviousButtonVisible([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000e), propput, helpstring("Show/hide Button"), helpcontext(0x000006d2)]
        HRESULT PreviousButtonVisible([in] VARIANT_BOOL Value);
    };

    typedef [uuid(B74B94D3-1923-11D5-93FC-006008A7EED4), version(1.0), helpstring("Type defines visible TeeCommander buttons"), helpcontext(0x00000691)]
    enum {
        tcbNormal = 0,
        tcbSeparator = 1,
        tcbRotate = 2,
        tcbMove = 3,
        tcbZoom = 4,
        tcbDepth = 5,
        tcbEdit = 6,
        tcbPrintPreview = 7,
        tcbCopy = 8,
        tcbSave = 9,
        tcbLabel = 10,
        tcb3D = 11
    } ETeeCommanderControls;

    [
      odl,
      uuid(E517CB25-1C48-11D5-9400-006008A7EED4),
      version(1.0),
      helpstring("Contains characteristics of Calender Cell "),
      helpcontext(0x00000692),
      dual,
      oleautomation
    ]
    interface ICalendarCell : ITeeCustomShape {
        [id(0x00000004), propget, helpstring("Enables/disables visibility of cell"), helpcontext(0x00000693)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Value);
        [id(0x00000004), propput, helpstring("Enables/disables visibility of cell"), helpcontext(0x00000693)]
        HRESULT Visible([in] VARIANT_BOOL Value);
    };

    [
      odl,
      uuid(E517CB27-1C48-11D5-9400-006008A7EED4),
      version(1.0),
      helpstring("Characteristics for the upper row cells of the CalendarSeries"),
      helpcontext(0x00000694),
      dual,
      oleautomation
    ]
    interface ICalendarCellUpper : ICalendarCell {
        [id(0x00000005), propget, helpstring("Returns standard Datetime format of Weekday labels"), helpcontext(0x00000695)]
        HRESULT Format([out, retval] BSTR* Value);
        [id(0x00000005), propput, helpstring("Returns standard Datetime format of Weekday labels"), helpcontext(0x00000695)]
        HRESULT Format([in] BSTR Value);
        [id(0x00000006), propget, helpstring("When True sets text to uppercase"), helpcontext(0x00000696)]
        HRESULT UpperCase([out, retval] VARIANT_BOOL* Value);
        [id(0x00000006), propput, helpstring("When True sets text to uppercase"), helpcontext(0x00000696)]
        HRESULT UpperCase([in] VARIANT_BOOL Value);
    };


    typedef [uuid(E517CB2B-1C48-11D5-9400-006008A7EED4), version(1.0), helpstring("Annotation Tool default positions"), helpcontext(0x0000069c)]
    enum {
        ppLeftTop = 0,
        ppLeftBottom = 1,
        ppRightTop = 2,
        ppRightBottom = 3
    } EAnnotationPosition;

    [
      odl,
      uuid(E517CB29-1C48-11D5-9400-006008A7EED4),
      version(1.0),
      helpstring("Tool to draw annotated labels on your Chart"),
      helpcontext(0x00000697),
      dual,
      oleautomation
    ]
    interface IAnnotationTool : IDispatch {
        [id(0x00000002), propget, helpstring("Defines the position of the text"), helpcontext(0x00000698)]
        HRESULT Position([out, retval] EAnnotationPosition* Value);
        [id(0x00000002), propput, helpstring("Defines the position of the text"), helpcontext(0x00000698)]
        HRESULT Position([in] EAnnotationPosition Value);
        [id(0x00000003), propget, helpstring("Defines the shape of the text box"), helpcontext(0x00000699)]
        HRESULT Shape([out, retval] ITeeShapePanel** Value);
        [id(0x00000004), propget, helpstring("Annotation Tool text"), helpcontext(0x0000069a)]
        HRESULT Text([out, retval] BSTR* Value);
        [id(0x00000004), propput, helpstring("Annotation Tool text"), helpcontext(0x0000069a)]
        HRESULT Text([in] BSTR Value);
    };



    [
      odl,
      uuid(B6C104A8-FB89-11D4-93C9-006008A7EED4),
      version(1.0),
      helpstring("Chart Legend attributes"),
      helpcontext(0x000001fe),
      dual,
      oleautomation
    ]
    interface ILegend : ITeeShapePosition {
        [id(0x00000001), propget, helpstring("Determines the Legend position"), helpcontext(0x00000028)]
        HRESULT Alignment([out, retval] ELegendAlignment* Alignment);
        [id(0x00000001), propput, helpstring("Determines the Legend position"), helpcontext(0x00000028)]
        HRESULT Alignment([in] ELegendAlignment Alignment);
        [id(0x00000003), propget, helpstring("Size of Legend coloured signs in percent of Legend width."), helpcontext(0x000000a6)]
        HRESULT ColorWidth([out, retval] long* ColorWidth);
        [id(0x00000003), propput, helpstring("Size of Legend coloured signs in percent of Legend width."), helpcontext(0x000000a6)]
        HRESULT ColorWidth([in] long ColorWidth);
        [id(0x00000004), propget, helpstring("The Pen used to draw the Legend division lines"), helpcontext(0x000000b9)]
        HRESULT DividingLines([out, retval] IPen** DividingLines);
        [id(0x00000005), propget, helpstring("Index of the first legend item to display"), helpcontext(0x000000d1)]
        HRESULT FirstValue([out, retval] long* FirstValue);
        [id(0x00000005), propput, helpstring("Index of the first legend item to display"), helpcontext(0x000000d1)]
        HRESULT FirstValue([in] long FirstValue);
        [id(0x00000007), propget, helpstring("Pen used to draw the Legend border"), helpcontext(0x000000dd)]
        HRESULT Frame([out, retval] IPen** Frame);
        [id(0x00000008), propget, helpstring("Distance in pixels between the Legend and chart margin"), helpcontext(0x000000f4)]
        HRESULT HorizMargin([out, retval] long* HorizMargin);
        [id(0x00000008), propput, helpstring("Distance in pixels between the Legend and chart margin"), helpcontext(0x000000f4)]
        HRESULT HorizMargin([in] long HorizMargin);
        [id(0x00000009), propget, helpstring("Draws items in inverted order"), helpcontext(0x000000fa)]
        HRESULT Inverted([out, retval] VARIANT_BOOL* Inverted);
        [id(0x00000009), propput, helpstring("Draws items in inverted order"), helpcontext(0x000000fa)]
        HRESULT Inverted([in] VARIANT_BOOL Inverted);
        [id(0x0000000a), propget, helpstring("Sets the Legend mode ( values or Series names )"), helpcontext(0x00000111)]
        HRESULT LegendStyle([out, retval] ELegendStyle* LegendStyle);
        [id(0x0000000a), propput, helpstring("Sets the Legend mode ( values or Series names )"), helpcontext(0x00000111)]
        HRESULT LegendStyle([in] ELegendStyle LegendStyle);
        [id(0x0000000b), propget, helpstring("The Chart is resized to fit the Legend"), helpcontext(0x00000197)]
        HRESULT ResizeChart([out, retval] VARIANT_BOOL* ResizeChart);
        [id(0x0000000b), propput, helpstring("The Chart is resized to fit the Legend"), helpcontext(0x00000197)]
        HRESULT ResizeChart([in] VARIANT_BOOL ResizeChart);
        [id(0x0000000e), propget, helpstring("Determines the Legend items formatting"), helpcontext(0x00000282)]
        HRESULT TextStyle([out, retval] ELegendTextStyle* TextStyle);
        [id(0x0000000e), propput, helpstring("Determines the Legend items formatting"), helpcontext(0x00000282)]
        HRESULT TextStyle([in] ELegendTextStyle TextStyle);
        [id(0x0000000f), propget, helpstring("Vertical top position in percent of total Chart height"), helpcontext(0x0000028e)]
        HRESULT TopPos([out, retval] long* TopPos);
        [id(0x0000000f), propput, helpstring("Vertical top position in percent of total Chart height"), helpcontext(0x0000028e)]
        HRESULT TopPos([in] long TopPos);
        [id(0x00000010), propget, helpstring("Distance between Legend and Chart margin"), helpcontext(0x000002a1)]
        HRESULT VertMargin([out, retval] long* VertMargin);
        [id(0x00000010), propput, helpstring("Distance between Legend and Chart margin"), helpcontext(0x000002a1)]
        HRESULT VertMargin([in] long VertMargin);
        [id(0x00000011), propget, helpstring("Shows / Hides the Legend"), helpcontext(0x000002a7)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x00000011), propput, helpstring("Shows / Hides the Legend"), helpcontext(0x000002a7)]
        HRESULT Visible([in] VARIANT_BOOL Visible);
        [id(0x00000030), helpstring("Text of Legend Value for Active Series index"), helpcontext(0x000000da)]
        HRESULT Formatted(
                        [in] long SomeSeriesOrValueIndex, 
                        [out, retval] BSTR* SeriesOrValueIndex);
        [id(0x00000031), helpstring("Legend String display of a Series Point value"), helpcontext(0x000000db)]
        HRESULT FormattedValue(
                        [in] long aSeries, 
                        [in] long SomeValueIndex, 
                        [out, retval] BSTR* ValueIndex);
        [id(0x00000012), helpstring("Returns Item index of clicked Legend item"), helpcontext(0x00000354)]
        HRESULT Clicked(
                        [in] long X, 
                        [in] long Y, 
                        [out, retval] long* Value);
        [id(0x00000013), propget, helpstring("Number of rows for multiline Legend"), helpcontext(0x00000355)]
        HRESULT MaxNumRows([out, retval] long* Value);
        [id(0x00000013), propput, helpstring("Number of rows for multiline Legend"), helpcontext(0x00000355)]
        HRESULT MaxNumRows([in] long Value);
        [id(0x00000014), helpstring("Load Legend BackImage"), helpcontext(0x00000356)]
        HRESULT BackImageLoad([in] BSTR FileName);
        [id(0x00000015), helpstring("Clear Legend BackImage"), helpcontext(0x00000357)]
        HRESULT BackImageClear();
        [id(0x00000016), propget, helpstring("Legend Brush"), helpcontext(0x00000380)]
        HRESULT Brush([out, retval] IBrush** Value);
        [id(0x0000001a), propget, helpstring("Determines which series is used as data for the Legend entries."), helpcontext(0x0000041f)]
        HRESULT Series([out, retval] VARIANT* Value);
        [id(0x0000001a), propput, helpstring("Determines which series is used as data for the Legend entries."), helpcontext(0x0000041f)]
        HRESULT Series([in] VARIANT Value);
        [id(0x0000001b), helpstring("Use the DrawLegend method to draw multiple Legends on a Chart."), helpcontext(0x00000420)]
        HRESULT DrawLegend();
        [id(0x0000001c), propget, helpstring("Sets color of the font of the legend text to that of the Series color."), helpcontext(0x00000507)]
        HRESULT FontSeriesColor([out, retval] VARIANT_BOOL* Value);
        [id(0x0000001c), propput, helpstring("Sets color of the font of the legend text to that of the Series color."), helpcontext(0x00000507)]
        HRESULT FontSeriesColor([in] VARIANT_BOOL Value);
        [id(0x0000001d), propget, helpstring("Stipulates whether or not the Legend shows only the current page items"), helpcontext(0x00000421)]
        HRESULT CurrentPage([out, retval] VARIANT_BOOL* Value);
        [id(0x0000001d), propput, helpstring("Stipulates whether or not the Legend shows only the current page items"), helpcontext(0x00000421)]
        HRESULT CurrentPage([in] VARIANT_BOOL Value);
        [id(0x0000001e), propget, helpstring("Controls the width and position of the color Legend rectangle"), helpcontext(0x00000422)]
        HRESULT Symbol([out, retval] ILegendSymbol** Value);
        [id(0x0000001f), propget, helpstring("Enables/disables the display of Legend check boxes."), helpcontext(0x00000505)]
        HRESULT CheckBoxes([out, retval] VARIANT_BOOL* Value);
        [id(0x0000001f), propput, helpstring("Enables/disables the display of Legend check boxes."), helpcontext(0x00000505)]
        HRESULT CheckBoxes([in] VARIANT_BOOL Value);
        [id(0x00000020), propget, helpstring("Disables/Enables automatic calculation of color Legend rectangle width."), helpcontext(0x00000423)]
        HRESULT ColumnWidthAuto([out, retval] VARIANT_BOOL* Value);
        [id(0x00000020), propput, helpstring("Disables/Enables automatic calculation of color Legend rectangle width."), helpcontext(0x00000423)]
        HRESULT ColumnWidthAuto([in] VARIANT_BOOL Value);
        [id(0x00000021), propget, helpstring("Sets width of color Legend rectangle."), helpcontext(0x00000424)]
        HRESULT ColumnWidths(
                        [in] long Index, 
                        [out, retval] long* Value);
        [id(0x00000021), propput, helpstring("Sets width of color Legend rectangle."), helpcontext(0x00000424)]
        HRESULT ColumnWidths(
                        [in] long Index, 
                        [in] long Value);
        [id(0x00000002), propget, helpstring("Modifies vertical spacing between Legend items (pixels)."), helpcontext(0x0000050c)]
        HRESULT Vertspacing([out, retval] long* Value);
        [id(0x00000002), propput, helpstring("Modifies vertical spacing between Legend items (pixels)."), helpcontext(0x0000050c)]
        HRESULT Vertspacing([in] long Value);
        [id(0x00000006), propget, helpstring("Returns True if the legend is left or right aligned."), helpcontext(0x00000425)]
        HRESULT Vertical([out, retval] VARIANT_BOOL* Value);
    };

    [
      odl,
      uuid(E517CB2E-1C48-11D5-9400-006008A7EED4),
      version(1.0),
      helpstring("Indicates the page number of a multi-page Chart"),
      helpcontext(0x0000069d),
      dual,
      oleautomation
    ]
    interface IPageNumTool : IAnnotationTool {
        [id(0x00000006), propget, helpstring("Text format"), helpcontext(0x0000069e)]
        HRESULT Format([out, retval] BSTR* Value);
        [id(0x00000006), propput, helpstring("Text format"), helpcontext(0x0000069e)]
        HRESULT Format([in] BSTR Value);
    };

    [
      odl,
      uuid(4061F8F0-1D1C-11D5-9401-006008A7EED4),
      version(1.0),
      helpstring("Allows Series data to be loaded from Text sources"),
      helpcontext(0x0000069f),
      dual,
      oleautomation
    ]
    interface ISeriesTextSource : ITeeLinked {
        [id(0x00000002), helpstring("Disconnects the Series from the data"), helpcontext(0x000006a0)]
        HRESULT Close();
        [id(0x00000003), helpstring("Calls the underlying LoadFromFile or LoadFromURL methods"), helpcontext(0x000006a1)]
        HRESULT Load();
        [id(0x00000004), helpstring("Loads data from a stream object"), helpcontext(0x000006a2)]
        HRESULT LoadAsStream([in] VARIANT AStream);
        [id(0x00000006), helpstring("Loads data from a text file"), helpcontext(0x000006a3)]
        HRESULT LoadFromFile([in] BSTR FileName);
        [id(0x00000007), helpstring("Loads data from a URL"), helpcontext(0x000006a4)]
        HRESULT LoadFromURL([in] BSTR URL);
        [id(0x00000008), helpstring("Sets Active True (internally calling Load method)"), helpcontext(0x000006a5)]
        HRESULT Open();
        [id(0x00000009), propget, helpstring("Activates/deactivates the TSeriesTextSource"), helpcontext(0x000006a6)]
        HRESULT Active([out, retval] VARIANT_BOOL* Value);
        [id(0x00000009), propput, helpstring("Activates/deactivates the TSeriesTextSource"), helpcontext(0x000006a6)]
        HRESULT Active([in] VARIANT_BOOL Value);
        [id(0x0000000a), propget, helpstring("Defines the number of lines that act as headers"), helpcontext(0x000006a7)]
        HRESULT HeaderLines([out, retval] long* Value);
        [id(0x0000000a), propput, helpstring("Defines the number of lines that act as headers"), helpcontext(0x000006a7)]
        HRESULT HeaderLines([in] long Value);
        [id(0x0000000b), propget, helpstring("Configures the addition of the series data"), helpcontext(0x000006a8)]
        HRESULT Fields([out, retval] ISeriesTextFields** Value);
        [id(0x0000000c), propget, helpstring("Character that separates the fields in the text source file"), helpcontext(0x000006a9)]
        HRESULT FieldSeparator([out, retval] BSTR* Value);
        [id(0x0000000c), propput, helpstring("Character that separates the fields in the text source file"), helpcontext(0x000006a9)]
        HRESULT FieldSeparator([in] BSTR Value);
        [id(0x0000000d), propget, helpstring("Defines the file name of the input data text source file"), helpcontext(0x000006aa)]
        HRESULT FileName([out, retval] BSTR* Value);
        [id(0x0000000d), propput, helpstring("Defines the file name of the input data text source file"), helpcontext(0x000006aa)]
        HRESULT FileName([in] BSTR Value);
        [id(0x0000000e), propget, helpstring("Series to receive SeriesTextSource data"), helpcontext(0x000006ab)]
        HRESULT Series([out, retval] VARIANT* Value);
        [id(0x0000000e), propput, helpstring("Series to receive SeriesTextSource data"), helpcontext(0x000006ab)]
        HRESULT Series([in] VARIANT Value);
        [id(0x0000000f), helpstring("Adds a field a the text source file"), helpcontext(0x000006ac)]
        HRESULT AddField(
                        [in] BSTR AName, 
                        [in] long AIndex, 
                        [out, retval] ISeriesTextField** result);
    };

    [
      uuid(4061F8F2-1D1C-11D5-9401-006008A7EED4),
      version(1.0),
      helpstring("TeeChart SeriesTextSource v5"),
      helpcontext(0x0000069f)
    ]
    coclass SeriesTextSource {
        [default] interface ISeriesTextSource;
    };

    [
      odl,
      uuid(4061F8F5-1D1C-11D5-9401-006008A7EED4),
      version(1.0),
      helpstring("Collection of the SeriesTextSource fields"),
      helpcontext(0x000006ae),
      dual,
      oleautomation
    ]
    interface ISeriesTextFields : IDispatch {
        [id(0x00000001), propget, helpstring("Accesses each Field by index"), helpcontext(0x000006af)]
        HRESULT Items(
                        [in] long Index, 
                        [out, retval] ISeriesTextField** Value);
        [id(0x00000002), helpstring("Empties the Items array"), helpcontext(0x000006b0)]
        HRESULT Clear();
        [id(0x00000003), helpstring("Removes the collection item specified"), helpcontext(0x000006b1)]
        HRESULT Delete([in] long Index);
        [id(0x00000004), propget, helpstring("Returns the number of Text fields"), helpcontext(0x000006b2)]
        HRESULT Count([out, retval] long* Value);
    };

    [
      odl,
      uuid(4061F8F7-1D1C-11D5-9401-006008A7EED4),
      version(1.0),
      helpstring("Contains the list of characteristics of the Field"),
      helpcontext(0x000006b3),
      dual,
      oleautomation
    ]
    interface ISeriesTextField : IDispatch {
        [id(0x00000001), propget, helpstring("Returns index of Field"), helpcontext(0x000006b4)]
        HRESULT FieldIndex([out, retval] long* Value);
        [id(0x00000001), propput, helpstring("Returns index of Field"), helpcontext(0x000006b4)]
        HRESULT FieldIndex([in] long Value);
        [id(0x00000002), propget, helpstring("Defines the name of a new field"), helpcontext(0x000006b5)]
        HRESULT FieldName([out, retval] BSTR* Value);
        [id(0x00000002), propput, helpstring("Defines the name of a new field"), helpcontext(0x000006b5)]
        HRESULT FieldName([in] BSTR Value);
    };

    [
      uuid(F069C83A-876F-4C9D-B540-D761428606DB),
      version(1.0),
      helpstring("TeeChart ChartGrid v5"),
      helpcontext(0x000005c1),
      control
    ]
    coclass ChartGrid {
        [default] interface IChartGrid;
        [default, source] dispinterface IChartGridEvents;
    };


    [
      odl,
      uuid(A841A3E5-3ED7-11D5-943D-006008A7EED4),
      version(1.0),
      helpstring("List of Series IValueLists"),
      helpcontext(0x000006be),
      dual,
      oleautomation
    ]
    interface IValueLists : IDispatch {
        [id(0x00000001), propget, helpstring("Return list count"), helpcontext(0x000006bf)]
        HRESULT Count([out, retval] long* Value);
        [id(0x00000002), propget, helpstring("IValuelists by index"), helpcontext(0x000006c0)]
        HRESULT Items(
                        [in] long Index, 
                        [out, retval] IValueList** Value);
    };

    [
      odl,
      uuid(22A5D9BB-B643-11D5-94F8-006008A7EED4),
      version(1.0),
      helpstring("Shape characteristics"),
      helpcontext(0x000006dd),
      dual,
      oleautomation
    ]
    interface ITeeShapePanel : ITeeShapePosition {
        [id(0x00000002), propget, helpstring("Frame Pen"), helpcontext(0x000006de)]
        HRESULT Frame([out, retval] IPen** Value);
    };

    [
      odl,
      uuid(5253CEBF-921C-4B2A-80D8-C23BE8908900),
      version(1.0),
      dual,
      oleautomation
    ]
    interface IChartGridRows : IDispatch {
        [id(0x0000000e), propget, helpstring("Specifies the index of the row that contains the selected cell."), helpcontext(0x000006ee)]
        HRESULT Row([out, retval] long* Value);
        [id(0x0000000e), propput, helpstring("Specifies the index of the row that contains the selected cell."), helpcontext(0x000006ee)]
        HRESULT Row([in] long Value);
        [id(0x00000012), propget, helpstring("Returns count of rows in Grid"), helpcontext(0x000006f0)]
        HRESULT Count([out, retval] long* Value);
        [id(0x00000001), propget, helpstring("Height of indexed Row"), helpcontext(0x000006ef)]
        HRESULT Heights(
                        [in] long Index, 
                        [out, retval] long* Value);
        [id(0x00000001), propput, helpstring("Height of indexed Row"), helpcontext(0x000006ef)]
        HRESULT Heights(
                        [in] long Index, 
                        [in] long Value);
    };

    [
      odl,
      uuid(8BFBFAF7-2FAB-4F28-9C7B-08A2D1F157AE),
      version(1.0),
      dual,
      oleautomation
    ]
    interface IChartGridCols : IDispatch {
        [id(0x00000002), propget, helpstring("Specifies the index of the column that contains the selected cell."), helpcontext(0x000004be)]
        HRESULT Col([out, retval] long* Value);
        [id(0x00000002), propput, helpstring("Specifies the index of the column that contains the selected cell."), helpcontext(0x000004be)]
        HRESULT Col([in] long Value);
        [id(0x00000003), propget, helpstring("Specifies the number of columns in the grid."), helpcontext(0x000004bf)]
        HRESULT Count([out, retval] long* Value);
        [id(0x00000004), propget, hidden, helpstring("Indicates the width (in pixels) of all the columns in the grid."), helpcontext(0x000004c0)]
        HRESULT Widths(
                        [in] long Index, 
                        [out, retval] long* Value);
        [id(0x00000004), propput, hidden, helpstring("Indicates the width (in pixels) of all the columns in the grid."), helpcontext(0x000004c0)]
        HRESULT Widths(
                        [in] long Index, 
                        [in] long Value);
    };

};
